
MLX90640_IR_CAMERA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800d9a8  0800d9a8  0001d9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfd0  0800dfd0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfd0  0800dfd0  0001dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfd8  0800dfd8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfd8  0800dfd8  0001dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfdc  0800dfdc  0001dfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800dfe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e4  200001e4  0800e1c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027c8  0800e1c4  000227c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8bc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f4  00000000  00000000  0002fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00031dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022caa  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011669  00000000  00000000  000562a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd632  00000000  00000000  0006790b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ccc  00000000  00000000  00134f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d98c 	.word	0x0800d98c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800d98c 	.word	0x0800d98c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MLX90640_DumpEE>:
int IsPixelBad(uint16_t pixel, paramsMLX90640* params);
int ValidateFrameData(uint16_t* frameData);
int ValidateAuxData(uint16_t* auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t* eeData)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 8001044:	79f8      	ldrb	r0, [r7, #7]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f44f 7250 	mov.w	r2, #832	; 0x340
 800104c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001050:	f002 ff0a 	bl	8003e68 <MLX90640_I2CRead>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <MLX90640_GetFrameData>:

  return 0;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t* frameData)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b0a6      	sub	sp, #152	; 0x98
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	6039      	str	r1, [r7, #0]
 8001068:	71fb      	strb	r3, [r7, #7]
  uint16_t dataReady = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  uint16_t controlRegister1;
  uint16_t statusRegister;
  int error = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint16_t data[64];
  uint8_t cnt = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

  while (dataReady == 0)
 800107c:	e016      	b.n	80010ac <MLX90640_GetFrameData+0x4e>
  {
    error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 800107e:	79f8      	ldrb	r0, [r7, #7]
 8001080:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	f002 feed 	bl	8003e68 <MLX90640_I2CRead>
 800108e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (error != 0)
 8001092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <MLX90640_GetFrameData+0x42>
    {
      return error;
 800109a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800109e:	e093      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
    }
    dataReady = statusRegister & 0x0008;
 80010a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  while (dataReady == 0)
 80010ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0e4      	beq.n	800107e <MLX90640_GetFrameData+0x20>
  }

  error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 ff23 	bl	8003f08 <MLX90640_I2CWrite>
 80010c2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (error == -1)
 80010c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ce:	d102      	bne.n	80010d6 <MLX90640_GetFrameData+0x78>
  {
    return error;
 80010d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010d4:	e078      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
  }

  error = MLX90640_I2CRead(slaveAddr, 0x0400, 768, frameData);
 80010d6:	79f8      	ldrb	r0, [r7, #7]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	f002 fec1 	bl	8003e68 <MLX90640_I2CRead>
 80010e6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (error != 0)
 80010ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <MLX90640_GetFrameData+0x9a>
  {
    return error;
 80010f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010f6:	e067      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
  }

  error = MLX90640_I2CRead(slaveAddr, 0x0700, 64, data);
 80010f8:	79f8      	ldrb	r0, [r7, #7]
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001104:	f002 feb0 	bl	8003e68 <MLX90640_I2CRead>
 8001108:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (error != 0)
 800110c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <MLX90640_GetFrameData+0xbc>
  {
    return error;
 8001114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001118:	e056      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
  }

  error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 800111a:	79f8      	ldrb	r0, [r7, #7]
 800111c:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8001120:	2201      	movs	r2, #1
 8001122:	f248 010d 	movw	r1, #32781	; 0x800d
 8001126:	f002 fe9f 	bl	8003e68 <MLX90640_I2CRead>
 800112a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  frameData[832] = controlRegister1;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001134:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001138:	801a      	strh	r2, [r3, #0]
  frameData[833] = statusRegister & 0x0001;
 800113a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001144:	f002 0201 	and.w	r2, r2, #1
 8001148:	b292      	uxth	r2, r2
 800114a:	801a      	strh	r2, [r3, #0]

  if (error != 0)
 800114c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <MLX90640_GetFrameData+0xfc>
  {
    return error;
 8001154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001158:	e036      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
  }

  error = ValidateAuxData(data);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f867 	bl	8001232 <ValidateAuxData>
 8001164:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (error == 0)
 8001168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800116c:	2b00      	cmp	r3, #0
 800116e:	d11b      	bne.n	80011a8 <MLX90640_GetFrameData+0x14a>
  {
    for (cnt = 0; cnt < 64; cnt++)
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001176:	e013      	b.n	80011a0 <MLX90640_GetFrameData+0x142>
    {
      frameData[cnt + 768] = data[cnt];
 8001178:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800117c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001180:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001184:	0052      	lsls	r2, r2, #1
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	440a      	add	r2, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3398      	adds	r3, #152	; 0x98
 800118e:	443b      	add	r3, r7
 8001190:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8001194:	8013      	strh	r3, [r2, #0]
    for (cnt = 0; cnt < 64; cnt++)
 8001196:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800119a:	3301      	adds	r3, #1
 800119c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80011a0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80011a4:	2b3f      	cmp	r3, #63	; 0x3f
 80011a6:	d9e7      	bls.n	8001178 <MLX90640_GetFrameData+0x11a>
    }
  }

  error = ValidateFrameData(frameData);
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f000 f811 	bl	80011d0 <ValidateFrameData>
 80011ae:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (error != 0)
 80011b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <MLX90640_GetFrameData+0x162>
  {
    return error;
 80011ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011be:	e003      	b.n	80011c8 <MLX90640_GetFrameData+0x16a>
  }

  return frameData[833];
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80011c6:	881b      	ldrh	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3798      	adds	r7, #152	; 0x98
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <ValidateFrameData>:

int ValidateFrameData(uint16_t* frameData)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint8_t line = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  for (int i = 0; i < 768; i += 32)
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	e01c      	b.n	800121c <ValidateFrameData+0x4c>
  {
    if ((frameData[i] == 0x7FFF) && (line % 2 == frameData[833])) return -8;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d10d      	bne.n	8001210 <ValidateFrameData+0x40>
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d102      	bne.n	8001210 <ValidateFrameData+0x40>
 800120a:	f06f 0307 	mvn.w	r3, #7
 800120e:	e00a      	b.n	8001226 <ValidateFrameData+0x56>
    line = line + 1;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 768; i += 32)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3320      	adds	r3, #32
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001222:	dbde      	blt.n	80011e2 <ValidateFrameData+0x12>
  }

  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <ValidateAuxData>:

int ValidateAuxData(uint16_t* auxData)
{
 8001232:	b480      	push	{r7}
 8001234:	b089      	sub	sp, #36	; 0x24
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]

  if (auxData[0] == 0x7FFF) return -8;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001242:	4293      	cmp	r3, r2
 8001244:	d102      	bne.n	800124c <ValidateAuxData+0x1a>
 8001246:	f06f 0307 	mvn.w	r3, #7
 800124a:	e07e      	b.n	800134a <ValidateAuxData+0x118>

  for (int i = 8; i < 19; i++)
 800124c:	2308      	movs	r3, #8
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	e00e      	b.n	8001270 <ValidateAuxData+0x3e>
  {
    if (auxData[i] == 0x7FFF) return -8;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001260:	4293      	cmp	r3, r2
 8001262:	d102      	bne.n	800126a <ValidateAuxData+0x38>
 8001264:	f06f 0307 	mvn.w	r3, #7
 8001268:	e06f      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 8; i < 19; i++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b12      	cmp	r3, #18
 8001274:	dded      	ble.n	8001252 <ValidateAuxData+0x20>
  }

  for (int i = 20; i < 23; i++)
 8001276:	2314      	movs	r3, #20
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e00e      	b.n	800129a <ValidateAuxData+0x68>
  {
    if (auxData[i] == 0x7FFF) return -8;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <ValidateAuxData+0x62>
 800128e:	f06f 0307 	mvn.w	r3, #7
 8001292:	e05a      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 20; i < 23; i++)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	3301      	adds	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b16      	cmp	r3, #22
 800129e:	dded      	ble.n	800127c <ValidateAuxData+0x4a>
  }

  for (int i = 24; i < 33; i++)
 80012a0:	2318      	movs	r3, #24
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00e      	b.n	80012c4 <ValidateAuxData+0x92>
  {
    if (auxData[i] == 0x7FFF) return -8;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d102      	bne.n	80012be <ValidateAuxData+0x8c>
 80012b8:	f06f 0307 	mvn.w	r3, #7
 80012bc:	e045      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 24; i < 33; i++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	dded      	ble.n	80012a6 <ValidateAuxData+0x74>
  }

  for (int i = 40; i < 51; i++)
 80012ca:	2328      	movs	r3, #40	; 0x28
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	e00e      	b.n	80012ee <ValidateAuxData+0xbc>
  {
    if (auxData[i] == 0x7FFF) return -8;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012de:	4293      	cmp	r3, r2
 80012e0:	d102      	bne.n	80012e8 <ValidateAuxData+0xb6>
 80012e2:	f06f 0307 	mvn.w	r3, #7
 80012e6:	e030      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 40; i < 51; i++)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	3301      	adds	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b32      	cmp	r3, #50	; 0x32
 80012f2:	dded      	ble.n	80012d0 <ValidateAuxData+0x9e>
  }

  for (int i = 52; i < 55; i++)
 80012f4:	2334      	movs	r3, #52	; 0x34
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e00e      	b.n	8001318 <ValidateAuxData+0xe6>
  {
    if (auxData[i] == 0x7FFF) return -8;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001308:	4293      	cmp	r3, r2
 800130a:	d102      	bne.n	8001312 <ValidateAuxData+0xe0>
 800130c:	f06f 0307 	mvn.w	r3, #7
 8001310:	e01b      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 52; i < 55; i++)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b36      	cmp	r3, #54	; 0x36
 800131c:	dded      	ble.n	80012fa <ValidateAuxData+0xc8>
  }

  for (int i = 56; i < 64; i++)
 800131e:	2338      	movs	r3, #56	; 0x38
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	e00e      	b.n	8001342 <ValidateAuxData+0x110>
  {
    if (auxData[i] == 0x7FFF) return -8;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001332:	4293      	cmp	r3, r2
 8001334:	d102      	bne.n	800133c <ValidateAuxData+0x10a>
 8001336:	f06f 0307 	mvn.w	r3, #7
 800133a:	e006      	b.n	800134a <ValidateAuxData+0x118>
  for (int i = 56; i < 64; i++)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b3f      	cmp	r3, #63	; 0x3f
 8001346:	dded      	ble.n	8001324 <ValidateAuxData+0xf2>
  }

  return 0;
 8001348:	2300      	movs	r3, #0

}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  int error = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]

  ExtractVDDParameters(eeData, mlx90640);
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fe1c 	bl	8001fa4 <ExtractVDDParameters>
  ExtractPTATParameters(eeData, mlx90640);
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fe50 	bl	8002014 <ExtractPTATParameters>
  ExtractGainParameters(eeData, mlx90640);
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fed8 	bl	800212c <ExtractGainParameters>
  ExtractTgcParameters(eeData, mlx90640);
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fee6 	bl	8002150 <ExtractTgcParameters>
  ExtractResolutionParameters(eeData, mlx90640);
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 ff1a 	bl	80021c0 <ExtractResolutionParameters>
  ExtractKsTaParameters(eeData, mlx90640);
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 ff2e 	bl	80021f0 <ExtractKsTaParameters>
  ExtractKsToParameters(eeData, mlx90640);
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 ff62 	bl	8002260 <ExtractKsToParameters>
  ExtractCPParameters(eeData, mlx90640);
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f002 fa36 	bl	8003810 <ExtractCPParameters>
  ExtractAlphaParameters(eeData, mlx90640);
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f001 f842 	bl	8002430 <ExtractAlphaParameters>
  ExtractOffsetParameters(eeData, mlx90640);
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f001 fbb0 	bl	8002b14 <ExtractOffsetParameters>
  ExtractKtaPixelParameters(eeData, mlx90640);
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 fde6 	bl	8002f88 <ExtractKtaPixelParameters>
  ExtractKvPixelParameters(eeData, mlx90640);
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f002 f82a 	bl	8003418 <ExtractKvPixelParameters>
  ExtractCILCParameters(eeData, mlx90640);
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f002 fb82 	bl	8003ad0 <ExtractCILCParameters>
  error = ExtractDeviatingPixels(eeData, mlx90640);
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f002 fc1e 	bl	8003c10 <ExtractDeviatingPixels>
 80013d4:	60f8      	str	r0, [r7, #12]

  return error;
 80013d6:	68fb      	ldr	r3, [r7, #12]

}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
  uint16_t controlRegister1;
  int value;
  int error;

  value = (refreshRate & 0x07) << 7;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80013f8:	613b      	str	r3, [r7, #16]

  error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80013fa:	79f8      	ldrb	r0, [r7, #7]
 80013fc:	f107 030e 	add.w	r3, r7, #14
 8001400:	2201      	movs	r2, #1
 8001402:	f248 010d 	movw	r1, #32781	; 0x800d
 8001406:	f002 fd2f 	bl	8003e68 <MLX90640_I2CRead>
 800140a:	6178      	str	r0, [r7, #20]
  if (error == 0)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10f      	bne.n	8001432 <MLX90640_SetRefreshRate+0x52>
  {
    value = (controlRegister1 & 0xFC7F) | value;
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	461a      	mov	r2, r3
 8001416:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 800141a:	4013      	ands	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
    error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	f248 010d 	movw	r1, #32781	; 0x800d
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fd6c 	bl	8003f08 <MLX90640_I2CWrite>
 8001430:	6178      	str	r0, [r7, #20]
  }

  return error;
 8001432:	697b      	ldr	r3, [r7, #20]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  uint16_t controlRegister1;
  int value;
  int error;

  error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8001446:	79f8      	ldrb	r0, [r7, #7]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	2201      	movs	r2, #1
 800144e:	f248 010d 	movw	r1, #32781	; 0x800d
 8001452:	f002 fd09 	bl	8003e68 <MLX90640_I2CRead>
 8001456:	6178      	str	r0, [r7, #20]

  if (error == 0)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <MLX90640_SetChessMode+0x3c>
  {
    value = (controlRegister1 | 0x1000);
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001464:	b29b      	uxth	r3, r3
 8001466:	613b      	str	r3, [r7, #16]
    error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	f248 010d 	movw	r1, #32781	; 0x800d
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fd49 	bl	8003f08 <MLX90640_I2CWrite>
 8001476:	6178      	str	r0, [r7, #20]
  }

  return error;
 8001478:	697b      	ldr	r3, [r7, #20]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <Q_rsqrt>:
  return modeRAM;
}

//------------------------------------------------------------------------------
float Q_rsqrt(float number)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	ed87 0a01 	vstr	s0, [r7, #4]
  long i;
  float x2, y;
  const float threehalfs = 1.5f;
 800148e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001492:	617b      	str	r3, [r7, #20]

  x2 = number * 0.5f;
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800149c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a0:	edc7 7a04 	vstr	s15, [r7, #16]
  y = number;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	60bb      	str	r3, [r7, #8]
  i = *(long*)&y;                       // evil floating point bit level hacking
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);               // what the fuck?
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	105a      	asrs	r2, r3, #1
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <Q_rsqrt+0x7c>)
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60bb      	str	r3, [r7, #8]
  y = y * (threehalfs - (x2 * y * y));   // 1st iteration
 80014c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014de:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	edc7 7a02 	vstr	s15, [r7, #8]
//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

  return y;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	5f3759df 	.word	0x5f3759df
 8001504:	00000000 	.word	0x00000000

08001508 <MLX90640_CalculateTo>:

void MLX90640_CalculateTo(uint16_t* frameData, const paramsMLX90640* params, float emissivity, float tr, float* result)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a0      	sub	sp, #128	; 0x80
 800150c:	af00      	add	r7, sp, #0
 800150e:	6178      	str	r0, [r7, #20]
 8001510:	6139      	str	r1, [r7, #16]
 8001512:	ed87 0a03 	vstr	s0, [r7, #12]
 8001516:	edc7 0a02 	vstr	s1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  float kvScale;
  float alphaScale;
  float kta;
  float kv;

  subPage = frameData[833];
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 8001522:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  vdd = MLX90640_GetVdd(frameData, params);
 8001526:	6939      	ldr	r1, [r7, #16]
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f000 fc29 	bl	8001d80 <MLX90640_GetVdd>
 800152e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  ta = MLX90640_GetTa(frameData, params);
 8001532:	6939      	ldr	r1, [r7, #16]
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f000 fca5 	bl	8001e84 <MLX90640_GetTa>
 800153a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60

  ta4 = (ta + 273.15f);
 800153e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001542:	ed9f 7ada 	vldr	s14, [pc, #872]	; 80018ac <MLX90640_CalculateTo+0x3a4>
 8001546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  ta4 = ta4 * ta4;
 800154e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001552:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001556:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  ta4 = ta4 * ta4;
 800155a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800155e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001562:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  tr4 = (tr + 273.15f);
 8001566:	edd7 7a02 	vldr	s15, [r7, #8]
 800156a:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 80018ac <MLX90640_CalculateTo+0x3a4>
 800156e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001572:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  tr4 = tr4 * tr4;
 8001576:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800157a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800157e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  tr4 = tr4 * tr4;
 8001582:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001586:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800158a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  taTr = tr4 - (tr4 - ta4) / emissivity;
 800158e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001592:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001596:	ee77 6a67 	vsub.f32	s13, s14, s15
 800159a:	ed97 7a03 	vldr	s14, [r7, #12]
 800159e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

  ktaScale = pow(2, (double)params->ktaScale);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc5 	bl	8000544 <__aeabi_ui2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b11 	vmov	d1, r2, r3
 80015c2:	ed9f 0bb3 	vldr	d0, [pc, #716]	; 8001890 <MLX90640_CalculateTo+0x388>
 80015c6:	f00b fac5 	bl	800cb54 <pow>
 80015ca:	ec53 2b10 	vmov	r2, r3, d0
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fb29 	bl	8000c28 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	653b      	str	r3, [r7, #80]	; 0x50
  kvScale = pow(2, (double)params->kvScale);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	ec43 2b11 	vmov	d1, r2, r3
 80015f2:	ed9f 0ba7 	vldr	d0, [pc, #668]	; 8001890 <MLX90640_CalculateTo+0x388>
 80015f6:	f00b faad 	bl	800cb54 <pow>
 80015fa:	ec53 2b10 	vmov	r2, r3, d0
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fb11 	bl	8000c28 <__aeabi_d2f>
 8001606:	4603      	mov	r3, r0
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  alphaScale = pow(2, (double)params->alphaScale);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff97 	bl	8000544 <__aeabi_ui2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b11 	vmov	d1, r2, r3
 800161e:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8001890 <MLX90640_CalculateTo+0x388>
 8001622:	f00b fa97 	bl	800cb54 <pow>
 8001626:	ec53 2b10 	vmov	r2, r3, d0
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fafb 	bl	8000c28 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48

  alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800163c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001898 <MLX90640_CalculateTo+0x390>
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800164c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	edc7 7a06 	vstr	s15, [r7, #24]
  alphaCorrR[1] = 1;
 8001658:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800165c:	61fb      	str	r3, [r7, #28]
  alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800167a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167e:	edc7 7a08 	vstr	s15, [r7, #32]
  alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8001682:	ed97 7a08 	vldr	s14, [r7, #32]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001692:	461a      	mov	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  //------------------------- Gain calculation -----------------------------------
  gain = frameData[778];
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f203 6314 	addw	r3, r3, #1556	; 0x614
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  if (gain > 32767)
 80016cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80016d0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800189c <MLX90640_CalculateTo+0x394>
 80016d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	dd07      	ble.n	80016ee <MLX90640_CalculateTo+0x1e6>
  {
    gain = gain - 65536;
 80016de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80016e2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80018a0 <MLX90640_CalculateTo+0x398>
 80016e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ea:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  }

  gain = params->gainEE / gain;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001704:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

  //------------------------- To calculation -------------------------------------
  mode = (frameData[832] & 0x1000) >> 5;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	115b      	asrs	r3, r3, #5
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  irDataCP[0] = frameData[776];
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  irDataCP[1] = frameData[808];
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001740:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  for (int i = 0; i < 2; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	673b      	str	r3, [r7, #112]	; 0x70
 8001748:	e034      	b.n	80017b4 <MLX90640_CalculateTo+0x2ac>
  {
    if (irDataCP[i] > 32767)
 800174a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	3380      	adds	r3, #128	; 0x80
 8001750:	443b      	add	r3, r7
 8001752:	3b58      	subs	r3, #88	; 0x58
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800189c <MLX90640_CalculateTo+0x394>
 800175c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd11      	ble.n	800178a <MLX90640_CalculateTo+0x282>
    {
      irDataCP[i] = irDataCP[i] - 65536;
 8001766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	3380      	adds	r3, #128	; 0x80
 800176c:	443b      	add	r3, r7
 800176e:	3b58      	subs	r3, #88	; 0x58
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80018a0 <MLX90640_CalculateTo+0x398>
 8001778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	3380      	adds	r3, #128	; 0x80
 8001782:	443b      	add	r3, r7
 8001784:	3b58      	subs	r3, #88	; 0x58
 8001786:	edc3 7a00 	vstr	s15, [r3]
    }
    irDataCP[i] = irDataCP[i] * gain;
 800178a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	3380      	adds	r3, #128	; 0x80
 8001790:	443b      	add	r3, r7
 8001792:	3b58      	subs	r3, #88	; 0x58
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	3380      	adds	r3, #128	; 0x80
 80017a6:	443b      	add	r3, r7
 80017a8:	3b58      	subs	r3, #88	; 0x58
 80017aa:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++)
 80017ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b0:	3301      	adds	r3, #1
 80017b2:	673b      	str	r3, [r7, #112]	; 0x70
 80017b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	ddc7      	ble.n	800174a <MLX90640_CalculateTo+0x242>
  }
  irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80017ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	ed93 6a08 	vldr	s12, [r3, #32]
 80017d6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017da:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80017de:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80017e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80017ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	ed93 6a07 	vldr	s12, [r3, #28]
 80017f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80017fc:	eddf 5a29 	vldr	s11, [pc, #164]	; 80018a4 <MLX90640_CalculateTo+0x39c>
 8001800:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001804:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800180c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001818:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  if (mode == params->calibrationModeEE)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001822:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001826:	429a      	cmp	r2, r3
 8001828:	d142      	bne.n	80018b0 <MLX90640_CalculateTo+0x3a8>
  {
    irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 800182a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	ed93 6a08 	vldr	s12, [r3, #32]
 8001846:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800184a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 800184e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001852:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001856:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800185a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800185e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	ed93 6a07 	vldr	s12, [r3, #28]
 8001868:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800186c:	eddf 5a0d 	vldr	s11, [pc, #52]	; 80018a4 <MLX90640_CalculateTo+0x39c>
 8001870:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001874:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001878:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800187c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001888:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800188c:	e048      	b.n	8001920 <MLX90640_CalculateTo+0x418>
 800188e:	bf00      	nop
 8001890:	00000000 	.word	0x00000000
 8001894:	40000000 	.word	0x40000000
 8001898:	42200000 	.word	0x42200000
 800189c:	46fffe00 	.word	0x46fffe00
 80018a0:	47800000 	.word	0x47800000
 80018a4:	40533333 	.word	0x40533333
 80018a8:	358637bd 	.word	0x358637bd
 80018ac:	43889333 	.word	0x43889333
  }
  else
  {
    irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80018b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018cc:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 80018d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	ed93 6a08 	vldr	s12, [r3, #32]
 80018da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018de:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80018e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80018e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80018ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80018f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	ed93 6a07 	vldr	s12, [r3, #28]
 80018fc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001900:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 80018a4 <MLX90640_CalculateTo+0x39c>
 8001904:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001908:	ee66 7a27 	vmul.f32	s15, s12, s15
 800190c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001910:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  for (int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001920:	2300      	movs	r3, #0
 8001922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001924:	e220      	b.n	8001d68 <MLX90640_CalculateTo+0x860>
  {
    ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <MLX90640_CalculateTo+0x426>
 800192c:	331f      	adds	r3, #31
 800192e:	115b      	asrs	r3, r3, #5
 8001930:	b2da      	uxtb	r2, r3
 8001932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001934:	2b00      	cmp	r3, #0
 8001936:	da00      	bge.n	800193a <MLX90640_CalculateTo+0x432>
 8001938:	333f      	adds	r3, #63	; 0x3f
 800193a:	119b      	asrs	r3, r3, #6
 800193c:	b2db      	uxtb	r3, r3
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    chessPattern = ilPattern ^ (pixelNumber - (pixelNumber / 2) * 2);
 800194a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194c:	2b00      	cmp	r3, #0
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	bfb8      	it	lt
 8001954:	425b      	neglt	r3, r3
 8001956:	b25a      	sxtb	r2, r3
 8001958:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800195c:	4053      	eors	r3, r2
 800195e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001964:	3302      	adds	r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <MLX90640_CalculateTo+0x464>
 800196a:	3303      	adds	r3, #3
 800196c:	109b      	asrs	r3, r3, #2
 800196e:	461a      	mov	r2, r3
 8001970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001972:	3303      	adds	r3, #3
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <MLX90640_CalculateTo+0x472>
 8001978:	3303      	adds	r3, #3
 800197a:	109b      	asrs	r3, r3, #2
 800197c:	425b      	negs	r3, r3
 800197e:	441a      	add	r2, r3
 8001980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001982:	3301      	adds	r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <MLX90640_CalculateTo+0x482>
 8001988:	3303      	adds	r3, #3
 800198a:	109b      	asrs	r3, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001990:	2b00      	cmp	r3, #0
 8001992:	da00      	bge.n	8001996 <MLX90640_CalculateTo+0x48e>
 8001994:	3303      	adds	r3, #3
 8001996:	109b      	asrs	r3, r3, #2
 8001998:	425b      	negs	r3, r3
 800199a:	4413      	add	r3, r2
 800199c:	b2da      	uxtb	r2, r3
 800199e:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	f1c3 0301 	rsb	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	fb12 f303 	smulbb	r3, r2, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

    if (mode == 0)
 80019b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <MLX90640_CalculateTo+0x4be>
    {
      pattern = ilPattern;
 80019bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80019c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80019c4:	e003      	b.n	80019ce <MLX90640_CalculateTo+0x4c6>
    }
    else
    {
      pattern = chessPattern;
 80019c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80019ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    }

    if (pattern == frameData[833])
 80019ce:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f202 6282 	addw	r2, r2, #1666	; 0x682
 80019d8:	8812      	ldrh	r2, [r2, #0]
 80019da:	4293      	cmp	r3, r2
 80019dc:	f040 81c1 	bne.w	8001d62 <MLX90640_CalculateTo+0x85a>
    {
      irData = frameData[pixelNumber];
 80019e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
      if (irData > 32767)
 80019f6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80019fa:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 800189c <MLX90640_CalculateTo+0x394>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd07      	ble.n	8001a18 <MLX90640_CalculateTo+0x510>
      {
        irData = irData - 65536;
 8001a08:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001a0c:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 80018a0 <MLX90640_CalculateTo+0x398>
 8001a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a14:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
      }
      irData = irData * gain;
 8001a18:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001a1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

      kta = params->kta[pixelNumber] / ktaScale;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      kv = params->kv[pixelNumber] / kvScale;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4e:	4413      	add	r3, r2
 8001a50:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001a54:	f993 3000 	ldrsb.w	r3, [r3]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      irData = irData - params->offset[pixelNumber] * (1 + kta * (ta - 25)) * (1 + kv * (vdd - 3.3f));
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a70:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a88:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001a8c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001a90:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001aa8:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 80018a4 <MLX90640_CalculateTo+0x39c>
 8001aac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001ab0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001acc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

      if (mode != params->calibrationModeEE)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d023      	beq.n	8001b26 <MLX90640_CalculateTo+0x61e>
      {
        irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8001ae8:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8001b0e:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
      }

      irData = irData - params->tgc * irDataCP[subPage];
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b2c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3380      	adds	r3, #128	; 0x80
 8001b34:	443b      	add	r3, r7
 8001b36:	3b58      	subs	r3, #88	; 0x58
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
      irData = irData / emissivity;
 8001b4c:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001b50:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b58:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

      alphaCompensated = (float)SCALEALPHA * alphaScale / params->alpha[pixelNumber];
 8001b5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b60:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 80018a8 <MLX90640_CalculateTo+0x3a0>
 8001b64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b6c:	3324      	adds	r3, #36	; 0x24
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	885b      	ldrh	r3, [r3, #2]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      alphaCompensated = alphaCompensated * (1 + params->KsTa * (ta - 25));
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001b8a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b8e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001b92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

      Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001bae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bb2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001bc2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      Sx = Q_rsqrt(Q_rsqrt(Sx)) * params->ksTo[1];
 8001bda:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001bde:	f7ff fc51 	bl	8001484 <Q_rsqrt>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	f7ff fc4b 	bl	8001484 <Q_rsqrt>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

      To = Q_rsqrt(Q_rsqrt(irData / (alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c06:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 80018ac <MLX90640_CalculateTo+0x3a4>
 8001c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c16:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	f7ff fc23 	bl	8001484 <Q_rsqrt>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	eeb0 0a67 	vmov.f32	s0, s15
 8001c46:	f7ff fc1d 	bl	8001484 <Q_rsqrt>
 8001c4a:	eef0 7a40 	vmov.f32	s15, s0
 8001c4e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001d7c <MLX90640_CalculateTo+0x874>
 8001c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

      if (To < params->ct[1])
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d503      	bpl.n	8001c7e <MLX90640_CalculateTo+0x776>
      {
        range = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001c7c:	e026      	b.n	8001ccc <MLX90640_CalculateTo+0x7c4>
      }
      else if (To < params->ct[2])
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	d503      	bpl.n	8001ca2 <MLX90640_CalculateTo+0x79a>
      {
        range = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001ca0:	e014      	b.n	8001ccc <MLX90640_CalculateTo+0x7c4>
      }
      else if (To < params->ct[3])
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	d503      	bpl.n	8001cc6 <MLX90640_CalculateTo+0x7be>
      {
        range = 2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001cc4:	e002      	b.n	8001ccc <MLX90640_CalculateTo+0x7c4>
      }
      else
      {
        range = 3;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
      }

      To = Q_rsqrt(Q_rsqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001ccc:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	3380      	adds	r3, #128	; 0x80
 8001cd4:	443b      	add	r3, r7
 8001cd6:	3b68      	subs	r3, #104	; 0x68
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	330a      	adds	r3, #10
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	edd3 6a00 	vldr	s13, [r3]
 8001cf6:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3220      	adds	r2, #32
 8001cfe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001d0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d2a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	eeb0 0a67 	vmov.f32	s0, s15
 8001d36:	f7ff fba5 	bl	8001484 <Q_rsqrt>
 8001d3a:	eef0 7a40 	vmov.f32	s15, s0
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	f7ff fb9f 	bl	8001484 <Q_rsqrt>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d7c <MLX90640_CalculateTo+0x874>
 8001d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

      result[pixelNumber] = To;
 8001d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d60:	601a      	str	r2, [r3, #0]
  for (int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d64:	3301      	adds	r3, #1
 8001d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d6e:	f6ff adda 	blt.w	8001926 <MLX90640_CalculateTo+0x41e>
    }
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3780      	adds	r7, #128	; 0x80
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	43889333 	.word	0x43889333

08001d80 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t* frameData, const paramsMLX90640* params)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  float vdd;
  float resolutionCorrection;

  int resolutionRAM;

  vdd = frameData[810];
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	edc7 7a05 	vstr	s15, [r7, #20]
  if (vdd > 32767)
 8001d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001e78 <MLX90640_GetVdd+0xf8>
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd07      	ble.n	8001dc0 <MLX90640_GetVdd+0x40>
  {
    vdd = vdd - 65536;
 8001db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001e7c <MLX90640_GetVdd+0xfc>
 8001db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dbc:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	129b      	asrs	r3, r3, #10
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	613b      	str	r3, [r7, #16]
  resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbb4 	bl	8000544 <__aeabi_ui2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b11 	vmov	d1, r2, r3
 8001de4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001e70 <MLX90640_GetVdd+0xf0>
 8001de8:	f00a feb4 	bl	800cb54 <pow>
 8001dec:	ec55 4b10 	vmov	r4, r5, d0
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f7fe fbb7 	bl	8000564 <__aeabi_i2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	ec43 2b11 	vmov	d1, r2, r3
 8001dfe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001e70 <MLX90640_GetVdd+0xf0>
 8001e02:	f00a fea7 	bl	800cb54 <pow>
 8001e06:	ec53 2b10 	vmov	r2, r3, d0
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fd3d 	bl	800088c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe ff05 	bl	8000c28 <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60fb      	str	r3, [r7, #12]
  vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 8001e22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e52:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e80 <MLX90640_GetVdd+0x100>
 8001e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e5a:	edc7 7a05 	vstr	s15, [r7, #20]

  return vdd;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	ee07 3a90 	vmov	s15, r3
}
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40000000 	.word	0x40000000
 8001e78:	46fffe00 	.word	0x46fffe00
 8001e7c:	47800000 	.word	0x47800000
 8001e80:	40533333 	.word	0x40533333

08001e84 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t* frameData, const paramsMLX90640* params)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  float ptat;
  float ptatArt;
  float vdd;
  float ta;

  vdd = MLX90640_GetVdd(frameData, params);
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff75 	bl	8001d80 <MLX90640_GetVdd>
 8001e96:	ed87 0a03 	vstr	s0, [r7, #12]

  ptat = frameData[800];
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	edc7 7a05 	vstr	s15, [r7, #20]
  if (ptat > 32767)
 8001eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001f94 <MLX90640_GetTa+0x110>
 8001eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	dd07      	ble.n	8001ed0 <MLX90640_GetTa+0x4c>
  {
    ptat = ptat - 65536;
 8001ec0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001f98 <MLX90640_GetTa+0x114>
 8001ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ecc:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  ptatArt = frameData[768];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee0:	edc7 7a04 	vstr	s15, [r7, #16]
  if (ptatArt > 32767)
 8001ee4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f94 <MLX90640_GetTa+0x110>
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd07      	ble.n	8001f06 <MLX90640_GetTa+0x82>
  {
    ptatArt = ptatArt - 65536;
 8001ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001efa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001f98 <MLX90640_GetTa+0x114>
 8001efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f02:	edc7 7a04 	vstr	s15, [r7, #16]
  }
  ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f24:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001f9c <MLX90640_GetTa+0x118>
 8001f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2c:	edc7 7a04 	vstr	s15, [r7, #16]

  ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f3a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001fa0 <MLX90640_GetTa+0x11c>
 8001f3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	899b      	ldrh	r3, [r3, #12]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	edc7 7a02 	vstr	s15, [r7, #8]
  ta = ta / params->KtPTAT + 25;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f70:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f80:	edc7 7a02 	vstr	s15, [r7, #8]

  return ta;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	ee07 3a90 	vmov	s15, r3
}
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	46fffe00 	.word	0x46fffe00
 8001f98:	47800000 	.word	0x47800000
 8001f9c:	48800000 	.word	0x48800000
 8001fa0:	40533333 	.word	0x40533333

08001fa4 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  int16_t kVdd;
  int16_t vdd25;

  kVdd = eeData[51];
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3366      	adds	r3, #102	; 0x66
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	81fb      	strh	r3, [r7, #14]

  kVdd = (eeData[51] & 0xFF00) >> 8;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3366      	adds	r3, #102	; 0x66
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	81fb      	strh	r3, [r7, #14]
  if (kVdd > 127)
 8001fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc8:	dd04      	ble.n	8001fd4 <ExtractVDDParameters+0x30>
  {
    kVdd = kVdd - 256;
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	81fb      	strh	r3, [r7, #14]
  }
  kVdd = 32 * kVdd;
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
 8001fd6:	015b      	lsls	r3, r3, #5
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	81fb      	strh	r3, [r7, #14]
  vdd25 = eeData[51] & 0x00FF;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3366      	adds	r3, #102	; 0x66
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	81bb      	strh	r3, [r7, #12]
  vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	81bb      	strh	r3, [r7, #12]

  mlx90640->kVdd = kVdd;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	89fa      	ldrh	r2, [r7, #14]
 8002000:	801a      	strh	r2, [r3, #0]
  mlx90640->vdd25 = vdd25;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	89ba      	ldrh	r2, [r7, #12]
 8002006:	805a      	strh	r2, [r3, #2]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  float KvPTAT;
  float KtPTAT;
  int16_t vPTAT25;
  float alphaPTAT;

  KvPTAT = (eeData[50] & 0xFC00) >> 10;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3364      	adds	r3, #100	; 0x64
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	0a9b      	lsrs	r3, r3, #10
 8002026:	b29b      	uxth	r3, r3
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002030:	edc7 7a05 	vstr	s15, [r7, #20]
  if (KvPTAT > 31)
 8002034:	edd7 7a05 	vldr	s15, [r7, #20]
 8002038:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800203c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	dd07      	ble.n	8002056 <ExtractPTATParameters+0x42>
  {
    KvPTAT = KvPTAT - 64;
 8002046:	edd7 7a05 	vldr	s15, [r7, #20]
 800204a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002114 <ExtractPTATParameters+0x100>
 800204e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002052:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  KvPTAT = KvPTAT / 4096;
 8002056:	ed97 7a05 	vldr	s14, [r7, #20]
 800205a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002118 <ExtractPTATParameters+0x104>
 800205e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002062:	edc7 7a05 	vstr	s15, [r7, #20]

  KtPTAT = eeData[50] & 0x03FF;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3364      	adds	r3, #100	; 0x64
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002078:	edc7 7a04 	vstr	s15, [r7, #16]
  if (KtPTAT > 511)
 800207c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002080:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800211c <ExtractPTATParameters+0x108>
 8002084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd07      	ble.n	800209e <ExtractPTATParameters+0x8a>
  {
    KtPTAT = KtPTAT - 1024;
 800208e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002092:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002120 <ExtractPTATParameters+0x10c>
 8002096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800209a:	edc7 7a04 	vstr	s15, [r7, #16]
  }
  KtPTAT = KtPTAT / 8;
 800209e:	ed97 7a04 	vldr	s14, [r7, #16]
 80020a2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80020a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020aa:	edc7 7a04 	vstr	s15, [r7, #16]

  vPTAT25 = eeData[49];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3362      	adds	r3, #98	; 0x62
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	81fb      	strh	r3, [r7, #14]

  alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3320      	adds	r3, #32
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa4f 	bl	8000564 <__aeabi_i2d>
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <ExtractPTATParameters+0x110>)
 80020cc:	f7fe fbde 	bl	800088c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <ExtractPTATParameters+0x114>)
 80020de:	f7fe f8f5 	bl	80002cc <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd9d 	bl	8000c28 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	60bb      	str	r3, [r7, #8]

  mlx90640->KvPTAT = KvPTAT;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	605a      	str	r2, [r3, #4]
  mlx90640->KtPTAT = KtPTAT;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]
  mlx90640->vPTAT25 = vPTAT25;
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	819a      	strh	r2, [r3, #12]
  mlx90640->alphaPTAT = alphaPTAT;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	42800000 	.word	0x42800000
 8002118:	45800000 	.word	0x45800000
 800211c:	43ff8000 	.word	0x43ff8000
 8002120:	44800000 	.word	0x44800000
 8002124:	40d00000 	.word	0x40d00000
 8002128:	40200000 	.word	0x40200000

0800212c <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  int16_t gainEE;

  gainEE = eeData[48];
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3360      	adds	r3, #96	; 0x60
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	81fb      	strh	r3, [r7, #14]
  if (gainEE > 32767)
  {
    gainEE = gainEE - 65536;
  }

  mlx90640->gainEE = gainEE;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	89fa      	ldrh	r2, [r7, #14]
 8002142:	829a      	strh	r2, [r3, #20]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  float tgc;
  tgc = eeData[60] & 0x00FF;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3378      	adds	r3, #120	; 0x78
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (tgc > 127)
 800216e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002172:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021b4 <ExtractTgcParameters+0x64>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd07      	ble.n	8002190 <ExtractTgcParameters+0x40>
  {
    tgc = tgc - 256;
 8002180:	edd7 7a03 	vldr	s15, [r7, #12]
 8002184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80021b8 <ExtractTgcParameters+0x68>
 8002188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800218c:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  tgc = tgc / 32.0f;
 8002190:	ed97 7a03 	vldr	s14, [r7, #12]
 8002194:	eddf 6a09 	vldr	s13, [pc, #36]	; 80021bc <ExtractTgcParameters+0x6c>
 8002198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219c:	edc7 7a03 	vstr	s15, [r7, #12]

  mlx90640->tgc = tgc;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	42fe0000 	.word	0x42fe0000
 80021b8:	43800000 	.word	0x43800000
 80021bc:	42000000 	.word	0x42000000

080021c0 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint8_t resolutionEE;
  resolutionEE = (eeData[56] & 0x3000) >> 12;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3370      	adds	r3, #112	; 0x70
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	131b      	asrs	r3, r3, #12
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	73fb      	strb	r3, [r7, #15]

  mlx90640->resolutionEE = resolutionEE;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  float KsTa;
  KsTa = (eeData[60] & 0xFF00) >> 8;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3378      	adds	r3, #120	; 0x78
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29b      	uxth	r3, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	edc7 7a03 	vstr	s15, [r7, #12]
  if (KsTa > 127)
 8002210:	edd7 7a03 	vldr	s15, [r7, #12]
 8002214:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002254 <ExtractKsTaParameters+0x64>
 8002218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	dd07      	ble.n	8002232 <ExtractKsTaParameters+0x42>
  {
    KsTa = KsTa - 256;
 8002222:	edd7 7a03 	vldr	s15, [r7, #12]
 8002226:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002258 <ExtractKsTaParameters+0x68>
 800222a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800222e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  KsTa = KsTa / 8192.0f;
 8002232:	ed97 7a03 	vldr	s14, [r7, #12]
 8002236:	eddf 6a09 	vldr	s13, [pc, #36]	; 800225c <ExtractKsTaParameters+0x6c>
 800223a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800223e:	edc7 7a03 	vstr	s15, [r7, #12]

  mlx90640->KsTa = KsTa;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	42fe0000 	.word	0x42fe0000
 8002258:	43800000 	.word	0x43800000
 800225c:	46000000 	.word	0x46000000

08002260 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  int KsToScale;
  int8_t step;

  step = ((eeData[63] & 0x3000) >> 12) * 10;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	337e      	adds	r3, #126	; 0x7e
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	131b      	asrs	r3, r3, #12
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	74fb      	strb	r3, [r7, #19]

  mlx90640->ct[0] = -40;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 800228c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  mlx90640->ct[1] = 0;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	337e      	adds	r3, #126	; 0x7e
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	111b      	asrs	r3, r3, #4
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	337e      	adds	r3, #126	; 0x7e
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	121b      	asrs	r3, r3, #8
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	b21a      	sxth	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  mlx90640->ct[2] = mlx90640->ct[2] * step;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	fb12 f303 	smulbb	r3, r2, r3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21a      	sxth	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3] * step;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80022ee:	b299      	uxth	r1, r3
 80022f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	fb11 f303 	smulbb	r3, r1, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	b21a      	sxth	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  mlx90640->ct[4] = 400;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800230e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  KsToScale = (eeData[63] & 0x000F) + 8;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	337e      	adds	r3, #126	; 0x7e
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	3308      	adds	r3, #8
 800231e:	60fb      	str	r3, [r7, #12]
  KsToScale = 1 << KsToScale;
 8002320:	2201      	movs	r2, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	60fb      	str	r3, [r7, #12]

  mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	337a      	adds	r3, #122	; 0x7a
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	337a      	adds	r3, #122	; 0x7a
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	337c      	adds	r3, #124	; 0x7c
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	337c      	adds	r3, #124	; 0x7c
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  for (int i = 0; i < 4; i++)
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e03c      	b.n	8002406 <ExtractKsToParameters+0x1a6>
  {
    if (mlx90640->ksTo[i] > 127)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	330a      	adds	r3, #10
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002420 <ExtractKsToParameters+0x1c0>
 80023a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	dd13      	ble.n	80023d2 <ExtractKsToParameters+0x172>
    {
      mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	330a      	adds	r3, #10
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002424 <ExtractKsToParameters+0x1c4>
 80023be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	330a      	adds	r3, #10
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	edc3 7a00 	vstr	s15, [r3]
    }
    mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	330a      	adds	r3, #10
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	edd3 6a00 	vldr	s13, [r3]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	330a      	adds	r3, #10
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b03      	cmp	r3, #3
 800240a:	ddbf      	ble.n	800238c <ExtractKsToParameters+0x12c>
  }

  mlx90640->ksTo[4] = -0.0002;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4a06      	ldr	r2, [pc, #24]	; (8002428 <ExtractKsToParameters+0x1c8>)
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	42fe0000 	.word	0x42fe0000
 8002424:	43800000 	.word	0x43800000
 8002428:	b951b717 	.word	0xb951b717
 800242c:	00000000 	.word	0x00000000

08002430 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8002436:	af00      	add	r7, sp, #0
 8002438:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800243c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002440:	6018      	str	r0, [r3, #0]
 8002442:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002446:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800244a:	6019      	str	r1, [r3, #0]
  int accRow[24];
  int accColumn[32];
  int p = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
  uint8_t accRemScale;
  float alphaTemp[768];
  float temp;


  accRemScale = eeData[32] & 0x000F;
 8002452:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002456:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3340      	adds	r3, #64	; 0x40
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
  accColumnScale = (eeData[32] & 0x00F0) >> 4;
 800246a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800246e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3340      	adds	r3, #64	; 0x40
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	111b      	asrs	r3, r3, #4
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
  accRowScale = (eeData[32] & 0x0F00) >> 8;
 8002484:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002488:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3340      	adds	r3, #64	; 0x40
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	121b      	asrs	r3, r3, #8
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
  alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 800249e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80024a2:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3340      	adds	r3, #64	; 0x40
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	0b1b      	lsrs	r3, r3, #12
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	331e      	adds	r3, #30
 80024b4:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
  alphaRef = eeData[33];
 80024b8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80024bc:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3342      	adds	r3, #66	; 0x42
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec

  for (int i = 0; i < 6; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 80024d0:	e062      	b.n	8002598 <ExtractAlphaParameters+0x168>
  {
    p = i * 4;
 80024d2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    accRow[p + 0] = (eeData[34 + i] & 0x000F);
 80024dc:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80024e0:	3322      	adds	r3, #34	; 0x22
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80024e8:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f003 020f 	and.w	r2, r3, #15
 80024f6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002500:	443b      	add	r3, r7
 8002502:	f843 2c94 	str.w	r2, [r3, #-148]
    accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8002506:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800250a:	3322      	adds	r3, #34	; 0x22
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002512:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	111a      	asrs	r2, r3, #4
 800251e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002522:	3301      	adds	r3, #1
 8002524:	f002 020f 	and.w	r2, r2, #15
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800252e:	443b      	add	r3, r7
 8002530:	f843 2c94 	str.w	r2, [r3, #-148]
    accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8002534:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002538:	3322      	adds	r3, #34	; 0x22
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002540:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	121a      	asrs	r2, r3, #8
 800254c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002550:	3302      	adds	r3, #2
 8002552:	f002 020f 	and.w	r2, r2, #15
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800255c:	443b      	add	r3, r7
 800255e:	f843 2c94 	str.w	r2, [r3, #-148]
    accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8002562:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002566:	3322      	adds	r3, #34	; 0x22
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800256e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	0b1b      	lsrs	r3, r3, #12
 800257a:	b29a      	uxth	r2, r3
 800257c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002580:	3303      	adds	r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002588:	443b      	add	r3, r7
 800258a:	f843 2c94 	str.w	r2, [r3, #-148]
  for (int i = 0; i < 6; i++)
 800258e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002592:	3301      	adds	r3, #1
 8002594:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002598:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800259c:	2b05      	cmp	r3, #5
 800259e:	dd98      	ble.n	80024d2 <ExtractAlphaParameters+0xa2>
  }

  for (int i = 0; i < 24; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 80025a6:	e020      	b.n	80025ea <ExtractAlphaParameters+0x1ba>
  {
    if (accRow[i] > 7)
 80025a8:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80025b2:	443b      	add	r3, r7
 80025b4:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	dd11      	ble.n	80025e0 <ExtractAlphaParameters+0x1b0>
    {
      accRow[i] = accRow[i] - 16;
 80025bc:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80025c6:	443b      	add	r3, r7
 80025c8:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80025cc:	f1a3 0210 	sub.w	r2, r3, #16
 80025d0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80025da:	443b      	add	r3, r7
 80025dc:	f843 2c94 	str.w	r2, [r3, #-148]
  for (int i = 0; i < 24; i++)
 80025e0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 80025ea:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80025ee:	2b17      	cmp	r3, #23
 80025f0:	ddda      	ble.n	80025a8 <ExtractAlphaParameters+0x178>
    }
  }

  for (int i = 0; i < 8; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80025f8:	e062      	b.n	80026c0 <ExtractAlphaParameters+0x290>
  {
    p = i * 4;
 80025fa:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8002604:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002608:	3328      	adds	r3, #40	; 0x28
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002610:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f003 010f 	and.w	r1, r3, #15
 800261e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002622:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002626:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 800262e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002632:	3328      	adds	r3, #40	; 0x28
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800263a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	4413      	add	r3, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	111b      	asrs	r3, r3, #4
 8002646:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800264a:	3201      	adds	r2, #1
 800264c:	f003 010f 	and.w	r1, r3, #15
 8002650:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002654:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 800265c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002660:	3328      	adds	r3, #40	; 0x28
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002668:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	121b      	asrs	r3, r3, #8
 8002674:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8002678:	3202      	adds	r2, #2
 800267a:	f003 010f 	and.w	r1, r3, #15
 800267e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002682:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 800268a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800268e:	3328      	adds	r3, #40	; 0x28
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002696:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	0b1b      	lsrs	r3, r3, #12
 80026a2:	b299      	uxth	r1, r3
 80026a4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80026a8:	1cda      	adds	r2, r3, #3
 80026aa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80026ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 8; i++)
 80026b6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80026ba:	3301      	adds	r3, #1
 80026bc:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80026c0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	dd98      	ble.n	80025fa <ExtractAlphaParameters+0x1ca>
  }

  for (int i = 0; i < 32; i++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 80026ce:	e020      	b.n	8002712 <ExtractAlphaParameters+0x2e2>
  {
    if (accColumn[i] > 7)
 80026d0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80026d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026d8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	dd11      	ble.n	8002708 <ExtractAlphaParameters+0x2d8>
    {
      accColumn[i] = accColumn[i] - 16;
 80026e4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80026e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026ec:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	f1a3 0110 	sub.w	r1, r3, #16
 80026f8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80026fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002700:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 32; i++)
 8002708:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 800270c:	3301      	adds	r3, #1
 800270e:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8002712:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8002716:	2b1f      	cmp	r3, #31
 8002718:	ddda      	ble.n	80026d0 <ExtractAlphaParameters+0x2a0>
    }
  }

  for (int i = 0; i < 24; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8002720:	e133      	b.n	800298a <ExtractAlphaParameters+0x55a>
  {
    for (int j = 0; j < 32; j++)
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8002728:	e125      	b.n	8002976 <ExtractAlphaParameters+0x546>
    {
      p = 32 * i + j;
 800272a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8002734:	4413      	add	r3, r2
 8002736:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
      alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 800273a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800273e:	3340      	adds	r3, #64	; 0x40
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002746:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	111b      	asrs	r3, r3, #4
 8002752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002762:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002766:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	edc3 7a00 	vstr	s15, [r3]
      if (alphaTemp[p] > 31)
 8002772:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002776:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800277a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	dd17      	ble.n	80027c4 <ExtractAlphaParameters+0x394>
      {
        alphaTemp[p] = alphaTemp[p] - 64;
 8002794:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002798:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800279c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8002b08 <ExtractAlphaParameters+0x6d8>
 80027ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80027b4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80027b8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	edc3 7a00 	vstr	s15, [r3]
      }
      alphaTemp[p] = alphaTemp[p] * (1 << accRemScale);
 80027c4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80027c8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80027cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	ed93 7a00 	vldr	s14, [r3]
 80027d8:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 80027dc:	2201      	movs	r2, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80027f2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80027f6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	edc3 7a00 	vstr	s15, [r3]
      alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8002802:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800280c:	443b      	add	r3, r7
 800280e:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8002812:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8002816:	409a      	lsls	r2, r3
 8002818:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 800281c:	441a      	add	r2, r3
 800281e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002822:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002826:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 800282a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800282e:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002840:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002844:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002848:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800285c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002860:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	edc3 7a00 	vstr	s15, [r3]
      alphaTemp[p] = alphaTemp[p] / pow(2, (double)alphaScale);
 800286c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002870:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002874:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe82 	bl	8000588 <__aeabi_f2d>
 8002884:	4604      	mov	r4, r0
 8002886:	460d      	mov	r5, r1
 8002888:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe59 	bl	8000544 <__aeabi_ui2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	ec43 2b11 	vmov	d1, r2, r3
 800289a:	ed9f 0b99 	vldr	d0, [pc, #612]	; 8002b00 <ExtractAlphaParameters+0x6d0>
 800289e:	f00a f959 	bl	800cb54 <pow>
 80028a2:	ec53 2b10 	vmov	r2, r3, d0
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd ffef 	bl	800088c <__aeabi_ddiv>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fe f9b7 	bl	8000c28 <__aeabi_d2f>
 80028ba:	4601      	mov	r1, r0
 80028bc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80028c0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80028c4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	6019      	str	r1, [r3, #0]
      alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1]) / 2;
 80028ce:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80028d2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80028d6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	ed93 7a00 	vldr	s14, [r3]
 80028e2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80028e6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80028f0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80028f4:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fe:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8002902:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002906:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8002914:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002918:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800291c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002928:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800292c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002930:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	edc3 7a00 	vstr	s15, [r3]
      alphaTemp[p] = (float)SCALEALPHA / alphaTemp[p];
 800293c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002940:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002944:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	ed93 7a00 	vldr	s14, [r3]
 8002950:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002b0c <ExtractAlphaParameters+0x6dc>
 8002954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002958:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800295c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002960:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 32; j++)
 800296c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8002976:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800297a:	2b1f      	cmp	r3, #31
 800297c:	f77f aed5 	ble.w	800272a <ExtractAlphaParameters+0x2fa>
  for (int i = 0; i < 24; i++)
 8002980:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002984:	3301      	adds	r3, #1
 8002986:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 800298a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800298e:	2b17      	cmp	r3, #23
 8002990:	f77f aec7 	ble.w	8002722 <ExtractAlphaParameters+0x2f2>
    }
  }

  temp = alphaTemp[0];
 8002994:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002998:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80029a2:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < 768; i++)
 80029a4:	2301      	movs	r3, #1
 80029a6:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80029aa:	e023      	b.n	80029f4 <ExtractAlphaParameters+0x5c4>
  {
    if (alphaTemp[i] > temp)
 80029ac:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80029b0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80029b4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d50b      	bpl.n	80029ea <ExtractAlphaParameters+0x5ba>
    {
      temp = alphaTemp[i];
 80029d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80029d6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80029da:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80029e8:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < 768; i++)
 80029ea:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80029f4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80029f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fc:	dbd6      	blt.n	80029ac <ExtractAlphaParameters+0x57c>
    }
  }

  alphaScale = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
  while (temp < 32767.4f)
 8002a04:	e00e      	b.n	8002a24 <ExtractAlphaParameters+0x5f4>
  {
    temp = temp * 2;
 8002a06:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a12:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002a16:	edc3 7a00 	vstr	s15, [r3]
    alphaScale = alphaScale + 1;
 8002a1a:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
  while (temp < 32767.4f)
 8002a24:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002b10 <ExtractAlphaParameters+0x6e0>
 8002a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d4e5      	bmi.n	8002a06 <ExtractAlphaParameters+0x5d6>
  }

  for (int i = 0; i < 768; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8002a40:	e048      	b.n	8002ad4 <ExtractAlphaParameters+0x6a4>
  {
    temp = alphaTemp[i] * pow(2, (double)alphaScale);
 8002a42:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002a46:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002a4a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd97 	bl	8000588 <__aeabi_f2d>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd6e 	bl	8000544 <__aeabi_ui2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ec43 2b11 	vmov	d1, r2, r3
 8002a70:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002b00 <ExtractAlphaParameters+0x6d0>
 8002a74:	f00a f86e 	bl	800cb54 <pow>
 8002a78:	ec53 2b10 	vmov	r2, r3, d0
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fdda 	bl	8000638 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8cc 	bl	8000c28 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002a96:	6013      	str	r3, [r2, #0]
    mlx90640->alpha[i] = (temp + 0.5f);
 8002a98:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aac:	ee17 3a90 	vmov	r3, s15
 8002ab0:	b299      	uxth	r1, r3
 8002ab2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002ab6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002ac0:	3324      	adds	r3, #36	; 0x24
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	805a      	strh	r2, [r3, #2]
  for (int i = 0; i < 768; i++)
 8002aca:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8002ad4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002adc:	dbb1      	blt.n	8002a42 <ExtractAlphaParameters+0x612>

  }

  mlx90640->alphaScale = alphaScale;
 8002ade:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002ae2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8002aec:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a

}
 8002af0:	bf00      	nop
 8002af2:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40000000 	.word	0x40000000
 8002b08:	42800000 	.word	0x42800000
 8002b0c:	358637bd 	.word	0x358637bd
 8002b10:	46fffecd 	.word	0x46fffecd

08002b14 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b0c5      	sub	sp, #276	; 0x114
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b22:	6018      	str	r0, [r3, #0]
 8002b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b2c:	6019      	str	r1, [r3, #0]
  int occRow[24];
  int occColumn[32];
  int p = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t occRowScale;
  uint8_t occColumnScale;
  uint8_t occRemScale;


  occRemScale = (eeData[16] & 0x000F);
 8002b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3320      	adds	r3, #32
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8002b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3320      	adds	r3, #32
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	111b      	asrs	r3, r3, #4
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
  occRowScale = (eeData[16] & 0x0F00) >> 8;
 8002b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3320      	adds	r3, #32
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	121b      	asrs	r3, r3, #8
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
  offsetRef = eeData[17];
 8002b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3322      	adds	r3, #34	; 0x22
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
  if (offsetRef > 32767)
  {
    offsetRef = offsetRef - 65536;
  }

  for (int i = 0; i < 6; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b98:	e062      	b.n	8002c60 <ExtractOffsetParameters+0x14c>
  {
    p = i * 4;
 8002b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8002ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba8:	3312      	adds	r3, #18
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bb0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002bc8:	443b      	add	r3, r7
 8002bca:	f843 2c84 	str.w	r2, [r3, #-132]
    occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8002bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd2:	3312      	adds	r3, #18
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bda:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	111a      	asrs	r2, r3, #4
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	3301      	adds	r3, #1
 8002bec:	f002 020f 	and.w	r2, r2, #15
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002bf6:	443b      	add	r3, r7
 8002bf8:	f843 2c84 	str.w	r2, [r3, #-132]
    occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c00:	3312      	adds	r3, #18
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002c08:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	121a      	asrs	r2, r3, #8
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f002 020f 	and.w	r2, r2, #15
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002c24:	443b      	add	r3, r7
 8002c26:	f843 2c84 	str.w	r2, [r3, #-132]
    occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2e:	3312      	adds	r3, #18
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002c36:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	0b1b      	lsrs	r3, r3, #12
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	3303      	adds	r3, #3
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002c50:	443b      	add	r3, r7
 8002c52:	f843 2c84 	str.w	r2, [r3, #-132]
  for (int i = 0; i < 6; i++)
 8002c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	dd98      	ble.n	8002b9a <ExtractOffsetParameters+0x86>
  }

  for (int i = 0; i < 24; i++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c6e:	e020      	b.n	8002cb2 <ExtractOffsetParameters+0x19e>
  {
    if (occRow[i] > 7)
 8002c70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002c7a:	443b      	add	r3, r7
 8002c7c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	dd11      	ble.n	8002ca8 <ExtractOffsetParameters+0x194>
    {
      occRow[i] = occRow[i] - 16;
 8002c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002c8e:	443b      	add	r3, r7
 8002c90:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002c94:	f1a3 0210 	sub.w	r2, r3, #16
 8002c98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f843 2c84 	str.w	r2, [r3, #-132]
  for (int i = 0; i < 24; i++)
 8002ca8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cac:	3301      	adds	r3, #1
 8002cae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002cb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cb6:	2b17      	cmp	r3, #23
 8002cb8:	ddda      	ble.n	8002c70 <ExtractOffsetParameters+0x15c>
    }
  }

  for (int i = 0; i < 8; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cc0:	e062      	b.n	8002d88 <ExtractOffsetParameters+0x274>
  {
    p = i * 4;
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8002ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002cd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f003 010f 	and.w	r1, r3, #15
 8002ce6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8002cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d02:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	111b      	asrs	r3, r3, #4
 8002d0e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002d12:	3201      	adds	r2, #1
 8002d14:	f003 010f 	and.w	r1, r3, #15
 8002d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 8002d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d28:	3318      	adds	r3, #24
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	121b      	asrs	r3, r3, #8
 8002d3c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002d40:	3202      	adds	r2, #2
 8002d42:	f003 010f 	and.w	r1, r3, #15
 8002d46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 8002d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d56:	3318      	adds	r3, #24
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d5e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	0b1b      	lsrs	r3, r3, #12
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	1cda      	adds	r2, r3, #3
 8002d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 8; i++)
 8002d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d82:	3301      	adds	r3, #1
 8002d84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d8c:	2b07      	cmp	r3, #7
 8002d8e:	dd98      	ble.n	8002cc2 <ExtractOffsetParameters+0x1ae>
  }

  for (int i = 0; i < 32; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d96:	e020      	b.n	8002dda <ExtractOffsetParameters+0x2c6>
  {
    if (occColumn[i] > 7)
 8002d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002da0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	dd11      	ble.n	8002dd0 <ExtractOffsetParameters+0x2bc>
    {
      occColumn[i] = occColumn[i] - 16;
 8002dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002db4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	f1a3 0110 	sub.w	r1, r3, #16
 8002dc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dc8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 32; i++)
 8002dd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dde:	2b1f      	cmp	r3, #31
 8002de0:	ddda      	ble.n	8002d98 <ExtractOffsetParameters+0x284>
    }
  }

  for (int i = 0; i < 24; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002de8:	e0c0      	b.n	8002f6c <ExtractOffsetParameters+0x458>
  {
    for (int j = 0; j < 32; j++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002df0:	e0b2      	b.n	8002f58 <ExtractOffsetParameters+0x444>
    {
      p = 32 * i + j;
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	3340      	adds	r3, #64	; 0x40
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e0e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	0a9b      	lsrs	r3, r3, #10
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	b219      	sxth	r1, r3
 8002e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	460a      	mov	r2, r1
 8002e36:	809a      	strh	r2, [r3, #4]
      if (mlx90640->offset[p] > 31)
 8002e38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e52:	2b1f      	cmp	r3, #31
 8002e54:	dd1d      	ble.n	8002e92 <ExtractOffsetParameters+0x37e>
      {
        mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8002e56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b40      	subs	r3, #64	; 0x40
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	b219      	sxth	r1, r3
 8002e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e86:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	460a      	mov	r2, r1
 8002e90:	809a      	strh	r2, [r3, #4]
      }
      mlx90640->offset[p] = mlx90640->offset[p] * (1 << occRemScale);
 8002e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	b219      	sxth	r1, r3
 8002eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ebc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	460a      	mov	r2, r1
 8002ed0:	809a      	strh	r2, [r3, #4]
      mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002edc:	443b      	add	r3, r7
 8002ede:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002ee2:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002efc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002f00:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002f04:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b219      	sxth	r1, r3
 8002f34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	809a      	strh	r2, [r3, #4]
    for (int j = 0; j < 32; j++)
 8002f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f52:	3301      	adds	r3, #1
 8002f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f5c:	2b1f      	cmp	r3, #31
 8002f5e:	f77f af48 	ble.w	8002df2 <ExtractOffsetParameters+0x2de>
  for (int i = 0; i < 24; i++)
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f66:	3301      	adds	r3, #1
 8002f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f70:	2b17      	cmp	r3, #23
 8002f72:	f77f af3a 	ble.w	8002dea <ExtractOffsetParameters+0x2d6>
    }
  }
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002f94:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002f98:	6018      	str	r0, [r3, #0]
 8002f9a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002f9e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002fa2:	6019      	str	r1, [r3, #0]
  int p = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
  uint8_t ktaScale2;
  uint8_t split;
  float ktaTemp[768];
  float temp;

  KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8002faa:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002fae:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	336c      	adds	r3, #108	; 0x6c
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
  if (KtaRoCo > 127)
  {
    KtaRoCo = KtaRoCo - 256;
  }
  KtaRC[0] = KtaRoCo;
 8002fc0:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8002fc4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10

  KtaReCo = (eeData[54] & 0x00FF);
 8002fc8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002fcc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	336c      	adds	r3, #108	; 0x6c
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
  if (KtaReCo > 127)
  {
    KtaReCo = KtaReCo - 256;
  }
  KtaRC[2] = KtaReCo;
 8002fda:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8002fde:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12

  KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8002fe2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002fe6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	336e      	adds	r3, #110	; 0x6e
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
  if (KtaRoCe > 127)
  {
    KtaRoCe = KtaRoCe - 256;
  }
  KtaRC[1] = KtaRoCe;
 8002ff8:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8002ffc:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11

  KtaReCe = (eeData[55] & 0x00FF);
 8003000:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003004:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	336e      	adds	r3, #110	; 0x6e
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
  if (KtaReCe > 127)
  {
    KtaReCe = KtaReCe - 256;
  }
  KtaRC[3] = KtaReCe;
 8003012:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 8003016:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

  ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 800301a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800301e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3370      	adds	r3, #112	; 0x70
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	111b      	asrs	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3308      	adds	r3, #8
 8003034:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
  ktaScale2 = (eeData[56] & 0x000F);
 8003038:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800303c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3370      	adds	r3, #112	; 0x70
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

  for (int i = 0; i < 24; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8003056:	e0ef      	b.n	8003238 <ExtractKtaPixelParameters+0x2b0>
  {
    for (int j = 0; j < 32; j++)
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800305e:	e0e1      	b.n	8003224 <ExtractKtaPixelParameters+0x29c>
    {
      p = 32 * i + j;
 8003060:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 800306a:	4413      	add	r3, r2
 800306c:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
      split = 2 * (p / 32 - (p / 64) * 2) + p % 2;
 8003070:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003074:	2b00      	cmp	r3, #0
 8003076:	da00      	bge.n	800307a <ExtractKtaPixelParameters+0xf2>
 8003078:	331f      	adds	r3, #31
 800307a:	115b      	asrs	r3, r3, #5
 800307c:	461a      	mov	r2, r3
 800307e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003082:	2b00      	cmp	r3, #0
 8003084:	da00      	bge.n	8003088 <ExtractKtaPixelParameters+0x100>
 8003086:	333f      	adds	r3, #63	; 0x3f
 8003088:	119b      	asrs	r3, r3, #6
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003098:	2b00      	cmp	r3, #0
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	bfb8      	it	lt
 80030a0:	425b      	neglt	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
      ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 80030aa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80030ae:	3340      	adds	r3, #64	; 0x40
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 80030b6:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	105b      	asrs	r3, r3, #1
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ce:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80030d2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80030d6:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	edc3 7a00 	vstr	s15, [r3]
      if (ktaTemp[p] > 3)
 80030e2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80030e6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80030ea:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80030fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dd17      	ble.n	8003134 <ExtractKtaPixelParameters+0x1ac>
      {
        ktaTemp[p] = ktaTemp[p] - 8;
 8003104:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003108:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800310c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800311c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003120:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003124:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003128:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	edc3 7a00 	vstr	s15, [r3]
      }
      ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003134:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003138:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800313c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003162:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003166:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	edc3 7a00 	vstr	s15, [r3]
      ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003172:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 8003176:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800317a:	f107 0208 	add.w	r2, r7, #8
 800317e:	4413      	add	r3, r2
 8003180:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800318c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003190:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003194:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80031a8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80031ac:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	edc3 7a00 	vstr	s15, [r3]
      ktaTemp[p] = ktaTemp[p] / pow(2, (double)ktaScale1);
 80031b8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80031bc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80031c0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9dc 	bl	8000588 <__aeabi_f2d>
 80031d0:	4604      	mov	r4, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9b3 	bl	8000544 <__aeabi_ui2d>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ec43 2b11 	vmov	d1, r2, r3
 80031e6:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8003408 <ExtractKtaPixelParameters+0x480>
 80031ea:	f009 fcb3 	bl	800cb54 <pow>
 80031ee:	ec53 2b10 	vmov	r2, r3, d0
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fd fb49 	bl	800088c <__aeabi_ddiv>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f7fd fd11 	bl	8000c28 <__aeabi_d2f>
 8003206:	4601      	mov	r1, r0
 8003208:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800320c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003210:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	6019      	str	r1, [r3, #0]
    for (int j = 0; j < 32; j++)
 800321a:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800321e:	3301      	adds	r3, #1
 8003220:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8003224:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8003228:	2b1f      	cmp	r3, #31
 800322a:	f77f af19 	ble.w	8003060 <ExtractKtaPixelParameters+0xd8>
  for (int i = 0; i < 24; i++)
 800322e:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8003238:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 800323c:	2b17      	cmp	r3, #23
 800323e:	f77f af0b 	ble.w	8003058 <ExtractKtaPixelParameters+0xd0>
      //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
    }
  }

  temp = fabs(ktaTemp[0]);
 8003242:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003246:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	eef0 7ae7 	vabs.f32	s15, s15
 8003252:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003256:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < 768; i++)
 800325a:	2301      	movs	r3, #1
 800325c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003260:	e029      	b.n	80032b6 <ExtractKtaPixelParameters+0x32e>
  {
    if (fabs(ktaTemp[i]) > temp)
 8003262:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003266:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800326a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	eef0 7ae7 	vabs.f32	s15, s15
 800327a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800327e:	ed93 7a00 	vldr	s14, [r3]
 8003282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	d50f      	bpl.n	80032ac <ExtractKtaPixelParameters+0x324>
    {
      temp = fabs(ktaTemp[i]);
 800328c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003290:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003294:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	eef0 7ae7 	vabs.f32	s15, s15
 80032a4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80032a8:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < 768; i++)
 80032ac:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80032b0:	3301      	adds	r3, #1
 80032b2:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80032b6:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032be:	dbd0      	blt.n	8003262 <ExtractKtaPixelParameters+0x2da>
    }
  }

  ktaScale1 = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
  while (temp < 63.4f)
 80032c6:	e00e      	b.n	80032e6 <ExtractKtaPixelParameters+0x35e>
  {
    temp = temp * 2;
 80032c8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032d4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80032d8:	edc3 7a00 	vstr	s15, [r3]
    ktaScale1 = ktaScale1 + 1;
 80032dc:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80032e0:	3301      	adds	r3, #1
 80032e2:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
  while (temp < 63.4f)
 80032e6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003410 <ExtractKtaPixelParameters+0x488>
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d4e5      	bmi.n	80032c8 <ExtractKtaPixelParameters+0x340>
  }

  for (int i = 0; i < 768; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003302:	e06d      	b.n	80033e0 <ExtractKtaPixelParameters+0x458>
  {
    temp = ktaTemp[i] * pow(2, (double)ktaScale1);
 8003304:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003308:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800330c:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f936 	bl	8000588 <__aeabi_f2d>
 800331c:	4604      	mov	r4, r0
 800331e:	460d      	mov	r5, r1
 8003320:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f90d 	bl	8000544 <__aeabi_ui2d>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	ec43 2b11 	vmov	d1, r2, r3
 8003332:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8003408 <ExtractKtaPixelParameters+0x480>
 8003336:	f009 fc0d 	bl	800cb54 <pow>
 800333a:	ec53 2b10 	vmov	r2, r3, d0
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd f979 	bl	8000638 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	f7fd fc6b 	bl	8000c28 <__aeabi_d2f>
 8003352:	4603      	mov	r3, r0
 8003354:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8003358:	6013      	str	r3, [r2, #0]
    if (temp < 0)
 800335a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d51a      	bpl.n	80033a2 <ExtractKtaPixelParameters+0x41a>
    {
      mlx90640->kta[i] = (temp - 0.5f);
 800336c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800337c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003380:	edc7 7a01 	vstr	s15, [r7, #4]
 8003384:	793b      	ldrb	r3, [r7, #4]
 8003386:	b259      	sxtb	r1, r3
 8003388:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800338c:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003396:	4413      	add	r3, r2
 8003398:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800339c:	460a      	mov	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e019      	b.n	80033d6 <ExtractKtaPixelParameters+0x44e>
    }
    else
    {
      mlx90640->kta[i] = (temp + 0.5f);
 80033a2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80033ba:	793b      	ldrb	r3, [r7, #4]
 80033bc:	b259      	sxtb	r1, r3
 80033be:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80033c2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80033cc:	4413      	add	r3, r2
 80033ce:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 80033d2:	460a      	mov	r2, r1
 80033d4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 768; i++)
 80033d6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80033da:	3301      	adds	r3, #1
 80033dc:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80033e0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e8:	db8c      	blt.n	8003304 <ExtractKtaPixelParameters+0x37c>
    }

  }

  mlx90640->ktaScale = ktaScale1;
 80033ea:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80033ee:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 80033f8:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 80033fc:	bf00      	nop
 80033fe:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8003402:	46bd      	mov	sp, r7
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	bf00      	nop
 8003408:	00000000 	.word	0x00000000
 800340c:	40000000 	.word	0x40000000
 8003410:	427d999a 	.word	0x427d999a
 8003414:	00000000 	.word	0x00000000

08003418 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800341e:	af00      	add	r7, sp, #0
 8003420:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003424:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003428:	6018      	str	r0, [r3, #0]
 800342a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800342e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003432:	6019      	str	r1, [r3, #0]
  int p = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
  uint8_t kvScale;
  uint8_t split;
  float kvTemp[768];
  float temp;

  KvRoCo = (eeData[52] & 0xF000) >> 12;
 800343a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800343e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3368      	adds	r3, #104	; 0x68
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	0b1b      	lsrs	r3, r3, #12
 800344a:	b29b      	uxth	r3, r3
 800344c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
  if (KvRoCo > 7)
 8003450:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8003454:	2b07      	cmp	r3, #7
 8003456:	dd05      	ble.n	8003464 <ExtractKvPixelParameters+0x4c>
  {
    KvRoCo = KvRoCo - 16;
 8003458:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 800345c:	3b10      	subs	r3, #16
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
  }
  KvT[0] = KvRoCo;
 8003464:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8003468:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10

  KvReCo = (eeData[52] & 0x0F00) >> 8;
 800346c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003470:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3368      	adds	r3, #104	; 0x68
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	121b      	asrs	r3, r3, #8
 800347c:	b25b      	sxtb	r3, r3
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
  if (KvReCo > 7)
 8003486:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 800348a:	2b07      	cmp	r3, #7
 800348c:	dd05      	ble.n	800349a <ExtractKvPixelParameters+0x82>
  {
    KvReCo = KvReCo - 16;
 800348e:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8003492:	3b10      	subs	r3, #16
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
  }
  KvT[2] = KvReCo;
 800349a:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 800349e:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12

  KvRoCe = (eeData[52] & 0x00F0) >> 4;
 80034a2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80034a6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3368      	adds	r3, #104	; 0x68
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	111b      	asrs	r3, r3, #4
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
  if (KvRoCe > 7)
 80034bc:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 80034c0:	2b07      	cmp	r3, #7
 80034c2:	dd05      	ble.n	80034d0 <ExtractKvPixelParameters+0xb8>
  {
    KvRoCe = KvRoCe - 16;
 80034c4:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 80034c8:	3b10      	subs	r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
  }
  KvT[1] = KvRoCe;
 80034d0:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 80034d4:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11

  KvReCe = (eeData[52] & 0x000F);
 80034d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80034dc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3368      	adds	r3, #104	; 0x68
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
  if (KvReCe > 7)
 80034f0:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 80034f4:	2b07      	cmp	r3, #7
 80034f6:	dd05      	ble.n	8003504 <ExtractKvPixelParameters+0xec>
  {
    KvReCe = KvReCe - 16;
 80034f8:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 80034fc:	3b10      	subs	r3, #16
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
  }
  KvT[3] = KvReCe;
 8003504:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8003508:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

  kvScale = (eeData[56] & 0x0F00) >> 8;
 800350c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003510:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3370      	adds	r3, #112	; 0x70
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	121b      	asrs	r3, r3, #8
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


  for (int i = 0; i < 24; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800352c:	e07e      	b.n	800362c <ExtractKvPixelParameters+0x214>
  {
    for (int j = 0; j < 32; j++)
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003534:	e071      	b.n	800361a <ExtractKvPixelParameters+0x202>
    {
      p = 32 * i + j;
 8003536:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8003540:	4413      	add	r3, r2
 8003542:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
      split = 2 * (p / 32 - (p / 64) * 2) + p % 2;
 8003546:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800354a:	2b00      	cmp	r3, #0
 800354c:	da00      	bge.n	8003550 <ExtractKvPixelParameters+0x138>
 800354e:	331f      	adds	r3, #31
 8003550:	115b      	asrs	r3, r3, #5
 8003552:	461a      	mov	r2, r3
 8003554:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003558:	2b00      	cmp	r3, #0
 800355a:	da00      	bge.n	800355e <ExtractKvPixelParameters+0x146>
 800355c:	333f      	adds	r3, #63	; 0x3f
 800355e:	119b      	asrs	r3, r3, #6
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800356e:	2b00      	cmp	r3, #0
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	bfb8      	it	lt
 8003576:	425b      	neglt	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4413      	add	r3, r2
 800357c:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
      kvTemp[p] = KvT[split];
 8003580:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8003584:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003588:	f107 0208 	add.w	r2, r7, #8
 800358c:	4413      	add	r3, r2
 800358e:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800359e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80035a2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	edc3 7a00 	vstr	s15, [r3]
      kvTemp[p] = kvTemp[p] / pow(2, (double)kvScale);
 80035ae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80035b2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80035b6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ffe1 	bl	8000588 <__aeabi_f2d>
 80035c6:	4604      	mov	r4, r0
 80035c8:	460d      	mov	r5, r1
 80035ca:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffb8 	bl	8000544 <__aeabi_ui2d>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	ec43 2b11 	vmov	d1, r2, r3
 80035dc:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8003800 <ExtractKvPixelParameters+0x3e8>
 80035e0:	f009 fab8 	bl	800cb54 <pow>
 80035e4:	ec53 2b10 	vmov	r2, r3, d0
 80035e8:	4620      	mov	r0, r4
 80035ea:	4629      	mov	r1, r5
 80035ec:	f7fd f94e 	bl	800088c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fd fb16 	bl	8000c28 <__aeabi_d2f>
 80035fc:	4601      	mov	r1, r0
 80035fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003602:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003606:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	6019      	str	r1, [r3, #0]
    for (int j = 0; j < 32; j++)
 8003610:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003614:	3301      	adds	r3, #1
 8003616:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 800361a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800361e:	2b1f      	cmp	r3, #31
 8003620:	dd89      	ble.n	8003536 <ExtractKvPixelParameters+0x11e>
  for (int i = 0; i < 24; i++)
 8003622:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8003626:	3301      	adds	r3, #1
 8003628:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800362c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8003630:	2b17      	cmp	r3, #23
 8003632:	f77f af7c 	ble.w	800352e <ExtractKvPixelParameters+0x116>
      //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
    }
  }

  temp = fabs(kvTemp[0]);
 8003636:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800363a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	eef0 7ae7 	vabs.f32	s15, s15
 8003646:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800364a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < 768; i++)
 800364e:	2301      	movs	r3, #1
 8003650:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003654:	e029      	b.n	80036aa <ExtractKvPixelParameters+0x292>
  {
    if (fabs(kvTemp[i]) > temp)
 8003656:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800365a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800365e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	eef0 7ae7 	vabs.f32	s15, s15
 800366e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d50f      	bpl.n	80036a0 <ExtractKvPixelParameters+0x288>
    {
      temp = fabs(kvTemp[i]);
 8003680:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003684:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003688:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	eef0 7ae7 	vabs.f32	s15, s15
 8003698:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800369c:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < 768; i++)
 80036a0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80036aa:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80036ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b2:	dbd0      	blt.n	8003656 <ExtractKvPixelParameters+0x23e>
    }
  }

  kvScale = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
  while (temp < 63.4f)
 80036ba:	e00e      	b.n	80036da <ExtractKvPixelParameters+0x2c2>
  {
    temp = temp * 2;
 80036bc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036c8:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80036cc:	edc3 7a00 	vstr	s15, [r3]
    kvScale = kvScale + 1;
 80036d0:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80036d4:	3301      	adds	r3, #1
 80036d6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
  while (temp < 63.4f)
 80036da:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003808 <ExtractKvPixelParameters+0x3f0>
 80036e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ee:	d4e5      	bmi.n	80036bc <ExtractKvPixelParameters+0x2a4>
  }

  for (int i = 0; i < 768; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80036f6:	e06d      	b.n	80037d4 <ExtractKvPixelParameters+0x3bc>
  {
    temp = kvTemp[i] * pow(2, (double)kvScale);
 80036f8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80036fc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003700:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff3c 	bl	8000588 <__aeabi_f2d>
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc ff13 	bl	8000544 <__aeabi_ui2d>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	ec43 2b11 	vmov	d1, r2, r3
 8003726:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8003800 <ExtractKvPixelParameters+0x3e8>
 800372a:	f009 fa13 	bl	800cb54 <pow>
 800372e:	ec53 2b10 	vmov	r2, r3, d0
 8003732:	4620      	mov	r0, r4
 8003734:	4629      	mov	r1, r5
 8003736:	f7fc ff7f 	bl	8000638 <__aeabi_dmul>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f7fd fa71 	bl	8000c28 <__aeabi_d2f>
 8003746:	4603      	mov	r3, r0
 8003748:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800374c:	6013      	str	r3, [r2, #0]
    if (temp < 0)
 800374e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	d51a      	bpl.n	8003796 <ExtractKvPixelParameters+0x37e>
    {
      mlx90640->kv[i] = (temp - 0.5f);
 8003760:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800376c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003774:	edc7 7a01 	vstr	s15, [r7, #4]
 8003778:	793b      	ldrb	r3, [r7, #4]
 800377a:	b259      	sxtb	r1, r3
 800377c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003780:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800378a:	4413      	add	r3, r2
 800378c:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8003790:	460a      	mov	r2, r1
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e019      	b.n	80037ca <ExtractKvPixelParameters+0x3b2>
    }
    else
    {
      mlx90640->kv[i] = (temp + 0.5f);
 8003796:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80037ae:	793b      	ldrb	r3, [r7, #4]
 80037b0:	b259      	sxtb	r1, r3
 80037b2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80037b6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80037c0:	4413      	add	r3, r2
 80037c2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80037c6:	460a      	mov	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 768; i++)
 80037ca:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80037ce:	3301      	adds	r3, #1
 80037d0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80037d4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80037d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037dc:	db8c      	blt.n	80036f8 <ExtractKvPixelParameters+0x2e0>
    }

  }

  mlx90640->kvScale = kvScale;
 80037de:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80037e2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	461a      	mov	r2, r3
 80037ee:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80037f2:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 80037f6:	bf00      	nop
 80037f8:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003800:	00000000 	.word	0x00000000
 8003804:	40000000 	.word	0x40000000
 8003808:	427d999a 	.word	0x427d999a
 800380c:	00000000 	.word	0x00000000

08003810 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  float cpKta;
  uint8_t alphaScale;
  uint8_t ktaScale1;
  uint8_t kvScale;

  alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3340      	adds	r3, #64	; 0x40
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	0b1b      	lsrs	r3, r3, #12
 8003822:	b29b      	uxth	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	331b      	adds	r3, #27
 8003828:	75fb      	strb	r3, [r7, #23]

  offsetSP[0] = (eeData[58] & 0x03FF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3374      	adds	r3, #116	; 0x74
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b21b      	sxth	r3, r3
 8003832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003836:	b21b      	sxth	r3, r3
 8003838:	813b      	strh	r3, [r7, #8]
  if (offsetSP[0] > 511)
 800383a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	db07      	blt.n	8003854 <ExtractCPParameters+0x44>
  {
    offsetSP[0] = offsetSP[0] - 1024;
 8003844:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800384e:	b29b      	uxth	r3, r3
 8003850:	b21b      	sxth	r3, r3
 8003852:	813b      	strh	r3, [r7, #8]
  }

  offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3374      	adds	r3, #116	; 0x74
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	0a9b      	lsrs	r3, r3, #10
 800385c:	b29b      	uxth	r3, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	817b      	strh	r3, [r7, #10]
  if (offsetSP[1] > 31)
 8003862:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003866:	2b1f      	cmp	r3, #31
 8003868:	dd06      	ble.n	8003878 <ExtractCPParameters+0x68>
  {
    offsetSP[1] = offsetSP[1] - 64;
 800386a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b40      	subs	r3, #64	; 0x40
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21b      	sxth	r3, r3
 8003876:	817b      	strh	r3, [r7, #10]
  }
  offsetSP[1] = offsetSP[1] + offsetSP[0];
 8003878:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800387c:	b29a      	uxth	r2, r3
 800387e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003882:	b29b      	uxth	r3, r3
 8003884:	4413      	add	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	b21b      	sxth	r3, r3
 800388a:	817b      	strh	r3, [r7, #10]

  alphaSP[0] = (eeData[57] & 0x03FF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3372      	adds	r3, #114	; 0x72
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (alphaSP[0] > 511)
 80038a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003ab8 <ExtractCPParameters+0x2a8>
 80038aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	dd07      	ble.n	80038c4 <ExtractCPParameters+0xb4>
  {
    alphaSP[0] = alphaSP[0] - 1024;
 80038b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003abc <ExtractCPParameters+0x2ac>
 80038bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038c0:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  alphaSP[0] = alphaSP[0] / pow(2, (double)alphaScale);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fe5e 	bl	8000588 <__aeabi_f2d>
 80038cc:	4604      	mov	r4, r0
 80038ce:	460d      	mov	r5, r1
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fe36 	bl	8000544 <__aeabi_ui2d>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	ec43 2b11 	vmov	d1, r2, r3
 80038e0:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8003ab0 <ExtractCPParameters+0x2a0>
 80038e4:	f009 f936 	bl	800cb54 <pow>
 80038e8:	ec53 2b10 	vmov	r2, r3, d0
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc ffcc 	bl	800088c <__aeabi_ddiv>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fd f994 	bl	8000c28 <__aeabi_d2f>
 8003900:	4603      	mov	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]

  alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3372      	adds	r3, #114	; 0x72
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	b29b      	uxth	r3, r3
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003916:	edc7 7a04 	vstr	s15, [r7, #16]
  if (alphaSP[1] > 31)
 800391a:	edd7 7a04 	vldr	s15, [r7, #16]
 800391e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392a:	dd07      	ble.n	800393c <ExtractCPParameters+0x12c>
  {
    alphaSP[1] = alphaSP[1] - 64;
 800392c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003930:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003ac0 <ExtractCPParameters+0x2b0>
 8003934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003938:	edc7 7a04 	vstr	s15, [r7, #16]
  }
  alphaSP[1] = (1 + alphaSP[1] / 128) * alphaSP[0];
 800393c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003940:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003ac4 <ExtractCPParameters+0x2b4>
 8003944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800394c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003950:	edd7 7a03 	vldr	s15, [r7, #12]
 8003954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003958:	edc7 7a04 	vstr	s15, [r7, #16]

  cpKta = (eeData[59] & 0x00FF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3376      	adds	r3, #118	; 0x76
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396c:	edc7 7a06 	vstr	s15, [r7, #24]
  if (cpKta > 127)
 8003970:	edd7 7a06 	vldr	s15, [r7, #24]
 8003974:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003ac8 <ExtractCPParameters+0x2b8>
 8003978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003980:	dd07      	ble.n	8003992 <ExtractCPParameters+0x182>
  {
    cpKta = cpKta - 256;
 8003982:	edd7 7a06 	vldr	s15, [r7, #24]
 8003986:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003acc <ExtractCPParameters+0x2bc>
 800398a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800398e:	edc7 7a06 	vstr	s15, [r7, #24]
  }
  ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3370      	adds	r3, #112	; 0x70
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	111b      	asrs	r3, r3, #4
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3308      	adds	r3, #8
 80039a4:	75bb      	strb	r3, [r7, #22]
  mlx90640->cpKta = cpKta / pow(2, (double)ktaScale1);
 80039a6:	69b8      	ldr	r0, [r7, #24]
 80039a8:	f7fc fdee 	bl	8000588 <__aeabi_f2d>
 80039ac:	4604      	mov	r4, r0
 80039ae:	460d      	mov	r5, r1
 80039b0:	7dbb      	ldrb	r3, [r7, #22]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fdc6 	bl	8000544 <__aeabi_ui2d>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	ec43 2b11 	vmov	d1, r2, r3
 80039c0:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8003ab0 <ExtractCPParameters+0x2a0>
 80039c4:	f009 f8c6 	bl	800cb54 <pow>
 80039c8:	ec53 2b10 	vmov	r2, r3, d0
 80039cc:	4620      	mov	r0, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	f7fc ff5c 	bl	800088c <__aeabi_ddiv>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	f7fd f924 	bl	8000c28 <__aeabi_d2f>
 80039e0:	4602      	mov	r2, r0
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	621a      	str	r2, [r3, #32]

  cpKv = (eeData[59] & 0xFF00) >> 8;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3376      	adds	r3, #118	; 0x76
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f8:	edc7 7a07 	vstr	s15, [r7, #28]
  if (cpKv > 127)
 80039fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a00:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003ac8 <ExtractCPParameters+0x2b8>
 8003a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	dd07      	ble.n	8003a1e <ExtractCPParameters+0x20e>
  {
    cpKv = cpKv - 256;
 8003a0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a12:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003acc <ExtractCPParameters+0x2bc>
 8003a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
  }
  kvScale = (eeData[56] & 0x0F00) >> 8;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3370      	adds	r3, #112	; 0x70
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	121b      	asrs	r3, r3, #8
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	757b      	strb	r3, [r7, #21]
  mlx90640->cpKv = cpKv / pow(2, (double)kvScale);
 8003a2e:	69f8      	ldr	r0, [r7, #28]
 8003a30:	f7fc fdaa 	bl	8000588 <__aeabi_f2d>
 8003a34:	4604      	mov	r4, r0
 8003a36:	460d      	mov	r5, r1
 8003a38:	7d7b      	ldrb	r3, [r7, #21]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fd82 	bl	8000544 <__aeabi_ui2d>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	ec43 2b11 	vmov	d1, r2, r3
 8003a48:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8003ab0 <ExtractCPParameters+0x2a0>
 8003a4c:	f009 f882 	bl	800cb54 <pow>
 8003a50:	ec53 2b10 	vmov	r2, r3, d0
 8003a54:	4620      	mov	r0, r4
 8003a56:	4629      	mov	r1, r5
 8003a58:	f7fc ff18 	bl	800088c <__aeabi_ddiv>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7fd f8e0 	bl	8000c28 <__aeabi_d2f>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	61da      	str	r2, [r3, #28]

  mlx90640->cpAlpha[0] = alphaSP[0];
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a76:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  mlx90640->cpAlpha[1] = alphaSP[1];
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a82:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
  mlx90640->cpOffset[0] = offsetSP[0];
 8003a86:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
  mlx90640->cpOffset[1] = offsetSP[1];
 8003a94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9e:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	00000000 	.word	0x00000000
 8003ab4:	40000000 	.word	0x40000000
 8003ab8:	43ff8000 	.word	0x43ff8000
 8003abc:	44800000 	.word	0x44800000
 8003ac0:	42800000 	.word	0x42800000
 8003ac4:	43000000 	.word	0x43000000
 8003ac8:	42fe0000 	.word	0x42fe0000
 8003acc:	43800000 	.word	0x43800000

08003ad0 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  float ilChessC[3];
  uint8_t calibrationModeEE;

  calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3314      	adds	r3, #20
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	111b      	asrs	r3, r3, #4
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ae8:	75fb      	strb	r3, [r7, #23]
  calibrationModeEE = calibrationModeEE ^ 0x80;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8003af0:	43db      	mvns	r3, r3
 8003af2:	75fb      	strb	r3, [r7, #23]

  ilChessC[0] = (eeData[53] & 0x003F);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	336a      	adds	r3, #106	; 0x6a
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b06:	edc7 7a02 	vstr	s15, [r7, #8]
  if (ilChessC[0] > 31)
 8003b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b0e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	dd07      	ble.n	8003b2c <ExtractCILCParameters+0x5c>
  {
    ilChessC[0] = ilChessC[0] - 64;
 8003b1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b20:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003c08 <ExtractCILCParameters+0x138>
 8003b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b28:	edc7 7a02 	vstr	s15, [r7, #8]
  }
  ilChessC[0] = ilChessC[0] / 16.0f;
 8003b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b30:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b38:	edc7 7a02 	vstr	s15, [r7, #8]

  ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	336a      	adds	r3, #106	; 0x6a
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	119b      	asrs	r3, r3, #6
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b50:	edc7 7a03 	vstr	s15, [r7, #12]
  if (ilChessC[1] > 15)
 8003b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b58:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	dd07      	ble.n	8003b76 <ExtractCILCParameters+0xa6>
  {
    ilChessC[1] = ilChessC[1] - 32;
 8003b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b6a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003c0c <ExtractCILCParameters+0x13c>
 8003b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b72:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  ilChessC[1] = ilChessC[1] / 2.0f;
 8003b76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b7a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b82:	edc7 7a03 	vstr	s15, [r7, #12]

  ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	336a      	adds	r3, #106	; 0x6a
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	0adb      	lsrs	r3, r3, #11
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b98:	edc7 7a04 	vstr	s15, [r7, #16]
  if (ilChessC[2] > 15)
 8003b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ba0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	dd07      	ble.n	8003bbe <ExtractCILCParameters+0xee>
  {
    ilChessC[2] = ilChessC[2] - 32;
 8003bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c0c <ExtractCILCParameters+0x13c>
 8003bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bba:	edc7 7a04 	vstr	s15, [r7, #16]
  }
  ilChessC[2] = ilChessC[2] / 8.0f;
 8003bbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bc2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bca:	edc7 7a04 	vstr	s15, [r7, #16]

  mlx90640->calibrationModeEE = calibrationModeEE;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	7dfa      	ldrb	r2, [r7, #23]
 8003bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  mlx90640->ilChessC[0] = ilChessC[0];
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bde:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  mlx90640->ilChessC[1] = ilChessC[1];
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bea:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
  mlx90640->ilChessC[2] = ilChessC[2];
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf6:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	42800000 	.word	0x42800000
 8003c0c:	42000000 	.word	0x42000000

08003c10 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t* eeData, paramsMLX90640* mlx90640)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint16_t pixCnt = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	82fb      	strh	r3, [r7, #22]
  uint16_t brokenPixCnt = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	82bb      	strh	r3, [r7, #20]
  uint16_t outlierPixCnt = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	827b      	strh	r3, [r7, #18]
  int warn = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  int i;

  for (pixCnt = 0; pixCnt < 5; pixCnt++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	82fb      	strh	r3, [r7, #22]
 8003c2e:	e013      	b.n	8003c58 <ExtractDeviatingPixels+0x48>
  {
    mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003c30:	8afa      	ldrh	r2, [r7, #22]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c50:	805a      	strh	r2, [r3, #2]
  for (pixCnt = 0; pixCnt < 5; pixCnt++)
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	3301      	adds	r3, #1
 8003c56:	82fb      	strh	r3, [r7, #22]
 8003c58:	8afb      	ldrh	r3, [r7, #22]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d9e8      	bls.n	8003c30 <ExtractDeviatingPixels+0x20>
  }

  pixCnt = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	82fb      	strh	r3, [r7, #22]
  while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003c62:	e02a      	b.n	8003cba <ExtractDeviatingPixels+0xaa>
  {
    if (eeData[pixCnt + 64] == 0)
 8003c64:	8afb      	ldrh	r3, [r7, #22]
 8003c66:	3340      	adds	r3, #64	; 0x40
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <ExtractDeviatingPixels+0x7a>
    {
      mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8003c74:	8aba      	ldrh	r2, [r7, #20]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003c7c:	8af9      	ldrh	r1, [r7, #22]
 8003c7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      brokenPixCnt = brokenPixCnt + 1;
 8003c82:	8abb      	ldrh	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	82bb      	strh	r3, [r7, #20]
 8003c88:	e014      	b.n	8003cb4 <ExtractDeviatingPixels+0xa4>
    }
    else if ((eeData[pixCnt + 64] & 0x0001) != 0)
 8003c8a:	8afb      	ldrh	r3, [r7, #22]
 8003c8c:	3340      	adds	r3, #64	; 0x40
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <ExtractDeviatingPixels+0xa4>
    {
      mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8003c9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	8afa      	ldrh	r2, [r7, #22]
 8003cac:	805a      	strh	r2, [r3, #2]
      outlierPixCnt = outlierPixCnt + 1;
 8003cae:	8a7b      	ldrh	r3, [r7, #18]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	827b      	strh	r3, [r7, #18]
    }

    pixCnt = pixCnt + 1;
 8003cb4:	8afb      	ldrh	r3, [r7, #22]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	82fb      	strh	r3, [r7, #22]
  while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003cba:	8afb      	ldrh	r3, [r7, #22]
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc0:	d205      	bcs.n	8003cce <ExtractDeviatingPixels+0xbe>
 8003cc2:	8abb      	ldrh	r3, [r7, #20]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d802      	bhi.n	8003cce <ExtractDeviatingPixels+0xbe>
 8003cc8:	8a7b      	ldrh	r3, [r7, #18]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d9ca      	bls.n	8003c64 <ExtractDeviatingPixels+0x54>

  }

  if (brokenPixCnt > 4)
 8003cce:	8abb      	ldrh	r3, [r7, #20]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d903      	bls.n	8003cdc <ExtractDeviatingPixels+0xcc>
  {
    warn = -3;
 8003cd4:	f06f 0302 	mvn.w	r3, #2
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e08f      	b.n	8003dfc <ExtractDeviatingPixels+0x1ec>
  }
  else if (outlierPixCnt > 4)
 8003cdc:	8a7b      	ldrh	r3, [r7, #18]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d903      	bls.n	8003cea <ExtractDeviatingPixels+0xda>
  {
    warn = -4;
 8003ce2:	f06f 0303 	mvn.w	r3, #3
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e088      	b.n	8003dfc <ExtractDeviatingPixels+0x1ec>
  }
  else if ((brokenPixCnt + outlierPixCnt) > 4)
 8003cea:	8aba      	ldrh	r2, [r7, #20]
 8003cec:	8a7b      	ldrh	r3, [r7, #18]
 8003cee:	4413      	add	r3, r2
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	dd03      	ble.n	8003cfc <ExtractDeviatingPixels+0xec>
  {
    warn = -5;
 8003cf4:	f06f 0304 	mvn.w	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e07f      	b.n	8003dfc <ExtractDeviatingPixels+0x1ec>
  }
  else
  {
    for (pixCnt = 0; pixCnt < brokenPixCnt; pixCnt++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	82fb      	strh	r3, [r7, #22]
 8003d00:	e022      	b.n	8003d48 <ExtractDeviatingPixels+0x138>
    {
      for (i = pixCnt + 1; i < brokenPixCnt; i++)
 8003d02:	8afb      	ldrh	r3, [r7, #22]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	e017      	b.n	8003d3a <ExtractDeviatingPixels+0x12a>
      {
        warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt], mlx90640->brokenPixels[i]);
 8003d0a:	8afa      	ldrh	r2, [r7, #22]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003d12:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003d1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d22:	4619      	mov	r1, r3
 8003d24:	f000 f86f 	bl	8003e06 <CheckAdjacentPixels>
 8003d28:	60f8      	str	r0, [r7, #12]
        if (warn != 0)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <ExtractDeviatingPixels+0x124>
        {
          return warn;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	e064      	b.n	8003dfe <ExtractDeviatingPixels+0x1ee>
      for (i = pixCnt + 1; i < brokenPixCnt; i++)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	8abb      	ldrh	r3, [r7, #20]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	dbe3      	blt.n	8003d0a <ExtractDeviatingPixels+0xfa>
    for (pixCnt = 0; pixCnt < brokenPixCnt; pixCnt++)
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	3301      	adds	r3, #1
 8003d46:	82fb      	strh	r3, [r7, #22]
 8003d48:	8afa      	ldrh	r2, [r7, #22]
 8003d4a:	8abb      	ldrh	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3d8      	bcc.n	8003d02 <ExtractDeviatingPixels+0xf2>
        }
      }
    }

    for (pixCnt = 0; pixCnt < outlierPixCnt; pixCnt++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	82fb      	strh	r3, [r7, #22]
 8003d54:	e024      	b.n	8003da0 <ExtractDeviatingPixels+0x190>
    {
      for (i = pixCnt + 1; i < outlierPixCnt; i++)
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	e019      	b.n	8003d92 <ExtractDeviatingPixels+0x182>
      {
        warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt], mlx90640->outlierPixels[i]);
 8003d5e:	8afb      	ldrh	r3, [r7, #22]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	8858      	ldrh	r0, [r3, #2]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	885b      	ldrh	r3, [r3, #2]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f000 f843 	bl	8003e06 <CheckAdjacentPixels>
 8003d80:	60f8      	str	r0, [r7, #12]
        if (warn != 0)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <ExtractDeviatingPixels+0x17c>
        {
          return warn;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e038      	b.n	8003dfe <ExtractDeviatingPixels+0x1ee>
      for (i = pixCnt + 1; i < outlierPixCnt; i++)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	8a7b      	ldrh	r3, [r7, #18]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	dbe1      	blt.n	8003d5e <ExtractDeviatingPixels+0x14e>
    for (pixCnt = 0; pixCnt < outlierPixCnt; pixCnt++)
 8003d9a:	8afb      	ldrh	r3, [r7, #22]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	82fb      	strh	r3, [r7, #22]
 8003da0:	8afa      	ldrh	r2, [r7, #22]
 8003da2:	8a7b      	ldrh	r3, [r7, #18]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d3d6      	bcc.n	8003d56 <ExtractDeviatingPixels+0x146>
        }
      }
    }

    for (pixCnt = 0; pixCnt < brokenPixCnt; pixCnt++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	82fb      	strh	r3, [r7, #22]
 8003dac:	e022      	b.n	8003df4 <ExtractDeviatingPixels+0x1e4>
    {
      for (i = 0; i < outlierPixCnt; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	e018      	b.n	8003de6 <ExtractDeviatingPixels+0x1d6>
      {
        warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt], mlx90640->outlierPixels[i]);
 8003db4:	8afa      	ldrh	r2, [r7, #22]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003dbc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	885b      	ldrh	r3, [r3, #2]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f000 f819 	bl	8003e06 <CheckAdjacentPixels>
 8003dd4:	60f8      	str	r0, [r7, #12]
        if (warn != 0)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <ExtractDeviatingPixels+0x1d0>
        {
          return warn;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	e00e      	b.n	8003dfe <ExtractDeviatingPixels+0x1ee>
      for (i = 0; i < outlierPixCnt; i++)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	8a7b      	ldrh	r3, [r7, #18]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	dbe2      	blt.n	8003db4 <ExtractDeviatingPixels+0x1a4>
    for (pixCnt = 0; pixCnt < brokenPixCnt; pixCnt++)
 8003dee:	8afb      	ldrh	r3, [r7, #22]
 8003df0:	3301      	adds	r3, #1
 8003df2:	82fb      	strh	r3, [r7, #22]
 8003df4:	8afa      	ldrh	r2, [r7, #22]
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3d8      	bcc.n	8003dae <ExtractDeviatingPixels+0x19e>
    }

  }


  return warn;
 8003dfc:	68fb      	ldr	r3, [r7, #12]

}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460a      	mov	r2, r1
 8003e10:	80fb      	strh	r3, [r7, #6]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80bb      	strh	r3, [r7, #4]
  int pixPosDif;

  pixPosDif = pix1 - pix2;
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	88bb      	ldrh	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
  if (pixPosDif > -34 && pixPosDif < -30)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f113 0f21 	cmn.w	r3, #33	; 0x21
 8003e24:	db06      	blt.n	8003e34 <CheckAdjacentPixels+0x2e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f113 0f1e 	cmn.w	r3, #30
 8003e2c:	da02      	bge.n	8003e34 <CheckAdjacentPixels+0x2e>
  {
    return -6;
 8003e2e:	f06f 0305 	mvn.w	r3, #5
 8003e32:	e013      	b.n	8003e5c <CheckAdjacentPixels+0x56>
  }
  if (pixPosDif > -2 && pixPosDif < 2)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	db05      	blt.n	8003e48 <CheckAdjacentPixels+0x42>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	dc02      	bgt.n	8003e48 <CheckAdjacentPixels+0x42>
  {
    return -6;
 8003e42:	f06f 0305 	mvn.w	r3, #5
 8003e46:	e009      	b.n	8003e5c <CheckAdjacentPixels+0x56>
  }
  if (pixPosDif > 30 && pixPosDif < 34)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b1e      	cmp	r3, #30
 8003e4c:	dd05      	ble.n	8003e5a <CheckAdjacentPixels+0x54>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b21      	cmp	r3, #33	; 0x21
 8003e52:	dc02      	bgt.n	8003e5a <CheckAdjacentPixels+0x54>
  {
    return -6;
 8003e54:	f06f 0305 	mvn.w	r3, #5
 8003e58:	e000      	b.n	8003e5c <CheckAdjacentPixels+0x56>
  }

  return 0;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <MLX90640_I2CRead>:

}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	; 0x30
 8003e6c:	af04      	add	r7, sp, #16
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	460b      	mov	r3, r1
 8003e76:	81bb      	strh	r3, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]

	int ack = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]

	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	b299      	uxth	r1, r3
 8003e90:	897b      	ldrh	r3, [r7, #10]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	89ba      	ldrh	r2, [r7, #12]
 8003e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e9c:	9002      	str	r0, [sp, #8]
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	4817      	ldr	r0, [pc, #92]	; (8003f04 <MLX90640_I2CRead+0x9c>)
 8003ea8:	f001 fd58 	bl	800595c <HAL_I2C_Mem_Read>
 8003eac:	4603      	mov	r3, r0
 8003eae:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <MLX90640_I2CRead+0x54>
	{
			return -1;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	e01f      	b.n	8003efc <MLX90640_I2CRead+0x94>
	}


	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e016      	b.n	8003ef0 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4413      	add	r3, r2
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	441a      	add	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	440b      	add	r3, r1
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	7cfa      	ldrb	r2, [r7, #19]
 8003ee8:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3302      	adds	r3, #2
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	897b      	ldrh	r3, [r7, #10]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dbe3      	blt.n	8003ec2 <MLX90640_I2CRead+0x5a>
	}

	return 0;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000204 	.word	0x20000204

08003f08 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af04      	add	r7, sp, #16
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	460b      	mov	r3, r1
 8003f14:	80bb      	strh	r3, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	807b      	strh	r3, [r7, #2]

	uint8_t sa;
	int ack = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	72fb      	strb	r3, [r7, #11]

	cmd[0] = data >> 8;
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	723b      	strb	r3, [r7, #8]
	cmd[1] = data & 0x00FF;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	727b      	strb	r3, [r7, #9]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	b299      	uxth	r1, r3
 8003f38:	88ba      	ldrh	r2, [r7, #4]
 8003f3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2302      	movs	r3, #2
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	480e      	ldr	r0, [pc, #56]	; (8003f88 <MLX90640_I2CWrite+0x80>)
 8003f4e:	f001 fc0b 	bl	8005768 <HAL_I2C_Mem_Write>
 8003f52:	4603      	mov	r3, r0
 8003f54:	60fb      	str	r3, [r7, #12]

	if (ack != HAL_OK)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <MLX90640_I2CWrite+0x5a>
	{
			return -1;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f60:	e00e      	b.n	8003f80 <MLX90640_I2CWrite+0x78>
	}

	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 8003f62:	88b9      	ldrh	r1, [r7, #4]
 8003f64:	79f8      	ldrb	r0, [r7, #7]
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <MLX90640_I2CWrite+0x84>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f7ff ff7d 	bl	8003e68 <MLX90640_I2CRead>

	if ( dataCheck != data)
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <MLX90640_I2CWrite+0x84>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d002      	beq.n	8003f7e <MLX90640_I2CWrite+0x76>
	{
			return -2;
 8003f78:	f06f 0301 	mvn.w	r3, #1
 8003f7c:	e000      	b.n	8003f80 <MLX90640_I2CWrite+0x78>
	}

	return 0;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000204 	.word	0x20000204
 8003f8c:	20000200 	.word	0x20000200

08003f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 8003f96:	b081      	sub	sp, #4
 8003f98:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 int ir=0,ic=0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003fa0:	f102 0214 	add.w	r2, r2, #20
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003fac:	f102 0210 	add.w	r2, r2, #16
 8003fb0:	6013      	str	r3, [r2, #0]
 int flag=0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003fb8:	f102 020c 	add.w	r2, r2, #12
 8003fbc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fbe:	f000 fea7 	bl	8004d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fc2:	f000 faa3 	bl	800450c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fc6:	f000 fb6b 	bl	80046a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003fca:	f000 fb3f 	bl	800464c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003fce:	f000 fb0f 	bl	80045f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 8003fd2:	2105      	movs	r1, #5
 8003fd4:	2033      	movs	r0, #51	; 0x33
 8003fd6:	f7fd fa03 	bl	80013e0 <MLX90640_SetRefreshRate>
  	MLX90640_SetChessMode(MLX90640_ADDR);
 8003fda:	2033      	movs	r0, #51	; 0x33
 8003fdc:	f7fd fa2e 	bl	800143c <MLX90640_SetChessMode>
  	paramsMLX90640 mlx90640;
    status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 8003fe0:	499a      	ldr	r1, [pc, #616]	; (800424c <main+0x2bc>)
 8003fe2:	2033      	movs	r0, #51	; 0x33
 8003fe4:	f7fd f828 	bl	8001038 <MLX90640_DumpEE>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4a99      	ldr	r2, [pc, #612]	; (8004250 <main+0x2c0>)
 8003fec:	6013      	str	r3, [r2, #0]
    if (status != 0) printf("\r\nload system parameters error with code:%d\r\n",status);
 8003fee:	4b98      	ldr	r3, [pc, #608]	; (8004250 <main+0x2c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <main+0x72>
 8003ff6:	4b96      	ldr	r3, [pc, #600]	; (8004250 <main+0x2c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4895      	ldr	r0, [pc, #596]	; (8004254 <main+0x2c4>)
 8003ffe:	f004 ff35 	bl	8008e6c <iprintf>
    status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8004002:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004006:	3b04      	subs	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4890      	ldr	r0, [pc, #576]	; (800424c <main+0x2bc>)
 800400c:	f7fd f9a3 	bl	8001356 <MLX90640_ExtractParameters>
 8004010:	4603      	mov	r3, r0
 8004012:	4a8f      	ldr	r2, [pc, #572]	; (8004250 <main+0x2c0>)
 8004014:	6013      	str	r3, [r2, #0]
    if (status != 0) printf("\r\nParameter extraction failed with error code:%d\r\n",status);
 8004016:	4b8e      	ldr	r3, [pc, #568]	; (8004250 <main+0x2c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <main+0x9a>
 800401e:	4b8c      	ldr	r3, [pc, #560]	; (8004250 <main+0x2c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	488c      	ldr	r0, [pc, #560]	; (8004258 <main+0x2c8>)
 8004026:	f004 ff21 	bl	8008e6c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int status = MLX90640_GetFrameData(MLX90640_ADDR, frame);
 800402a:	498c      	ldr	r1, [pc, #560]	; (800425c <main+0x2cc>)
 800402c:	2033      	movs	r0, #51	; 0x33
 800402e:	f7fd f816 	bl	800105e <MLX90640_GetFrameData>
 8004032:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004036:	6018      	str	r0, [r3, #0]
	  		if (status < 0)
	  		{
	  			//printf("GetFrame Error: %d\r\n",status);
	  		}
	  		float vdd = MLX90640_GetVdd(frame, &mlx90640);
 8004038:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800403c:	3b04      	subs	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4886      	ldr	r0, [pc, #536]	; (800425c <main+0x2cc>)
 8004042:	f7fd fe9d 	bl	8001d80 <MLX90640_GetVdd>
 8004046:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800404a:	f103 031c 	add.w	r3, r3, #28
 800404e:	ed83 0a00 	vstr	s0, [r3]
	  		float Ta = MLX90640_GetTa(frame, &mlx90640);
 8004052:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004056:	3b04      	subs	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4880      	ldr	r0, [pc, #512]	; (800425c <main+0x2cc>)
 800405c:	f7fd ff12 	bl	8001e84 <MLX90640_GetTa>
 8004060:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004064:	f103 0318 	add.w	r3, r3, #24
 8004068:	ed83 0a00 	vstr	s0, [r3]

	  		float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 800406c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004070:	f103 0318 	add.w	r3, r3, #24
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800407c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004080:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004084:	f103 0314 	add.w	r3, r3, #20
 8004088:	edc3 7a00 	vstr	s15, [r3]
	  		//printf("vdd:  %f Tr: %f\r\n",vdd,tr);
	  		MLX90640_CalculateTo(frame, &mlx90640, emissivity , tr, mlx90640To);
 800408c:	4b74      	ldr	r3, [pc, #464]	; (8004260 <main+0x2d0>)
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004096:	3b04      	subs	r3, #4
 8004098:	4a72      	ldr	r2, [pc, #456]	; (8004264 <main+0x2d4>)
 800409a:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 800409e:	f101 0114 	add.w	r1, r1, #20
 80040a2:	edd1 0a00 	vldr	s1, [r1]
 80040a6:	eeb0 0a67 	vmov.f32	s0, s15
 80040aa:	4619      	mov	r1, r3
 80040ac:	486b      	ldr	r0, [pc, #428]	; (800425c <main+0x2cc>)
 80040ae:	f7fd fa2b 	bl	8001508 <MLX90640_CalculateTo>
	  		char buffer[]="\r\n==========================CAMERA IS INTERFACED==========================\r\n";
 80040b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80040b6:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80040ba:	4a6b      	ldr	r2, [pc, #428]	; (8004268 <main+0x2d8>)
 80040bc:	4618      	mov	r0, r3
 80040be:	4611      	mov	r1, r2
 80040c0:	234d      	movs	r3, #77	; 0x4d
 80040c2:	461a      	mov	r2, r3
 80040c4:	f004 f842 	bl	800814c <memcpy>
       HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 80040c8:	f107 0318 	add.w	r3, r7, #24
 80040cc:	3b18      	subs	r3, #24
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f89e 	bl	8000210 <strlen>
 80040d4:	4603      	mov	r3, r0
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f107 0118 	add.w	r1, r7, #24
 80040dc:	3918      	subs	r1, #24
 80040de:	2364      	movs	r3, #100	; 0x64
 80040e0:	4862      	ldr	r0, [pc, #392]	; (800426c <main+0x2dc>)
 80040e2:	f003 f842 	bl	800716a <HAL_UART_Transmit>
       memset(buffer,0,sizeof(buffer));
 80040e6:	f107 0318 	add.w	r3, r7, #24
 80040ea:	3b18      	subs	r3, #24
 80040ec:	224d      	movs	r2, #77	; 0x4d
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 f839 	bl	8008168 <memset>
	  		printf("\r\n==========================START OF IMAGE PIXEL PRINTING==========================\r\n");
 80040f6:	485e      	ldr	r0, [pc, #376]	; (8004270 <main+0x2e0>)
 80040f8:	f004 ff3e 	bl	8008f78 <puts>
	  		HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 80040fc:	2364      	movs	r3, #100	; 0x64
 80040fe:	2202      	movs	r2, #2
 8004100:	495c      	ldr	r1, [pc, #368]	; (8004274 <main+0x2e4>)
 8004102:	485a      	ldr	r0, [pc, #360]	; (800426c <main+0x2dc>)
 8004104:	f003 f831 	bl	800716a <HAL_UART_Transmit>
	  		HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8004108:	2364      	movs	r3, #100	; 0x64
 800410a:	2202      	movs	r2, #2
 800410c:	4959      	ldr	r1, [pc, #356]	; (8004274 <main+0x2e4>)
 800410e:	4857      	ldr	r0, [pc, #348]	; (800426c <main+0x2dc>)
 8004110:	f003 f82b 	bl	800716a <HAL_UART_Transmit>
	  		HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8004114:	2364      	movs	r3, #100	; 0x64
 8004116:	2202      	movs	r2, #2
 8004118:	4956      	ldr	r1, [pc, #344]	; (8004274 <main+0x2e4>)
 800411a:	4854      	ldr	r0, [pc, #336]	; (800426c <main+0x2dc>)
 800411c:	f003 f825 	bl	800716a <HAL_UART_Transmit>
		int imlx = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004126:	f102 0208 	add.w	r2, r2, #8
 800412a:	6013      	str	r3, [r2, #0]
		float data_ip;
		for (ir = 0; ir < 24; ir++) {
 800412c:	2300      	movs	r3, #0
 800412e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004132:	f102 0214 	add.w	r2, r2, #20
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e072      	b.n	8004220 <main+0x290>
			for (ic = 0; ic < 32; ic++) {
 800413a:	2300      	movs	r3, #0
 800413c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004140:	f102 0210 	add.w	r2, r2, #16
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e059      	b.n	80041fc <main+0x26c>
				data_ip = mlx90640To[imlx++] - 31;
 8004148:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800414c:	f103 0308 	add.w	r3, r3, #8
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8004158:	f101 0108 	add.w	r1, r1, #8
 800415c:	600a      	str	r2, [r1, #0]
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <main+0x2d4>)
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800416c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004170:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004174:	f103 0310 	add.w	r3, r3, #16
 8004178:	edc3 7a00 	vstr	s15, [r3]
				if (data_ip > 10)
 800417c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004180:	f103 0310 	add.w	r3, r3, #16
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	dd15      	ble.n	80041c2 <main+0x232>

				{
					target[ir][ic] = data_ip;
 8004196:	4938      	ldr	r1, [pc, #224]	; (8004278 <main+0x2e8>)
 8004198:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800419c:	f103 0314 	add.w	r3, r3, #20
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80041a8:	f103 0310 	add.w	r3, r3, #16
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80041b8:	f102 0210 	add.w	r2, r2, #16
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e011      	b.n	80041e6 <main+0x256>
				} else
					target[ir][ic] = 0;
 80041c2:	492d      	ldr	r1, [pc, #180]	; (8004278 <main+0x2e8>)
 80041c4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80041c8:	f103 0314 	add.w	r3, r3, #20
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80041d4:	f103 0310 	add.w	r3, r3, #16
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
			for (ic = 0; ic < 32; ic++) {
 80041e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80041ea:	f103 0310 	add.w	r3, r3, #16
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80041f6:	f102 0210 	add.w	r2, r2, #16
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004200:	f103 0310 	add.w	r3, r3, #16
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b1f      	cmp	r3, #31
 8004208:	dd9e      	ble.n	8004148 <main+0x1b8>
		for (ir = 0; ir < 24; ir++) {
 800420a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800420e:	f103 0314 	add.w	r3, r3, #20
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800421a:	f102 0214 	add.w	r2, r2, #20
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004224:	f103 0314 	add.w	r3, r3, #20
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b17      	cmp	r3, #23
 800422c:	dd85      	ble.n	800413a <main+0x1aa>

			}
		}

		char d_buff[100];
		for (ir = 0; ir < 24; ir++) {
 800422e:	2300      	movs	r3, #0
 8004230:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004234:	f102 0214 	add.w	r2, r2, #20
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e074      	b.n	8004326 <main+0x396>
			for (ic = 0; ic < 32; ic++) {
 800423c:	2300      	movs	r3, #0
 800423e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004242:	f102 0210 	add.w	r2, r2, #16
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e055      	b.n	80042f6 <main+0x366>
 800424a:	bf00      	nop
 800424c:	2000029c 	.word	0x2000029c
 8004250:	20001ba0 	.word	0x20001ba0
 8004254:	0800d9a8 	.word	0x0800d9a8
 8004258:	0800d9d8 	.word	0x0800d9d8
 800425c:	2000151c 	.word	0x2000151c
 8004260:	20000000 	.word	0x20000000
 8004264:	2000091c 	.word	0x2000091c
 8004268:	0800da88 	.word	0x0800da88
 800426c:	20000258 	.word	0x20000258
 8004270:	0800da0c 	.word	0x0800da0c
 8004274:	0800da64 	.word	0x0800da64
 8004278:	20001ba4 	.word	0x20001ba4

				sprintf(d_buff, "%0.0f ", target[ir][ic]);
 800427c:	499b      	ldr	r1, [pc, #620]	; (80044ec <main+0x55c>)
 800427e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004282:	f103 0314 	add.w	r3, r3, #20
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800428e:	f103 0310 	add.w	r3, r3, #16
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc f973 	bl	8000588 <__aeabi_f2d>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80042aa:	3808      	subs	r0, #8
 80042ac:	4990      	ldr	r1, [pc, #576]	; (80044f0 <main+0x560>)
 80042ae:	f004 fe71 	bl	8008f94 <siprintf>
				HAL_UART_Transmit(&huart2, d_buff, strlen(d_buff), 100);
 80042b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042b6:	3b08      	subs	r3, #8
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fb ffa9 	bl	8000210 <strlen>
 80042be:	4603      	mov	r3, r0
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80042c6:	3908      	subs	r1, #8
 80042c8:	2364      	movs	r3, #100	; 0x64
 80042ca:	488a      	ldr	r0, [pc, #552]	; (80044f4 <main+0x564>)
 80042cc:	f002 ff4d 	bl	800716a <HAL_UART_Transmit>
				memset(d_buff, 0, sizeof(d_buff));
 80042d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042d4:	3b08      	subs	r3, #8
 80042d6:	2264      	movs	r2, #100	; 0x64
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f003 ff44 	bl	8008168 <memset>
			for (ic = 0; ic < 32; ic++) {
 80042e0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80042e4:	f103 0310 	add.w	r3, r3, #16
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80042f0:	f102 0210 	add.w	r2, r2, #16
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80042fa:	f103 0310 	add.w	r3, r3, #16
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b1f      	cmp	r3, #31
 8004302:	ddbb      	ble.n	800427c <main+0x2ec>
			}
			HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8004304:	2364      	movs	r3, #100	; 0x64
 8004306:	2202      	movs	r2, #2
 8004308:	497b      	ldr	r1, [pc, #492]	; (80044f8 <main+0x568>)
 800430a:	487a      	ldr	r0, [pc, #488]	; (80044f4 <main+0x564>)
 800430c:	f002 ff2d 	bl	800716a <HAL_UART_Transmit>
		for (ir = 0; ir < 24; ir++) {
 8004310:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004314:	f103 0314 	add.w	r3, r3, #20
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004320:	f102 0214 	add.w	r2, r2, #20
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800432a:	f103 0314 	add.w	r3, r3, #20
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b17      	cmp	r3, #23
 8004332:	dd83      	ble.n	800423c <main+0x2ac>
		}
		HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8004334:	2364      	movs	r3, #100	; 0x64
 8004336:	2202      	movs	r2, #2
 8004338:	496f      	ldr	r1, [pc, #444]	; (80044f8 <main+0x568>)
 800433a:	486e      	ldr	r0, [pc, #440]	; (80044f4 <main+0x564>)
 800433c:	f002 ff15 	bl	800716a <HAL_UART_Transmit>


		float max = target[0][0];
 8004340:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <main+0x55c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004348:	f102 0204 	add.w	r2, r2, #4
 800434c:	6013      	str	r3, [r2, #0]
		for (ir = 0; ir < 24; ir++) {
 800434e:	2300      	movs	r3, #0
 8004350:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004354:	f102 0214 	add.w	r2, r2, #20
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e068      	b.n	800442e <main+0x49e>
			for (ic = 0; ic < 32; ic++) {
 800435c:	2300      	movs	r3, #0
 800435e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004362:	f102 0210 	add.w	r2, r2, #16
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e049      	b.n	80043fe <main+0x46e>

				if (max < target[ir][ic]) {
 800436a:	4960      	ldr	r1, [pc, #384]	; (80044ec <main+0x55c>)
 800436c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004370:	f103 0314 	add.w	r3, r3, #20
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800437c:	f103 0310 	add.w	r3, r3, #16
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	edd3 7a00 	vldr	s15, [r3]
 800438c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004390:	f103 0304 	add.w	r3, r3, #4
 8004394:	ed93 7a00 	vldr	s14, [r3]
 8004398:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d522      	bpl.n	80043e8 <main+0x458>
					max = target[ir][ic];
 80043a2:	4952      	ldr	r1, [pc, #328]	; (80044ec <main+0x55c>)
 80043a4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80043a8:	f103 0314 	add.w	r3, r3, #20
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80043b4:	f103 0310 	add.w	r3, r3, #16
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80043c6:	f102 0204 	add.w	r2, r2, #4
 80043ca:	6013      	str	r3, [r2, #0]
					position_y = ir;
 80043cc:	4a4b      	ldr	r2, [pc, #300]	; (80044fc <main+0x56c>)
 80043ce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80043d2:	f103 0314 	add.w	r3, r3, #20
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6013      	str	r3, [r2, #0]
					position_x = ic;
 80043da:	4a49      	ldr	r2, [pc, #292]	; (8004500 <main+0x570>)
 80043dc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80043e0:	f103 0310 	add.w	r3, r3, #16
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6013      	str	r3, [r2, #0]
			for (ic = 0; ic < 32; ic++) {
 80043e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80043ec:	f103 0310 	add.w	r3, r3, #16
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80043f8:	f102 0210 	add.w	r2, r2, #16
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004402:	f103 0310 	add.w	r3, r3, #16
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b1f      	cmp	r3, #31
 800440a:	ddae      	ble.n	800436a <main+0x3da>
				}

			}
			HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 800440c:	2364      	movs	r3, #100	; 0x64
 800440e:	2202      	movs	r2, #2
 8004410:	4939      	ldr	r1, [pc, #228]	; (80044f8 <main+0x568>)
 8004412:	4838      	ldr	r0, [pc, #224]	; (80044f4 <main+0x564>)
 8004414:	f002 fea9 	bl	800716a <HAL_UART_Transmit>
		for (ir = 0; ir < 24; ir++) {
 8004418:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800441c:	f103 0314 	add.w	r3, r3, #20
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004428:	f102 0214 	add.w	r2, r2, #20
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004432:	f103 0314 	add.w	r3, r3, #20
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b17      	cmp	r3, #23
 800443a:	dd8f      	ble.n	800435c <main+0x3cc>
		}
		//HAL_UART_Receive_IT(&huart2, &uart_data, 1);

		if (max != 0)
 800443c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004440:	f103 0304 	add.w	r3, r3, #4
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d005      	beq.n	800445e <main+0x4ce>
			{
				flag = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004458:	f102 020c 	add.w	r2, r2, #12
 800445c:	6013      	str	r3, [r2, #0]
			}
			if (flag == 1) {
 800445e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004462:	f103 030c 	add.w	r3, r3, #12
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d139      	bne.n	80044e0 <main+0x550>
				flag = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8004472:	f102 020c 	add.w	r2, r2, #12
 8004476:	6013      	str	r3, [r2, #0]
				sprintf(d_buff, "%0.0f row=%d column=%d", max, position_y + 1,
 8004478:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800447c:	f103 0304 	add.w	r3, r3, #4
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f7fc f881 	bl	8000588 <__aeabi_f2d>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	491c      	ldr	r1, [pc, #112]	; (80044fc <main+0x56c>)
 800448c:	6809      	ldr	r1, [r1, #0]
 800448e:	3101      	adds	r1, #1
 8004490:	481b      	ldr	r0, [pc, #108]	; (8004500 <main+0x570>)
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	1c44      	adds	r4, r0, #1
 8004496:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800449a:	3808      	subs	r0, #8
 800449c:	9401      	str	r4, [sp, #4]
 800449e:	9100      	str	r1, [sp, #0]
 80044a0:	4918      	ldr	r1, [pc, #96]	; (8004504 <main+0x574>)
 80044a2:	f004 fd77 	bl	8008f94 <siprintf>
						position_x + 1);

				HAL_UART_Transmit(&huart2, d_buff, strlen(d_buff), 100);
 80044a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044aa:	3b08      	subs	r3, #8
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fb feaf 	bl	8000210 <strlen>
 80044b2:	4603      	mov	r3, r0
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80044ba:	3908      	subs	r1, #8
 80044bc:	2364      	movs	r3, #100	; 0x64
 80044be:	480d      	ldr	r0, [pc, #52]	; (80044f4 <main+0x564>)
 80044c0:	f002 fe53 	bl	800716a <HAL_UART_Transmit>
				coordinates();
 80044c4:	f000 f96e 	bl	80047a4 <coordinates>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80044c8:	2201      	movs	r2, #1
 80044ca:	2120      	movs	r1, #32
 80044cc:	480e      	ldr	r0, [pc, #56]	; (8004508 <main+0x578>)
 80044ce:	f000 ffed 	bl	80054ac <HAL_GPIO_WritePin>

				//HAL_Delay(1000);
				reverse();
 80044d2:	f000 f9c3 	bl	800485c <reverse>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2120      	movs	r1, #32
 80044da:	480b      	ldr	r0, [pc, #44]	; (8004508 <main+0x578>)
 80044dc:	f000 ffe6 	bl	80054ac <HAL_GPIO_WritePin>

			}
			HAL_Delay(3000);
 80044e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80044e4:	f000 fc86 	bl	8004df4 <HAL_Delay>
  {
 80044e8:	e59f      	b.n	800402a <main+0x9a>
 80044ea:	bf00      	nop
 80044ec:	20001ba4 	.word	0x20001ba4
 80044f0:	0800da68 	.word	0x0800da68
 80044f4:	20000258 	.word	0x20000258
 80044f8:	0800da64 	.word	0x0800da64
 80044fc:	200027a8 	.word	0x200027a8
 8004500:	200027a4 	.word	0x200027a4
 8004504:	0800da70 	.word	0x0800da70
 8004508:	40020000 	.word	0x40020000

0800450c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	; 0x50
 8004510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	2234      	movs	r2, #52	; 0x34
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fe24 	bl	8008168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <SystemClock_Config+0xdc>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <SystemClock_Config+0xdc>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <SystemClock_Config+0xdc>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	2300      	movs	r3, #0
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <SystemClock_Config+0xe0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a25      	ldr	r2, [pc, #148]	; (80045ec <SystemClock_Config+0xe0>)
 8004556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <SystemClock_Config+0xe0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004568:	2301      	movs	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800456c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004570:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004572:	2302      	movs	r3, #2
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800457c:	2304      	movs	r3, #4
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004580:	23b4      	movs	r3, #180	; 0xb4
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004584:	2302      	movs	r3, #2
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004588:	2302      	movs	r3, #2
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800458c:	2302      	movs	r3, #2
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	4618      	mov	r0, r3
 8004596:	f002 fafd 	bl	8006b94 <HAL_RCC_OscConfig>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80045a0:	f000 f9b6 	bl	8004910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045a4:	f001 ff5c 	bl	8006460 <HAL_PWREx_EnableOverDrive>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80045ae:	f000 f9af 	bl	8004910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045b2:	230f      	movs	r3, #15
 80045b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045b6:	2302      	movs	r3, #2
 80045b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	2105      	movs	r1, #5
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 ff95 	bl	8006500 <HAL_RCC_ClockConfig>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80045dc:	f000 f998 	bl	8004910 <Error_Handler>
  }
}
 80045e0:	bf00      	nop
 80045e2:	3750      	adds	r7, #80	; 0x50
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40007000 	.word	0x40007000

080045f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <MX_I2C1_Init+0x50>)
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <MX_I2C1_Init+0x54>)
 80045f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <MX_I2C1_Init+0x50>)
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <MX_I2C1_Init+0x58>)
 80045fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <MX_I2C1_Init+0x50>)
 8004602:	2200      	movs	r2, #0
 8004604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004606:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <MX_I2C1_Init+0x50>)
 8004608:	2200      	movs	r2, #0
 800460a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <MX_I2C1_Init+0x50>)
 800460e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <MX_I2C1_Init+0x50>)
 8004616:	2200      	movs	r2, #0
 8004618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <MX_I2C1_Init+0x50>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <MX_I2C1_Init+0x50>)
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <MX_I2C1_Init+0x50>)
 8004628:	2200      	movs	r2, #0
 800462a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800462c:	4804      	ldr	r0, [pc, #16]	; (8004640 <MX_I2C1_Init+0x50>)
 800462e:	f000 ff57 	bl	80054e0 <HAL_I2C_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004638:	f000 f96a 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000204 	.word	0x20000204
 8004644:	40005400 	.word	0x40005400
 8004648:	00061a80 	.word	0x00061a80

0800464c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <MX_USART2_UART_Init+0x50>)
 8004654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800465c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800465e:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004666:	2200      	movs	r2, #0
 8004668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004672:	220c      	movs	r2, #12
 8004674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004682:	4805      	ldr	r0, [pc, #20]	; (8004698 <MX_USART2_UART_Init+0x4c>)
 8004684:	f002 fd24 	bl	80070d0 <HAL_UART_Init>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800468e:	f000 f93f 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000258 	.word	0x20000258
 800469c:	40004400 	.word	0x40004400

080046a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	609a      	str	r2, [r3, #8]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a36      	ldr	r2, [pc, #216]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b34      	ldr	r3, [pc, #208]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a28      	ldr	r2, [pc, #160]	; (8004798 <MX_GPIO_Init+0xf8>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <MX_GPIO_Init+0xf8>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <MX_GPIO_Init+0xf8>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a21      	ldr	r2, [pc, #132]	; (8004798 <MX_GPIO_Init+0xf8>)
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <MX_GPIO_Init+0xf8>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_P1_Pin|Motor_P2_Pin|Motor1_P1_Pin|Motor1_P2_Pin, GPIO_PIN_RESET);
 8004726:	2200      	movs	r2, #0
 8004728:	210f      	movs	r1, #15
 800472a:	481c      	ldr	r0, [pc, #112]	; (800479c <MX_GPIO_Init+0xfc>)
 800472c:	f000 febe 	bl	80054ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor_EN_Pin, GPIO_PIN_RESET);
 8004730:	2200      	movs	r2, #0
 8004732:	2160      	movs	r1, #96	; 0x60
 8004734:	481a      	ldr	r0, [pc, #104]	; (80047a0 <MX_GPIO_Init+0x100>)
 8004736:	f000 feb9 	bl	80054ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800473a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800473e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004740:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800474a:	f107 0314 	add.w	r3, r7, #20
 800474e:	4619      	mov	r1, r3
 8004750:	4812      	ldr	r0, [pc, #72]	; (800479c <MX_GPIO_Init+0xfc>)
 8004752:	f000 fd17 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_P1_Pin Motor_P2_Pin Motor1_P1_Pin Motor1_P2_Pin */
  GPIO_InitStruct.Pin = Motor_P1_Pin|Motor_P2_Pin|Motor1_P1_Pin|Motor1_P2_Pin;
 8004756:	230f      	movs	r3, #15
 8004758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475a:	2301      	movs	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	480b      	ldr	r0, [pc, #44]	; (800479c <MX_GPIO_Init+0xfc>)
 800476e:	f000 fd09 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Motor_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor_EN_Pin;
 8004772:	2360      	movs	r3, #96	; 0x60
 8004774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004776:	2301      	movs	r3, #1
 8004778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	4619      	mov	r1, r3
 8004788:	4805      	ldr	r0, [pc, #20]	; (80047a0 <MX_GPIO_Init+0x100>)
 800478a:	f000 fcfb 	bl	8005184 <HAL_GPIO_Init>

}
 800478e:	bf00      	nop
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020000 	.word	0x40020000

080047a4 <coordinates>:

/* USER CODE BEGIN 4 */
void coordinates()
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
	for(int i=0;i<position_y;i++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	e01e      	b.n	80047ee <coordinates+0x4a>
	{
	HAL_GPIO_WritePin(GPIOC, Motor_P1_Pin, GPIO_PIN_SET);
 80047b0:	2201      	movs	r2, #1
 80047b2:	2101      	movs	r1, #1
 80047b4:	4826      	ldr	r0, [pc, #152]	; (8004850 <coordinates+0xac>)
 80047b6:	f000 fe79 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Motor_P2_Pin, GPIO_PIN_RESET);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2102      	movs	r1, #2
 80047be:	4824      	ldr	r0, [pc, #144]	; (8004850 <coordinates+0xac>)
 80047c0:	f000 fe74 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80047c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047c8:	f000 fb14 	bl	8004df4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, Motor_P1_Pin, GPIO_PIN_RESET);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2101      	movs	r1, #1
 80047d0:	481f      	ldr	r0, [pc, #124]	; (8004850 <coordinates+0xac>)
 80047d2:	f000 fe6b 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Motor_P2_Pin, GPIO_PIN_RESET);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2102      	movs	r1, #2
 80047da:	481d      	ldr	r0, [pc, #116]	; (8004850 <coordinates+0xac>)
 80047dc:	f000 fe66 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80047e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047e4:	f000 fb06 	bl	8004df4 <HAL_Delay>
	for(int i=0;i<position_y;i++)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3301      	adds	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <coordinates+0xb0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	dbdb      	blt.n	80047b0 <coordinates+0xc>
	}

	for(int j=0;j<position_x;j++)
 80047f8:	2300      	movs	r3, #0
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	e01e      	b.n	800483c <coordinates+0x98>
		{
		HAL_GPIO_WritePin(GPIOC, Motor1_P1_Pin, GPIO_PIN_SET);
 80047fe:	2201      	movs	r2, #1
 8004800:	2104      	movs	r1, #4
 8004802:	4813      	ldr	r0, [pc, #76]	; (8004850 <coordinates+0xac>)
 8004804:	f000 fe52 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Motor1_P2_Pin, GPIO_PIN_RESET);
 8004808:	2200      	movs	r2, #0
 800480a:	2108      	movs	r1, #8
 800480c:	4810      	ldr	r0, [pc, #64]	; (8004850 <coordinates+0xac>)
 800480e:	f000 fe4d 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8004812:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004816:	f000 faed 	bl	8004df4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, Motor1_P1_Pin, GPIO_PIN_RESET);
 800481a:	2200      	movs	r2, #0
 800481c:	2104      	movs	r1, #4
 800481e:	480c      	ldr	r0, [pc, #48]	; (8004850 <coordinates+0xac>)
 8004820:	f000 fe44 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Motor1_P2_Pin, GPIO_PIN_RESET);
 8004824:	2200      	movs	r2, #0
 8004826:	2108      	movs	r1, #8
 8004828:	4809      	ldr	r0, [pc, #36]	; (8004850 <coordinates+0xac>)
 800482a:	f000 fe3f 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800482e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004832:	f000 fadf 	bl	8004df4 <HAL_Delay>
	for(int j=0;j<position_x;j++)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <coordinates+0xb4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	dbdb      	blt.n	80047fe <coordinates+0x5a>
		}
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40020800 	.word	0x40020800
 8004854:	200027a8 	.word	0x200027a8
 8004858:	200027a4 	.word	0x200027a4

0800485c <reverse>:

void reverse()
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
	for(int i=position_y;i>0;i--)
 8004862:	4b28      	ldr	r3, [pc, #160]	; (8004904 <reverse+0xa8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	e01e      	b.n	80048a8 <reverse+0x4c>
	{
	HAL_GPIO_WritePin(GPIOC, Motor_P1_Pin, GPIO_PIN_RESET);
 800486a:	2200      	movs	r2, #0
 800486c:	2101      	movs	r1, #1
 800486e:	4826      	ldr	r0, [pc, #152]	; (8004908 <reverse+0xac>)
 8004870:	f000 fe1c 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Motor_P2_Pin, GPIO_PIN_SET);
 8004874:	2201      	movs	r2, #1
 8004876:	2102      	movs	r1, #2
 8004878:	4823      	ldr	r0, [pc, #140]	; (8004908 <reverse+0xac>)
 800487a:	f000 fe17 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800487e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004882:	f000 fab7 	bl	8004df4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, Motor_P1_Pin, GPIO_PIN_RESET);
 8004886:	2200      	movs	r2, #0
 8004888:	2101      	movs	r1, #1
 800488a:	481f      	ldr	r0, [pc, #124]	; (8004908 <reverse+0xac>)
 800488c:	f000 fe0e 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Motor_P2_Pin, GPIO_PIN_RESET);
 8004890:	2200      	movs	r2, #0
 8004892:	2102      	movs	r1, #2
 8004894:	481c      	ldr	r0, [pc, #112]	; (8004908 <reverse+0xac>)
 8004896:	f000 fe09 	bl	80054ac <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800489a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800489e:	f000 faa9 	bl	8004df4 <HAL_Delay>
	for(int i=position_y;i>0;i--)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dcdd      	bgt.n	800486a <reverse+0xe>
	}

	for(int j=position_x;j>0;j--)
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <reverse+0xb0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	e01e      	b.n	80048f4 <reverse+0x98>
		{
		HAL_GPIO_WritePin(GPIOC, Motor1_P1_Pin, GPIO_PIN_RESET);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2104      	movs	r1, #4
 80048ba:	4813      	ldr	r0, [pc, #76]	; (8004908 <reverse+0xac>)
 80048bc:	f000 fdf6 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Motor1_P2_Pin, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	2108      	movs	r1, #8
 80048c4:	4810      	ldr	r0, [pc, #64]	; (8004908 <reverse+0xac>)
 80048c6:	f000 fdf1 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80048ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048ce:	f000 fa91 	bl	8004df4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, Motor1_P1_Pin, GPIO_PIN_RESET);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2104      	movs	r1, #4
 80048d6:	480c      	ldr	r0, [pc, #48]	; (8004908 <reverse+0xac>)
 80048d8:	f000 fde8 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Motor1_P2_Pin, GPIO_PIN_RESET);
 80048dc:	2200      	movs	r2, #0
 80048de:	2108      	movs	r1, #8
 80048e0:	4809      	ldr	r0, [pc, #36]	; (8004908 <reverse+0xac>)
 80048e2:	f000 fde3 	bl	80054ac <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80048e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048ea:	f000 fa83 	bl	8004df4 <HAL_Delay>
	for(int j=position_x;j>0;j--)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dcdd      	bgt.n	80048b6 <reverse+0x5a>
		}
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	200027a8 	.word	0x200027a8
 8004908:	40020800 	.word	0x40020800
 800490c:	200027a4 	.word	0x200027a4

08004910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004914:	b672      	cpsid	i
}
 8004916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004918:	e7fe      	b.n	8004918 <Error_Handler+0x8>
	...

0800491c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_MspInit+0x4c>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <HAL_MspInit+0x4c>)
 800492c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004930:	6453      	str	r3, [r2, #68]	; 0x44
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_MspInit+0x4c>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_MspInit+0x4c>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_MspInit+0x4c>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6413      	str	r3, [r2, #64]	; 0x40
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_MspInit+0x4c>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800495a:	2007      	movs	r0, #7
 800495c:	f000 fb3e 	bl	8004fdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800

0800496c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_I2C_MspInit+0x84>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d12b      	bne.n	80049e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049aa:	23c0      	movs	r3, #192	; 0xc0
 80049ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ae:	2312      	movs	r3, #18
 80049b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b6:	2303      	movs	r3, #3
 80049b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049ba:	2304      	movs	r3, #4
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	4619      	mov	r1, r3
 80049c4:	480c      	ldr	r0, [pc, #48]	; (80049f8 <HAL_I2C_MspInit+0x8c>)
 80049c6:	f000 fbdd 	bl	8005184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 80049d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_I2C_MspInit+0x88>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049e6:	bf00      	nop
 80049e8:	3728      	adds	r7, #40	; 0x28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40005400 	.word	0x40005400
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40020400 	.word	0x40020400

080049fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <HAL_UART_MspInit+0x94>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d133      	bne.n	8004a86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_UART_MspInit+0x98>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a56:	230c      	movs	r3, #12
 8004a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a62:	2303      	movs	r3, #3
 8004a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a66:	2307      	movs	r3, #7
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4809      	ldr	r0, [pc, #36]	; (8004a98 <HAL_UART_MspInit+0x9c>)
 8004a72:	f000 fb87 	bl	8005184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2026      	movs	r0, #38	; 0x26
 8004a7c:	f000 fab9 	bl	8004ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a80:	2026      	movs	r0, #38	; 0x26
 8004a82:	f000 fad2 	bl	800502a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40004400 	.word	0x40004400
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40020000 	.word	0x40020000

08004a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aa0:	e7fe      	b.n	8004aa0 <NMI_Handler+0x4>

08004aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aa6:	e7fe      	b.n	8004aa6 <HardFault_Handler+0x4>

08004aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <MemManage_Handler+0x4>

08004aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ab2:	e7fe      	b.n	8004ab2 <BusFault_Handler+0x4>

08004ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ab8:	e7fe      	b.n	8004ab8 <UsageFault_Handler+0x4>

08004aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ae8:	f000 f964 	bl	8004db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uart_data=1;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <USART2_IRQHandler+0x14>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004afa:	4803      	ldr	r0, [pc, #12]	; (8004b08 <USART2_IRQHandler+0x18>)
 8004afc:	f002 fbc8 	bl	8007290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200027ac 	.word	0x200027ac
 8004b08:	20000258 	.word	0x20000258

08004b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return 1;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_kill>:

int _kill(int pid, int sig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b26:	f003 fae7 	bl	80080f8 <__errno>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2216      	movs	r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_exit>:

void _exit (int status)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffe7 	bl	8004b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b4e:	e7fe      	b.n	8004b4e <_exit+0x12>

08004b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e00a      	b.n	8004b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b62:	f3af 8000 	nop.w
 8004b66:	4601      	mov	r1, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	60ba      	str	r2, [r7, #8]
 8004b6e:	b2ca      	uxtb	r2, r1
 8004b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3301      	adds	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	dbf0      	blt.n	8004b62 <_read+0x12>
  }

  return len;
 8004b80:	687b      	ldr	r3, [r7, #4]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e009      	b.n	8004bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	3301      	adds	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dbf1      	blt.n	8004b9c <_write+0x12>
  }
  return len;
 8004bb8:	687b      	ldr	r3, [r7, #4]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_close>:

int _close(int file)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bea:	605a      	str	r2, [r3, #4]
  return 0;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <_isatty>:

int _isatty(int file)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c02:	2301      	movs	r3, #1
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <_sbrk+0x5c>)
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <_sbrk+0x60>)
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <_sbrk+0x64>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <_sbrk+0x64>)
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <_sbrk+0x68>)
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <_sbrk+0x64>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d207      	bcs.n	8004c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c5c:	f003 fa4c 	bl	80080f8 <__errno>
 8004c60:	4603      	mov	r3, r0
 8004c62:	220c      	movs	r2, #12
 8004c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	e009      	b.n	8004c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <_sbrk+0x64>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <_sbrk+0x64>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	4a05      	ldr	r2, [pc, #20]	; (8004c90 <_sbrk+0x64>)
 8004c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20020000 	.word	0x20020000
 8004c8c:	00000400 	.word	0x00000400
 8004c90:	200027b0 	.word	0x200027b0
 8004c94:	200027c8 	.word	0x200027c8

08004c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <SystemInit+0x20>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <SystemInit+0x20>)
 8004ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cc0:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cc2:	490e      	ldr	r1, [pc, #56]	; (8004cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cc4:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc8:	e002      	b.n	8004cd0 <LoopCopyDataInit>

08004cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cce:	3304      	adds	r3, #4

08004cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cd4:	d3f9      	bcc.n	8004cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004cd8:	4c0b      	ldr	r4, [pc, #44]	; (8004d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cdc:	e001      	b.n	8004ce2 <LoopFillZerobss>

08004cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ce0:	3204      	adds	r2, #4

08004ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ce4:	d3fb      	bcc.n	8004cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ce6:	f7ff ffd7 	bl	8004c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cea:	f003 fa0b 	bl	8008104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cee:	f7ff f94f 	bl	8003f90 <main>
  bx  lr    
 8004cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cfc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004d00:	0800dfe0 	.word	0x0800dfe0
  ldr r2, =_sbss
 8004d04:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004d08:	200027c8 	.word	0x200027c8

08004d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d0c:	e7fe      	b.n	8004d0c <ADC_IRQHandler>
	...

08004d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_Init+0x40>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <HAL_Init+0x40>)
 8004d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_Init+0x40>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <HAL_Init+0x40>)
 8004d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <HAL_Init+0x40>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <HAL_Init+0x40>)
 8004d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d38:	2003      	movs	r0, #3
 8004d3a:	f000 f94f 	bl	8004fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f000 f808 	bl	8004d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d44:	f7ff fdea 	bl	800491c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023c00 	.word	0x40023c00

08004d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_InitTick+0x54>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_InitTick+0x58>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f967 	bl	8005046 <HAL_SYSTICK_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e00e      	b.n	8004da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b0f      	cmp	r3, #15
 8004d86:	d80a      	bhi.n	8004d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	f000 f92f 	bl	8004ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d94:	4a06      	ldr	r2, [pc, #24]	; (8004db0 <HAL_InitTick+0x5c>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000004 	.word	0x20000004
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	20000008 	.word	0x20000008

08004db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_IncTick+0x20>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_IncTick+0x24>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_IncTick+0x24>)
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c
 8004dd8:	200027b4 	.word	0x200027b4

08004ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return uwTick;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_GetTick+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	200027b4 	.word	0x200027b4

08004df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dfc:	f7ff ffee 	bl	8004ddc <HAL_GetTick>
 8004e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d005      	beq.n	8004e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_Delay+0x44>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e1a:	bf00      	nop
 8004e1c:	f7ff ffde 	bl	8004ddc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d8f7      	bhi.n	8004e1c <HAL_Delay+0x28>
  {
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c

08004e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <__NVIC_SetPriorityGrouping+0x44>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e6e:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <__NVIC_SetPriorityGrouping+0x44>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	60d3      	str	r3, [r2, #12]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <__NVIC_GetPriorityGrouping+0x18>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	f003 0307 	and.w	r3, r3, #7
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	db0b      	blt.n	8004eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	f003 021f 	and.w	r2, r3, #31
 8004eb8:	4907      	ldr	r1, [pc, #28]	; (8004ed8 <__NVIC_EnableIRQ+0x38>)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	e000e100 	.word	0xe000e100

08004edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	db0a      	blt.n	8004f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	490c      	ldr	r1, [pc, #48]	; (8004f28 <__NVIC_SetPriority+0x4c>)
 8004ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	440b      	add	r3, r1
 8004f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f04:	e00a      	b.n	8004f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <__NVIC_SetPriority+0x50>)
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	3b04      	subs	r3, #4
 8004f14:	0112      	lsls	r2, r2, #4
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	761a      	strb	r2, [r3, #24]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000e100 	.word	0xe000e100
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f1c3 0307 	rsb	r3, r3, #7
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf28      	it	cs
 8004f4e:	2304      	movcs	r3, #4
 8004f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3304      	adds	r3, #4
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d902      	bls.n	8004f60 <NVIC_EncodePriority+0x30>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3b03      	subs	r3, #3
 8004f5e:	e000      	b.n	8004f62 <NVIC_EncodePriority+0x32>
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	401a      	ands	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	43d9      	mvns	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f88:	4313      	orrs	r3, r2
         );
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3724      	adds	r7, #36	; 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fa8:	d301      	bcc.n	8004fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004faa:	2301      	movs	r3, #1
 8004fac:	e00f      	b.n	8004fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fae:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <SysTick_Config+0x40>)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fb6:	210f      	movs	r1, #15
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	f7ff ff8e 	bl	8004edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <SysTick_Config+0x40>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <SysTick_Config+0x40>)
 8004fc8:	2207      	movs	r2, #7
 8004fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	e000e010 	.word	0xe000e010

08004fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff ff29 	bl	8004e3c <__NVIC_SetPriorityGrouping>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005004:	f7ff ff3e 	bl	8004e84 <__NVIC_GetPriorityGrouping>
 8005008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	6978      	ldr	r0, [r7, #20]
 8005010:	f7ff ff8e 	bl	8004f30 <NVIC_EncodePriority>
 8005014:	4602      	mov	r2, r0
 8005016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff ff5d 	bl	8004edc <__NVIC_SetPriority>
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff31 	bl	8004ea0 <__NVIC_EnableIRQ>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ffa2 	bl	8004f98 <SysTick_Config>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800506c:	f7ff feb6 	bl	8004ddc <HAL_GetTick>
 8005070:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d008      	beq.n	8005090 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2280      	movs	r2, #128	; 0x80
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e052      	b.n	8005136 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0216 	bic.w	r2, r2, #22
 800509e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <HAL_DMA_Abort+0x62>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0208 	bic.w	r2, r2, #8
 80050ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e0:	e013      	b.n	800510a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050e2:	f7ff fe7b 	bl	8004ddc <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d90c      	bls.n	800510a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2203      	movs	r2, #3
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e015      	b.n	8005136 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e4      	bne.n	80050e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	223f      	movs	r2, #63	; 0x3f
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d004      	beq.n	800515c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e00c      	b.n	8005176 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2205      	movs	r2, #5
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e165      	b.n	800546c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a0:	2201      	movs	r2, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	f040 8154 	bne.w	8005466 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d005      	beq.n	80051d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d130      	bne.n	8005238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2203      	movs	r2, #3
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800520c:	2201      	movs	r2, #1
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 0201 	and.w	r2, r3, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b03      	cmp	r3, #3
 8005242:	d017      	beq.n	8005274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d123      	bne.n	80052c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	08da      	lsrs	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3208      	adds	r2, #8
 8005288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	220f      	movs	r2, #15
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	69b9      	ldr	r1, [r7, #24]
 80052c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2203      	movs	r2, #3
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0203 	and.w	r2, r3, #3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80ae 	beq.w	8005466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_GPIO_Init+0x300>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4a5c      	ldr	r2, [pc, #368]	; (8005484 <HAL_GPIO_Init+0x300>)
 8005314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005318:	6453      	str	r3, [r2, #68]	; 0x44
 800531a:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_GPIO_Init+0x300>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005326:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_GPIO_Init+0x304>)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	3302      	adds	r3, #2
 800532e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	220f      	movs	r2, #15
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a4f      	ldr	r2, [pc, #316]	; (800548c <HAL_GPIO_Init+0x308>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d025      	beq.n	800539e <HAL_GPIO_Init+0x21a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a4e      	ldr	r2, [pc, #312]	; (8005490 <HAL_GPIO_Init+0x30c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01f      	beq.n	800539a <HAL_GPIO_Init+0x216>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a4d      	ldr	r2, [pc, #308]	; (8005494 <HAL_GPIO_Init+0x310>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d019      	beq.n	8005396 <HAL_GPIO_Init+0x212>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a4c      	ldr	r2, [pc, #304]	; (8005498 <HAL_GPIO_Init+0x314>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <HAL_GPIO_Init+0x20e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4b      	ldr	r2, [pc, #300]	; (800549c <HAL_GPIO_Init+0x318>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00d      	beq.n	800538e <HAL_GPIO_Init+0x20a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4a      	ldr	r2, [pc, #296]	; (80054a0 <HAL_GPIO_Init+0x31c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <HAL_GPIO_Init+0x206>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a49      	ldr	r2, [pc, #292]	; (80054a4 <HAL_GPIO_Init+0x320>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d101      	bne.n	8005386 <HAL_GPIO_Init+0x202>
 8005382:	2306      	movs	r3, #6
 8005384:	e00c      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 8005386:	2307      	movs	r3, #7
 8005388:	e00a      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 800538a:	2305      	movs	r3, #5
 800538c:	e008      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 800538e:	2304      	movs	r3, #4
 8005390:	e006      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 8005392:	2303      	movs	r3, #3
 8005394:	e004      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 8005396:	2302      	movs	r3, #2
 8005398:	e002      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <HAL_GPIO_Init+0x21c>
 800539e:	2300      	movs	r3, #0
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	f002 0203 	and.w	r2, r2, #3
 80053a6:	0092      	lsls	r2, r2, #2
 80053a8:	4093      	lsls	r3, r2
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b0:	4935      	ldr	r1, [pc, #212]	; (8005488 <HAL_GPIO_Init+0x304>)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	089b      	lsrs	r3, r3, #2
 80053b6:	3302      	adds	r3, #2
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053be:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <HAL_GPIO_Init+0x324>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	43db      	mvns	r3, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4013      	ands	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053e2:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <HAL_GPIO_Init+0x324>)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053e8:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <HAL_GPIO_Init+0x324>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <HAL_GPIO_Init+0x324>)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005412:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <HAL_GPIO_Init+0x324>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_GPIO_Init+0x324>)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_GPIO_Init+0x324>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005460:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_GPIO_Init+0x324>)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b0f      	cmp	r3, #15
 8005470:	f67f ae96 	bls.w	80051a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	3724      	adds	r7, #36	; 0x24
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	40013800 	.word	0x40013800
 800548c:	40020000 	.word	0x40020000
 8005490:	40020400 	.word	0x40020400
 8005494:	40020800 	.word	0x40020800
 8005498:	40020c00 	.word	0x40020c00
 800549c:	40021000 	.word	0x40021000
 80054a0:	40021400 	.word	0x40021400
 80054a4:	40021800 	.word	0x40021800
 80054a8:	40013c00 	.word	0x40013c00

080054ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
 80054b8:	4613      	mov	r3, r2
 80054ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054bc:	787b      	ldrb	r3, [r7, #1]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054c2:	887a      	ldrh	r2, [r7, #2]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054c8:	e003      	b.n	80054d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	041a      	lsls	r2, r3, #16
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	619a      	str	r2, [r3, #24]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e12b      	b.n	800574a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fa30 	bl	800496c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	; 0x24
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005544:	f001 f8ce 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8005548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4a81      	ldr	r2, [pc, #516]	; (8005754 <HAL_I2C_Init+0x274>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d807      	bhi.n	8005564 <HAL_I2C_Init+0x84>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a80      	ldr	r2, [pc, #512]	; (8005758 <HAL_I2C_Init+0x278>)
 8005558:	4293      	cmp	r3, r2
 800555a:	bf94      	ite	ls
 800555c:	2301      	movls	r3, #1
 800555e:	2300      	movhi	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e006      	b.n	8005572 <HAL_I2C_Init+0x92>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a7d      	ldr	r2, [pc, #500]	; (800575c <HAL_I2C_Init+0x27c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf94      	ite	ls
 800556c:	2301      	movls	r3, #1
 800556e:	2300      	movhi	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e0e7      	b.n	800574a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a78      	ldr	r2, [pc, #480]	; (8005760 <HAL_I2C_Init+0x280>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0c9b      	lsrs	r3, r3, #18
 8005584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a6a      	ldr	r2, [pc, #424]	; (8005754 <HAL_I2C_Init+0x274>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d802      	bhi.n	80055b4 <HAL_I2C_Init+0xd4>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3301      	adds	r3, #1
 80055b2:	e009      	b.n	80055c8 <HAL_I2C_Init+0xe8>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	4a69      	ldr	r2, [pc, #420]	; (8005764 <HAL_I2C_Init+0x284>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	3301      	adds	r3, #1
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	495c      	ldr	r1, [pc, #368]	; (8005754 <HAL_I2C_Init+0x274>)
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d819      	bhi.n	800561c <HAL_I2C_Init+0x13c>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1e59      	subs	r1, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f6:	1c59      	adds	r1, r3, #1
 80055f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055fc:	400b      	ands	r3, r1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_I2C_Init+0x138>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1e59      	subs	r1, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005610:	3301      	adds	r3, #1
 8005612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005616:	e051      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 8005618:	2304      	movs	r3, #4
 800561a:	e04f      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <HAL_I2C_Init+0x168>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	440b      	add	r3, r1
 8005632:	fbb0 f3f3 	udiv	r3, r0, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e012      	b.n	800566e <HAL_I2C_Init+0x18e>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e58      	subs	r0, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	0099      	lsls	r1, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	fbb0 f3f3 	udiv	r3, r0, r3
 800565e:	3301      	adds	r3, #1
 8005660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x196>
 8005672:	2301      	movs	r3, #1
 8005674:	e022      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10e      	bne.n	800569c <HAL_I2C_Init+0x1bc>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e58      	subs	r0, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	440b      	add	r3, r1
 800568c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005690:	3301      	adds	r3, #1
 8005692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569a:	e00f      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1e58      	subs	r0, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	0099      	lsls	r1, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b2:	3301      	adds	r3, #1
 80056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	6809      	ldr	r1, [r1, #0]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6911      	ldr	r1, [r2, #16]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	4311      	orrs	r1, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	000186a0 	.word	0x000186a0
 8005758:	001e847f 	.word	0x001e847f
 800575c:	003d08ff 	.word	0x003d08ff
 8005760:	431bde83 	.word	0x431bde83
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005782:	f7ff fb2b 	bl	8004ddc <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b20      	cmp	r3, #32
 8005792:	f040 80d9 	bne.w	8005948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	2319      	movs	r3, #25
 800579c:	2201      	movs	r2, #1
 800579e:	496d      	ldr	r1, [pc, #436]	; (8005954 <HAL_I2C_Mem_Write+0x1ec>)
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fc7f 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0cc      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Mem_Write+0x56>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0c5      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d007      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2221      	movs	r2, #33	; 0x21
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2240      	movs	r2, #64	; 0x40
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a3a      	ldr	r2, [r7, #32]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a4d      	ldr	r2, [pc, #308]	; (8005958 <HAL_I2C_Mem_Write+0x1f0>)
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005826:	88f8      	ldrh	r0, [r7, #6]
 8005828:	893a      	ldrh	r2, [r7, #8]
 800582a:	8979      	ldrh	r1, [r7, #10]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4603      	mov	r3, r0
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fab6 	bl	8005da8 <I2C_RequestMemoryWrite>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d052      	beq.n	80058e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e081      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fd00 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b04      	cmp	r3, #4
 800585c:	d107      	bne.n	800586e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06b      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d11b      	bne.n	80058e8 <HAL_I2C_Mem_Write+0x180>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d017      	beq.n	80058e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1aa      	bne.n	8005846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fcec 	bl	80062d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00d      	beq.n	800591c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	2b04      	cmp	r3, #4
 8005906:	d107      	bne.n	8005918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e016      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	00100002 	.word	0x00100002
 8005958:	ffff0000 	.word	0xffff0000

0800595c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	; 0x30
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4603      	mov	r3, r0
 800596c:	817b      	strh	r3, [r7, #10]
 800596e:	460b      	mov	r3, r1
 8005970:	813b      	strh	r3, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005976:	f7ff fa31 	bl	8004ddc <HAL_GetTick>
 800597a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	f040 8208 	bne.w	8005d9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2319      	movs	r3, #25
 8005990:	2201      	movs	r2, #1
 8005992:	497b      	ldr	r1, [pc, #492]	; (8005b80 <HAL_I2C_Mem_Read+0x224>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fb85 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
 80059a2:	e1fb      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_I2C_Mem_Read+0x56>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e1f4      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d007      	beq.n	80059d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2222      	movs	r2, #34	; 0x22
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a5b      	ldr	r2, [pc, #364]	; (8005b84 <HAL_I2C_Mem_Read+0x228>)
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a1a:	88f8      	ldrh	r0, [r7, #6]
 8005a1c:	893a      	ldrh	r2, [r7, #8]
 8005a1e:	8979      	ldrh	r1, [r7, #10]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa52 	bl	8005ed4 <I2C_RequestMemoryRead>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1b0      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d113      	bne.n	8005a6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a42:	2300      	movs	r3, #0
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e184      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11b      	bne.n	8005aaa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e164      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d11b      	bne.n	8005aea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	e144      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b00:	e138      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	f200 80f1 	bhi.w	8005cee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d123      	bne.n	8005b5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fc1b 	bl	8006354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e139      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b5a:	e10b      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d14e      	bne.n	8005c02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4906      	ldr	r1, [pc, #24]	; (8005b88 <HAL_I2C_Mem_Read+0x22c>)
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fa98 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e10e      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
 8005b7e:	bf00      	nop
 8005b80:	00100002 	.word	0x00100002
 8005b84:	ffff0000 	.word	0xffff0000
 8005b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c00:	e0b8      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4966      	ldr	r1, [pc, #408]	; (8005da4 <HAL_I2C_Mem_Read+0x448>)
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fa49 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0bf      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	2200      	movs	r2, #0
 8005c66:	494f      	ldr	r1, [pc, #316]	; (8005da4 <HAL_I2C_Mem_Read+0x448>)
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fa1b 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e091      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cec:	e042      	b.n	8005d74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb2e 	bl	8006354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e04c      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d118      	bne.n	8005d74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f aec2 	bne.w	8005b02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
  }
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3728      	adds	r7, #40	; 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	00010004 	.word	0x00010004

08005da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	817b      	strh	r3, [r7, #10]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	813b      	strh	r3, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f960 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d103      	bne.n	8005e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e05f      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	492d      	ldr	r1, [pc, #180]	; (8005ed0 <I2C_RequestMemoryWrite+0x128>)
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f998 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e04c      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	6a39      	ldr	r1, [r7, #32]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fa02 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d107      	bne.n	8005e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e02b      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	e021      	b.n	8005ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	6a39      	ldr	r1, [r7, #32]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f9dc 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d107      	bne.n	8005eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e005      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	00010002 	.word	0x00010002

08005ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	813b      	strh	r3, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f8c2 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f34:	d103      	bne.n	8005f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e0aa      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	4952      	ldr	r1, [pc, #328]	; (80060a0 <I2C_RequestMemoryRead+0x1cc>)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f8fa 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e097      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f964 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d107      	bne.n	8005fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e076      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]
 8005fba:	e021      	b.n	8006000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fbc:	893b      	ldrh	r3, [r7, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	6a39      	ldr	r1, [r7, #32]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f93e 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d107      	bne.n	8005ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e050      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	6a39      	ldr	r1, [r7, #32]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f923 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	2b04      	cmp	r3, #4
 8006016:	d107      	bne.n	8006028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e035      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f82b 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006062:	d103      	bne.n	800606c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e013      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	4906      	ldr	r1, [pc, #24]	; (80060a0 <I2C_RequestMemoryRead+0x1cc>)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f863 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00010002 	.word	0x00010002

080060a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b4:	e025      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d021      	beq.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fe fe8d 	bl	8004ddc <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e023      	b.n	800614a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10d      	bne.n	8006128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	43da      	mvns	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	e00c      	b.n	8006142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	43da      	mvns	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0b6      	beq.n	80060b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006160:	e051      	b.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d123      	bne.n	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e046      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fe fe0b 	bl	8004ddc <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e020      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10c      	bne.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	43da      	mvns	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e00b      	b.n	8006242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	43da      	mvns	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4013      	ands	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d18d      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625c:	e02d      	b.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f8ce 	bl	8006400 <I2C_IsAcknowledgeFailed>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e02d      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d021      	beq.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fe fdb1 	bl	8004ddc <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d1ca      	bne.n	800625e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062de:	e02d      	b.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f88d 	bl	8006400 <I2C_IsAcknowledgeFailed>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e02d      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d021      	beq.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fe fd70 	bl	8004ddc <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e007      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b04      	cmp	r3, #4
 8006348:	d1ca      	bne.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006360:	e042      	b.n	80063e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d119      	bne.n	80063a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0210 	mvn.w	r2, #16
 8006378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e029      	b.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a4:	f7fe fd1a 	bl	8004ddc <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d116      	bne.n	80063e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e007      	b.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d1b5      	bne.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006416:	d11b      	bne.n	8006450 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006420:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	f043 0204 	orr.w	r2, r3, #4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	6413      	str	r3, [r2, #64]	; 0x40
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006486:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800648c:	f7fe fca6 	bl	8004ddc <HAL_GetTick>
 8006490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006492:	e009      	b.n	80064a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006494:	f7fe fca2 	bl	8004ddc <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	d901      	bls.n	80064a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e01f      	b.n	80064e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064a8:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b4:	d1ee      	bne.n	8006494 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064bc:	f7fe fc8e 	bl	8004ddc <HAL_GetTick>
 80064c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064c2:	e009      	b.n	80064d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064c4:	f7fe fc8a 	bl	8004ddc <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d2:	d901      	bls.n	80064d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e007      	b.n	80064e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064d8:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e4:	d1ee      	bne.n	80064c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	420e0040 	.word	0x420e0040
 80064f8:	40007000 	.word	0x40007000
 80064fc:	420e0044 	.word	0x420e0044

08006500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0cc      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006514:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d90c      	bls.n	800653c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b65      	ldr	r3, [pc, #404]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b63      	ldr	r3, [pc, #396]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0b8      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006554:	4b59      	ldr	r3, [pc, #356]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a58      	ldr	r2, [pc, #352]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800655e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4a52      	ldr	r2, [pc, #328]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006578:	4b50      	ldr	r3, [pc, #320]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	494d      	ldr	r1, [pc, #308]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d044      	beq.n	8006620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659e:	4b47      	ldr	r3, [pc, #284]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d119      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e07f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d003      	beq.n	80065be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065be:	4b3f      	ldr	r3, [pc, #252]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e06f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ce:	4b3b      	ldr	r3, [pc, #236]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e067      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 0203 	bic.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4934      	ldr	r1, [pc, #208]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065f0:	f7fe fbf4 	bl	8004ddc <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	e00a      	b.n	800660e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f8:	f7fe fbf0 	bl	8004ddc <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e04f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	4b2b      	ldr	r3, [pc, #172]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 020c 	and.w	r2, r3, #12
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	429a      	cmp	r2, r3
 800661e:	d1eb      	bne.n	80065f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20c      	bcs.n	8006648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e032      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4916      	ldr	r1, [pc, #88]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	490e      	ldr	r1, [pc, #56]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	4313      	orrs	r3, r2
 8006684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006686:	f000 f855 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 800668a:	4602      	mov	r2, r0
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	490a      	ldr	r1, [pc, #40]	; (80066c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006698:	5ccb      	ldrb	r3, [r1, r3]
 800669a:	fa22 f303 	lsr.w	r3, r2, r3
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <HAL_RCC_ClockConfig+0x1c8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fb54 	bl	8004d54 <HAL_InitTick>

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023c00 	.word	0x40023c00
 80066bc:	40023800 	.word	0x40023800
 80066c0:	0800dad8 	.word	0x0800dad8
 80066c4:	20000004 	.word	0x20000004
 80066c8:	20000008 	.word	0x20000008

080066cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000004 	.word	0x20000004

080066e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066e8:	f7ff fff0 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0a9b      	lsrs	r3, r3, #10
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4903      	ldr	r1, [pc, #12]	; (8006708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	0800dae8 	.word	0x0800dae8

0800670c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006710:	f7ff ffdc 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	0b5b      	lsrs	r3, r3, #13
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4903      	ldr	r1, [pc, #12]	; (8006730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40023800 	.word	0x40023800
 8006730:	0800dae8 	.word	0x0800dae8

08006734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006738:	b0ae      	sub	sp, #184	; 0xb8
 800673a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800675a:	4bcb      	ldr	r3, [pc, #812]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b0c      	cmp	r3, #12
 8006764:	f200 8206 	bhi.w	8006b74 <HAL_RCC_GetSysClockFreq+0x440>
 8006768:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <HAL_RCC_GetSysClockFreq+0x3c>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	080067a5 	.word	0x080067a5
 8006774:	08006b75 	.word	0x08006b75
 8006778:	08006b75 	.word	0x08006b75
 800677c:	08006b75 	.word	0x08006b75
 8006780:	080067ad 	.word	0x080067ad
 8006784:	08006b75 	.word	0x08006b75
 8006788:	08006b75 	.word	0x08006b75
 800678c:	08006b75 	.word	0x08006b75
 8006790:	080067b5 	.word	0x080067b5
 8006794:	08006b75 	.word	0x08006b75
 8006798:	08006b75 	.word	0x08006b75
 800679c:	08006b75 	.word	0x08006b75
 80067a0:	080069a5 	.word	0x080069a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067a4:	4bb9      	ldr	r3, [pc, #740]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x358>)
 80067a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80067aa:	e1e7      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ac:	4bb8      	ldr	r3, [pc, #736]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x35c>)
 80067ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80067b2:	e1e3      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067b4:	4bb4      	ldr	r3, [pc, #720]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067c0:	4bb1      	ldr	r3, [pc, #708]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d071      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067cc:	4bae      	ldr	r3, [pc, #696]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80067dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067f2:	4622      	mov	r2, r4
 80067f4:	462b      	mov	r3, r5
 80067f6:	f04f 0000 	mov.w	r0, #0
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	0159      	lsls	r1, r3, #5
 8006800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006804:	0150      	lsls	r0, r2, #5
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4621      	mov	r1, r4
 800680c:	1a51      	subs	r1, r2, r1
 800680e:	6439      	str	r1, [r7, #64]	; 0x40
 8006810:	4629      	mov	r1, r5
 8006812:	eb63 0301 	sbc.w	r3, r3, r1
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006824:	4649      	mov	r1, r9
 8006826:	018b      	lsls	r3, r1, #6
 8006828:	4641      	mov	r1, r8
 800682a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800682e:	4641      	mov	r1, r8
 8006830:	018a      	lsls	r2, r1, #6
 8006832:	4641      	mov	r1, r8
 8006834:	1a51      	subs	r1, r2, r1
 8006836:	63b9      	str	r1, [r7, #56]	; 0x38
 8006838:	4649      	mov	r1, r9
 800683a:	eb63 0301 	sbc.w	r3, r3, r1
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800684c:	4649      	mov	r1, r9
 800684e:	00cb      	lsls	r3, r1, #3
 8006850:	4641      	mov	r1, r8
 8006852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006856:	4641      	mov	r1, r8
 8006858:	00ca      	lsls	r2, r1, #3
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	4603      	mov	r3, r0
 8006860:	4622      	mov	r2, r4
 8006862:	189b      	adds	r3, r3, r2
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
 8006866:	462b      	mov	r3, r5
 8006868:	460a      	mov	r2, r1
 800686a:	eb42 0303 	adc.w	r3, r2, r3
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800687c:	4629      	mov	r1, r5
 800687e:	024b      	lsls	r3, r1, #9
 8006880:	4621      	mov	r1, r4
 8006882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006886:	4621      	mov	r1, r4
 8006888:	024a      	lsls	r2, r1, #9
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006892:	2200      	movs	r2, #0
 8006894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800689c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80068a0:	f7fa fa12 	bl	8000cc8 <__aeabi_uldivmod>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4613      	mov	r3, r2
 80068aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ae:	e067      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b0:	4b75      	ldr	r3, [pc, #468]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	099b      	lsrs	r3, r3, #6
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80068c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ca:	2300      	movs	r3, #0
 80068cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80068d2:	4622      	mov	r2, r4
 80068d4:	462b      	mov	r3, r5
 80068d6:	f04f 0000 	mov.w	r0, #0
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	0159      	lsls	r1, r3, #5
 80068e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e4:	0150      	lsls	r0, r2, #5
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4621      	mov	r1, r4
 80068ec:	1a51      	subs	r1, r2, r1
 80068ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80068f0:	4629      	mov	r1, r5
 80068f2:	eb63 0301 	sbc.w	r3, r3, r1
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006904:	4649      	mov	r1, r9
 8006906:	018b      	lsls	r3, r1, #6
 8006908:	4641      	mov	r1, r8
 800690a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800690e:	4641      	mov	r1, r8
 8006910:	018a      	lsls	r2, r1, #6
 8006912:	4641      	mov	r1, r8
 8006914:	ebb2 0a01 	subs.w	sl, r2, r1
 8006918:	4649      	mov	r1, r9
 800691a:	eb63 0b01 	sbc.w	fp, r3, r1
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800692a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800692e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006932:	4692      	mov	sl, r2
 8006934:	469b      	mov	fp, r3
 8006936:	4623      	mov	r3, r4
 8006938:	eb1a 0303 	adds.w	r3, sl, r3
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	462b      	mov	r3, r5
 8006940:	eb4b 0303 	adc.w	r3, fp, r3
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006952:	4629      	mov	r1, r5
 8006954:	028b      	lsls	r3, r1, #10
 8006956:	4621      	mov	r1, r4
 8006958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800695c:	4621      	mov	r1, r4
 800695e:	028a      	lsls	r2, r1, #10
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006968:	2200      	movs	r2, #0
 800696a:	673b      	str	r3, [r7, #112]	; 0x70
 800696c:	677a      	str	r2, [r7, #116]	; 0x74
 800696e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006972:	f7fa f9a9 	bl	8000cc8 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4613      	mov	r3, r2
 800697c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006980:	4b41      	ldr	r3, [pc, #260]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	3301      	adds	r3, #1
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069a2:	e0eb      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069a4:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069b0:	4b35      	ldr	r3, [pc, #212]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d06b      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069bc:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	099b      	lsrs	r3, r3, #6
 80069c2:	2200      	movs	r2, #0
 80069c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	663b      	str	r3, [r7, #96]	; 0x60
 80069d0:	2300      	movs	r3, #0
 80069d2:	667b      	str	r3, [r7, #100]	; 0x64
 80069d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80069d8:	4622      	mov	r2, r4
 80069da:	462b      	mov	r3, r5
 80069dc:	f04f 0000 	mov.w	r0, #0
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	0159      	lsls	r1, r3, #5
 80069e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ea:	0150      	lsls	r0, r2, #5
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4621      	mov	r1, r4
 80069f2:	1a51      	subs	r1, r2, r1
 80069f4:	61b9      	str	r1, [r7, #24]
 80069f6:	4629      	mov	r1, r5
 80069f8:	eb63 0301 	sbc.w	r3, r3, r1
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	018b      	lsls	r3, r1, #6
 8006a0e:	4651      	mov	r1, sl
 8006a10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a14:	4651      	mov	r1, sl
 8006a16:	018a      	lsls	r2, r1, #6
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ebb2 0801 	subs.w	r8, r2, r1
 8006a1e:	4659      	mov	r1, fp
 8006a20:	eb63 0901 	sbc.w	r9, r3, r1
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a38:	4690      	mov	r8, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	eb18 0303 	adds.w	r3, r8, r3
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	462b      	mov	r3, r5
 8006a46:	eb49 0303 	adc.w	r3, r9, r3
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a58:	4629      	mov	r1, r5
 8006a5a:	024b      	lsls	r3, r1, #9
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a62:	4621      	mov	r1, r4
 8006a64:	024a      	lsls	r2, r1, #9
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6e:	2200      	movs	r2, #0
 8006a70:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a78:	f7fa f926 	bl	8000cc8 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a86:	e065      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x420>
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a94:	4b3d      	ldr	r3, [pc, #244]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x458>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	099b      	lsrs	r3, r3, #6
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8006aaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f04f 0100 	mov.w	r1, #0
 8006aba:	0159      	lsls	r1, r3, #5
 8006abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac0:	0150      	lsls	r0, r2, #5
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	1a51      	subs	r1, r2, r1
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	4649      	mov	r1, r9
 8006ace:	eb63 0301 	sbc.w	r3, r3, r1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	018b      	lsls	r3, r1, #6
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aea:	4651      	mov	r1, sl
 8006aec:	018a      	lsls	r2, r1, #6
 8006aee:	4651      	mov	r1, sl
 8006af0:	1a54      	subs	r4, r2, r1
 8006af2:	4659      	mov	r1, fp
 8006af4:	eb63 0501 	sbc.w	r5, r3, r1
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	00eb      	lsls	r3, r5, #3
 8006b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b06:	00e2      	lsls	r2, r4, #3
 8006b08:	4614      	mov	r4, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	4643      	mov	r3, r8
 8006b0e:	18e3      	adds	r3, r4, r3
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	464b      	mov	r3, r9
 8006b14:	eb45 0303 	adc.w	r3, r5, r3
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b26:	4629      	mov	r1, r5
 8006b28:	028b      	lsls	r3, r1, #10
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b30:	4621      	mov	r1, r4
 8006b32:	028a      	lsls	r2, r1, #10
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b46:	f7fa f8bf 	bl	8000cc8 <__aeabi_uldivmod>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4613      	mov	r3, r2
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x458>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	0f1b      	lsrs	r3, r3, #28
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b72:	e003      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	37b8      	adds	r7, #184	; 0xb8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	00f42400 	.word	0x00f42400

08006b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e28d      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8083 	beq.w	8006cba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bb4:	4b94      	ldr	r3, [pc, #592]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 030c 	and.w	r3, r3, #12
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d019      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bc0:	4b91      	ldr	r3, [pc, #580]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bcc:	4b8e      	ldr	r3, [pc, #568]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bda:	4b8b      	ldr	r3, [pc, #556]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d112      	bne.n	8006c0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006be6:	4b88      	ldr	r3, [pc, #544]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf2:	d10b      	bne.n	8006c0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf4:	4b84      	ldr	r3, [pc, #528]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d05b      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x124>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d157      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e25a      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d106      	bne.n	8006c24 <HAL_RCC_OscConfig+0x90>
 8006c16:	4b7c      	ldr	r3, [pc, #496]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7b      	ldr	r2, [pc, #492]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e01d      	b.n	8006c60 <HAL_RCC_OscConfig+0xcc>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c2c:	d10c      	bne.n	8006c48 <HAL_RCC_OscConfig+0xb4>
 8006c2e:	4b76      	ldr	r3, [pc, #472]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a75      	ldr	r2, [pc, #468]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	4b73      	ldr	r3, [pc, #460]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a72      	ldr	r2, [pc, #456]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e00b      	b.n	8006c60 <HAL_RCC_OscConfig+0xcc>
 8006c48:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a6e      	ldr	r2, [pc, #440]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	4b6c      	ldr	r3, [pc, #432]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a6b      	ldr	r2, [pc, #428]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d013      	beq.n	8006c90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fe f8b8 	bl	8004ddc <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c70:	f7fe f8b4 	bl	8004ddc <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b64      	cmp	r3, #100	; 0x64
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e21f      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c82:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCC_OscConfig+0xdc>
 8006c8e:	e014      	b.n	8006cba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fe f8a4 	bl	8004ddc <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c98:	f7fe f8a0 	bl	8004ddc <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	; 0x64
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e20b      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006caa:	4b57      	ldr	r3, [pc, #348]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x104>
 8006cb6:	e000      	b.n	8006cba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d06f      	beq.n	8006da6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cc6:	4b50      	ldr	r3, [pc, #320]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 030c 	and.w	r3, r3, #12
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d017      	beq.n	8006d02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cd2:	4b4d      	ldr	r3, [pc, #308]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d105      	bne.n	8006cea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cde:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cea:	4b47      	ldr	r3, [pc, #284]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cf2:	2b0c      	cmp	r3, #12
 8006cf4:	d11c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf6:	4b44      	ldr	r3, [pc, #272]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d116      	bne.n	8006d30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d02:	4b41      	ldr	r3, [pc, #260]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_RCC_OscConfig+0x186>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d001      	beq.n	8006d1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e1d3      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1a:	4b3b      	ldr	r3, [pc, #236]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4937      	ldr	r1, [pc, #220]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2e:	e03a      	b.n	8006da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d38:	4b34      	ldr	r3, [pc, #208]	; (8006e0c <HAL_RCC_OscConfig+0x278>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fe f84d 	bl	8004ddc <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d46:	f7fe f849 	bl	8004ddc <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e1b4      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d58:	4b2b      	ldr	r3, [pc, #172]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d64:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	4925      	ldr	r1, [pc, #148]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]
 8006d78:	e015      	b.n	8006da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <HAL_RCC_OscConfig+0x278>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fe f82c 	bl	8004ddc <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d88:	f7fe f828 	bl	8004ddc <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e193      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d036      	beq.n	8006e20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d016      	beq.n	8006de8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <HAL_RCC_OscConfig+0x27c>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc0:	f7fe f80c 	bl	8004ddc <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dc8:	f7fe f808 	bl	8004ddc <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e173      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <HAL_RCC_OscConfig+0x274>)
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x234>
 8006de6:	e01b      	b.n	8006e20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_RCC_OscConfig+0x27c>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dee:	f7fd fff5 	bl	8004ddc <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df4:	e00e      	b.n	8006e14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006df6:	f7fd fff1 	bl	8004ddc <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d907      	bls.n	8006e14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e15c      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	42470000 	.word	0x42470000
 8006e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e14:	4b8a      	ldr	r3, [pc, #552]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ea      	bne.n	8006df6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8097 	beq.w	8006f5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e32:	4b83      	ldr	r3, [pc, #524]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10f      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	4b7f      	ldr	r3, [pc, #508]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	4a7e      	ldr	r2, [pc, #504]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e4e:	4b7c      	ldr	r3, [pc, #496]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	4b79      	ldr	r3, [pc, #484]	; (8007044 <HAL_RCC_OscConfig+0x4b0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d118      	bne.n	8006e9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e6a:	4b76      	ldr	r3, [pc, #472]	; (8007044 <HAL_RCC_OscConfig+0x4b0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a75      	ldr	r2, [pc, #468]	; (8007044 <HAL_RCC_OscConfig+0x4b0>)
 8006e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e76:	f7fd ffb1 	bl	8004ddc <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e7e:	f7fd ffad 	bl	8004ddc <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e118      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e90:	4b6c      	ldr	r3, [pc, #432]	; (8007044 <HAL_RCC_OscConfig+0x4b0>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x31e>
 8006ea4:	4b66      	ldr	r3, [pc, #408]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4a65      	ldr	r2, [pc, #404]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb0:	e01c      	b.n	8006eec <HAL_RCC_OscConfig+0x358>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x340>
 8006eba:	4b61      	ldr	r3, [pc, #388]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	4a60      	ldr	r2, [pc, #384]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec6:	4b5e      	ldr	r3, [pc, #376]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	4a5d      	ldr	r2, [pc, #372]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed2:	e00b      	b.n	8006eec <HAL_RCC_OscConfig+0x358>
 8006ed4:	4b5a      	ldr	r3, [pc, #360]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a59      	ldr	r2, [pc, #356]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	4b57      	ldr	r3, [pc, #348]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	4a56      	ldr	r2, [pc, #344]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ee6:	f023 0304 	bic.w	r3, r3, #4
 8006eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d015      	beq.n	8006f20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef4:	f7fd ff72 	bl	8004ddc <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efa:	e00a      	b.n	8006f12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efc:	f7fd ff6e 	bl	8004ddc <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e0d7      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f12:	4b4b      	ldr	r3, [pc, #300]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ee      	beq.n	8006efc <HAL_RCC_OscConfig+0x368>
 8006f1e:	e014      	b.n	8006f4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f20:	f7fd ff5c 	bl	8004ddc <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f26:	e00a      	b.n	8006f3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f28:	f7fd ff58 	bl	8004ddc <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e0c1      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f3e:	4b40      	ldr	r3, [pc, #256]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ee      	bne.n	8006f28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f50:	4b3b      	ldr	r3, [pc, #236]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	4a3a      	ldr	r2, [pc, #232]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80ad 	beq.w	80070c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f66:	4b36      	ldr	r3, [pc, #216]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 030c 	and.w	r3, r3, #12
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d060      	beq.n	8007034 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d145      	bne.n	8007006 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7a:	4b33      	ldr	r3, [pc, #204]	; (8007048 <HAL_RCC_OscConfig+0x4b4>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fd ff2c 	bl	8004ddc <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fd ff28 	bl	8004ddc <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e093      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9a:	4b29      	ldr	r3, [pc, #164]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	071b      	lsls	r3, r3, #28
 8006fd2:	491b      	ldr	r1, [pc, #108]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <HAL_RCC_OscConfig+0x4b4>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fd fefd 	bl	8004ddc <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe6:	f7fd fef9 	bl	8004ddc <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e064      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff8:	4b11      	ldr	r3, [pc, #68]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x452>
 8007004:	e05c      	b.n	80070c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <HAL_RCC_OscConfig+0x4b4>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fd fee6 	bl	8004ddc <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007014:	f7fd fee2 	bl	8004ddc <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e04d      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <HAL_RCC_OscConfig+0x4ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x480>
 8007032:	e045      	b.n	80070c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d107      	bne.n	800704c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e040      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
 8007040:	40023800 	.word	0x40023800
 8007044:	40007000 	.word	0x40007000
 8007048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800704c:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <HAL_RCC_OscConfig+0x538>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d030      	beq.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007064:	429a      	cmp	r2, r3
 8007066:	d129      	bne.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d122      	bne.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007084:	4293      	cmp	r3, r2
 8007086:	d119      	bne.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	3b01      	subs	r3, #1
 8007096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007098:	429a      	cmp	r2, r3
 800709a:	d10f      	bne.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d107      	bne.n	80070bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d001      	beq.n	80070c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40023800 	.word	0x40023800

080070d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e03f      	b.n	8007162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fd fc80 	bl	80049fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2224      	movs	r2, #36	; 0x24
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd7b 	bl	8007c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695a      	ldr	r2, [r3, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b08a      	sub	sp, #40	; 0x28
 800716e:	af02      	add	r7, sp, #8
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b20      	cmp	r3, #32
 8007188:	d17c      	bne.n	8007284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_UART_Transmit+0x2c>
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e075      	b.n	8007286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_UART_Transmit+0x3e>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e06e      	b.n	8007286 <HAL_UART_Transmit+0x11c>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2221      	movs	r2, #33	; 0x21
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071be:	f7fd fe0d 	bl	8004ddc <HAL_GetTick>
 80071c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	88fa      	ldrh	r2, [r7, #6]
 80071ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	d108      	bne.n	80071ec <HAL_UART_Transmit+0x82>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e003      	b.n	80071f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071fc:	e02a      	b.n	8007254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 faf9 	bl	8007800 <UART_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e036      	b.n	8007286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800722c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3302      	adds	r3, #2
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e007      	b.n	8007246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1cf      	bne.n	80071fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2140      	movs	r1, #64	; 0x40
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fac9 	bl	8007800 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e006      	b.n	8007286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b0ba      	sub	sp, #232	; 0xe8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10f      	bne.n	80072f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_UART_IRQHandler+0x66>
 80072e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fbd3 	bl	8007a9a <UART_Receive_IT>
      return;
 80072f4:	e256      	b.n	80077a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80de 	beq.w	80074bc <HAL_UART_IRQHandler+0x22c>
 8007300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80d1 	beq.w	80074bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <HAL_UART_IRQHandler+0xae>
 8007326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f043 0201 	orr.w	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <HAL_UART_IRQHandler+0xd2>
 800734a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f043 0202 	orr.w	r2, r3, #2
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <HAL_UART_IRQHandler+0xf6>
 800736e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f043 0204 	orr.w	r2, r3, #4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <HAL_UART_IRQHandler+0x126>
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800739e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f043 0208 	orr.w	r2, r3, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 81ed 	beq.w	800779a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_UART_IRQHandler+0x14e>
 80073cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fb5e 	bl	8007a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	bf0c      	ite	eq
 80073ec:	2301      	moveq	r3, #1
 80073ee:	2300      	movne	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <HAL_UART_IRQHandler+0x17a>
 8007402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007406:	2b00      	cmp	r3, #0
 8007408:	d04f      	beq.n	80074aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa66 	bl	80078dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d141      	bne.n	80074a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3314      	adds	r3, #20
 8007424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800743c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800744a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800744e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1d9      	bne.n	800741e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d013      	beq.n	800749a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	4a7d      	ldr	r2, [pc, #500]	; (800766c <HAL_UART_IRQHandler+0x3dc>)
 8007478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd fe5d 	bl	800513e <HAL_DMA_Abort_IT>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d016      	beq.n	80074b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	e00e      	b.n	80074b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f99a 	bl	80077d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a0:	e00a      	b.n	80074b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f996 	bl	80077d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a8:	e006      	b.n	80074b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f992 	bl	80077d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074b6:	e170      	b.n	800779a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b8:	bf00      	nop
    return;
 80074ba:	e16e      	b.n	800779a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	f040 814a 	bne.w	800775a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 8143 	beq.w	800775a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 813c 	beq.w	800775a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074e2:	2300      	movs	r3, #0
 80074e4:	60bb      	str	r3, [r7, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	f040 80b4 	bne.w	8007670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8140 	beq.w	800779e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007526:	429a      	cmp	r2, r3
 8007528:	f080 8139 	bcs.w	800779e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753e:	f000 8088 	beq.w	8007652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800755c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800756e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800757a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1d9      	bne.n	8007542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800759e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3314      	adds	r3, #20
 80075ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e1      	bne.n	800758e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3314      	adds	r3, #20
 80075d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3314      	adds	r3, #20
 80075ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e3      	bne.n	80075ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007622:	f023 0310 	bic.w	r3, r3, #16
 8007626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007634:	65ba      	str	r2, [r7, #88]	; 0x58
 8007636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800763a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e3      	bne.n	8007610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd fd06 	bl	800505e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800765a:	b29b      	uxth	r3, r3
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	b29b      	uxth	r3, r3
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8c0 	bl	80077e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007668:	e099      	b.n	800779e <HAL_UART_IRQHandler+0x50e>
 800766a:	bf00      	nop
 800766c:	080079a3 	.word	0x080079a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007678:	b29b      	uxth	r3, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 808b 	beq.w	80077a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800768c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8086 	beq.w	80077a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076ba:	647a      	str	r2, [r7, #68]	; 0x44
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e3      	bne.n	8007696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3314      	adds	r3, #20
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	623b      	str	r3, [r7, #32]
   return(result);
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f023 0301 	bic.w	r3, r3, #1
 80076e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076f2:	633a      	str	r2, [r7, #48]	; 0x30
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	60fb      	str	r3, [r7, #12]
   return(result);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0310 	bic.w	r3, r3, #16
 800772a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007738:	61fa      	str	r2, [r7, #28]
 800773a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	69b9      	ldr	r1, [r7, #24]
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	617b      	str	r3, [r7, #20]
   return(result);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e3      	bne.n	8007714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800774c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f848 	bl	80077e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007758:	e023      	b.n	80077a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_UART_IRQHandler+0x4ea>
 8007766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f929 	bl	80079ca <UART_Transmit_IT>
    return;
 8007778:	e014      	b.n	80077a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00e      	beq.n	80077a4 <HAL_UART_IRQHandler+0x514>
 8007786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d008      	beq.n	80077a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f969 	bl	8007a6a <UART_EndTransmit_IT>
    return;
 8007798:	e004      	b.n	80077a4 <HAL_UART_IRQHandler+0x514>
    return;
 800779a:	bf00      	nop
 800779c:	e002      	b.n	80077a4 <HAL_UART_IRQHandler+0x514>
      return;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <HAL_UART_IRQHandler+0x514>
      return;
 80077a2:	bf00      	nop
  }
}
 80077a4:	37e8      	adds	r7, #232	; 0xe8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b090      	sub	sp, #64	; 0x40
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007810:	e050      	b.n	80078b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d04c      	beq.n	80078b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	2b00      	cmp	r3, #0
 800781e:	d007      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x30>
 8007820:	f7fd fadc 	bl	8004ddc <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800782c:	429a      	cmp	r2, r3
 800782e:	d241      	bcs.n	80078b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007850:	637a      	str	r2, [r7, #52]	; 0x34
 8007852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	613b      	str	r3, [r7, #16]
   return(result);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	63bb      	str	r3, [r7, #56]	; 0x38
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007884:	623a      	str	r2, [r7, #32]
 8007886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69f9      	ldr	r1, [r7, #28]
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	61bb      	str	r3, [r7, #24]
   return(result);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e00f      	b.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4013      	ands	r3, r2
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d09f      	beq.n	8007812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3740      	adds	r7, #64	; 0x40
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b095      	sub	sp, #84	; 0x54
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007904:	643a      	str	r2, [r7, #64]	; 0x40
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800790a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3314      	adds	r3, #20
 800791e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	61fb      	str	r3, [r7, #28]
   return(result);
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3314      	adds	r3, #20
 8007936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800793e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e5      	bne.n	8007918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	2b01      	cmp	r3, #1
 8007952:	d119      	bne.n	8007988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60bb      	str	r3, [r7, #8]
   return(result);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f023 0310 	bic.w	r3, r3, #16
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007974:	61ba      	str	r2, [r7, #24]
 8007976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6979      	ldr	r1, [r7, #20]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	613b      	str	r3, [r7, #16]
   return(result);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007996:	bf00      	nop
 8007998:	3754      	adds	r7, #84	; 0x54
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff ff09 	bl	80077d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b21      	cmp	r3, #33	; 0x21
 80079dc:	d13e      	bne.n	8007a5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	d114      	bne.n	8007a12 <UART_Transmit_IT+0x48>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d110      	bne.n	8007a12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	621a      	str	r2, [r3, #32]
 8007a10:	e008      	b.n	8007a24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	1c59      	adds	r1, r3, #1
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6211      	str	r1, [r2, #32]
 8007a1c:	781a      	ldrb	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4619      	mov	r1, r3
 8007a32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10f      	bne.n	8007a58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e000      	b.n	8007a5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fe8e 	bl	80077ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b08c      	sub	sp, #48	; 0x30
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b22      	cmp	r3, #34	; 0x22
 8007aac:	f040 80ab 	bne.w	8007c06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab8:	d117      	bne.n	8007aea <UART_Receive_IT+0x50>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d113      	bne.n	8007aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ae8:	e026      	b.n	8007b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d007      	beq.n	8007b0e <UART_Receive_IT+0x74>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10a      	bne.n	8007b1c <UART_Receive_IT+0x82>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e008      	b.n	8007b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4619      	mov	r1, r3
 8007b46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d15a      	bne.n	8007c02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0220 	bic.w	r2, r2, #32
 8007b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695a      	ldr	r2, [r3, #20]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d135      	bne.n	8007bf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f023 0310 	bic.w	r3, r3, #16
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	623a      	str	r2, [r7, #32]
 8007bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	69f9      	ldr	r1, [r7, #28]
 8007bb8:	6a3a      	ldr	r2, [r7, #32]
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d10a      	bne.n	8007bea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff fdf9 	bl	80077e8 <HAL_UARTEx_RxEventCallback>
 8007bf6:	e002      	b.n	8007bfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fde1 	bl	80077c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e002      	b.n	8007c08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3730      	adds	r7, #48	; 0x30
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c14:	b0c0      	sub	sp, #256	; 0x100
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	68d9      	ldr	r1, [r3, #12]
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	ea40 0301 	orr.w	r3, r0, r1
 8007c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c68:	f021 010c 	bic.w	r1, r1, #12
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c76:	430b      	orrs	r3, r1
 8007c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	6999      	ldr	r1, [r3, #24]
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	ea40 0301 	orr.w	r3, r0, r1
 8007c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b8f      	ldr	r3, [pc, #572]	; (8007edc <UART_SetConfig+0x2cc>)
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d005      	beq.n	8007cb0 <UART_SetConfig+0xa0>
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b8d      	ldr	r3, [pc, #564]	; (8007ee0 <UART_SetConfig+0x2d0>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d104      	bne.n	8007cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb0:	f7fe fd2c 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8007cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cb8:	e003      	b.n	8007cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cba:	f7fe fd13 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8007cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ccc:	f040 810c 	bne.w	8007ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	1891      	adds	r1, r2, r2
 8007ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cea:	415b      	adcs	r3, r3
 8007cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	eb12 0801 	adds.w	r8, r2, r1
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	eb43 0901 	adc.w	r9, r3, r1
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d12:	4690      	mov	r8, r2
 8007d14:	4699      	mov	r9, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	eb18 0303 	adds.w	r3, r8, r3
 8007d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d20:	462b      	mov	r3, r5
 8007d22:	eb49 0303 	adc.w	r3, r9, r3
 8007d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d3e:	460b      	mov	r3, r1
 8007d40:	18db      	adds	r3, r3, r3
 8007d42:	653b      	str	r3, [r7, #80]	; 0x50
 8007d44:	4613      	mov	r3, r2
 8007d46:	eb42 0303 	adc.w	r3, r2, r3
 8007d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d54:	f7f8 ffb8 	bl	8000cc8 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	011c      	lsls	r4, r3, #4
 8007d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	1891      	adds	r1, r2, r2
 8007d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d80:	415b      	adcs	r3, r3
 8007d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d88:	4641      	mov	r1, r8
 8007d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d8e:	4649      	mov	r1, r9
 8007d90:	eb43 0b01 	adc.w	fp, r3, r1
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da8:	4692      	mov	sl, r2
 8007daa:	469b      	mov	fp, r3
 8007dac:	4643      	mov	r3, r8
 8007dae:	eb1a 0303 	adds.w	r3, sl, r3
 8007db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007db6:	464b      	mov	r3, r9
 8007db8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	18db      	adds	r3, r3, r3
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dda:	4613      	mov	r3, r2
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	647b      	str	r3, [r7, #68]	; 0x44
 8007de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dea:	f7f8 ff6d 	bl	8000cc8 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <UART_SetConfig+0x2d4>)
 8007df6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2264      	movs	r2, #100	; 0x64
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	1acb      	subs	r3, r1, r3
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e0a:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <UART_SetConfig+0x2d4>)
 8007e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e18:	441c      	add	r4, r3
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e34:	415b      	adcs	r3, r3
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	1851      	adds	r1, r2, r1
 8007e40:	6339      	str	r1, [r7, #48]	; 0x30
 8007e42:	4649      	mov	r1, r9
 8007e44:	414b      	adcs	r3, r1
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e54:	4659      	mov	r1, fp
 8007e56:	00cb      	lsls	r3, r1, #3
 8007e58:	4651      	mov	r1, sl
 8007e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5e:	4651      	mov	r1, sl
 8007e60:	00ca      	lsls	r2, r1, #3
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e70:	464b      	mov	r3, r9
 8007e72:	460a      	mov	r2, r1
 8007e74:	eb42 0303 	adc.w	r3, r2, r3
 8007e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e90:	460b      	mov	r3, r1
 8007e92:	18db      	adds	r3, r3, r3
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e96:	4613      	mov	r3, r2
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ea6:	f7f8 ff0f 	bl	8000cc8 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <UART_SetConfig+0x2d4>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	; 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	3332      	adds	r3, #50	; 0x32
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <UART_SetConfig+0x2d4>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	f003 0207 	and.w	r2, r3, #7
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4422      	add	r2, r4
 8007ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ed8:	e105      	b.n	80080e6 <UART_SetConfig+0x4d6>
 8007eda:	bf00      	nop
 8007edc:	40011000 	.word	0x40011000
 8007ee0:	40011400 	.word	0x40011400
 8007ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	1891      	adds	r1, r2, r2
 8007f00:	6239      	str	r1, [r7, #32]
 8007f02:	415b      	adcs	r3, r3
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
 8007f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	1854      	adds	r4, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0501 	adc.w	r5, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	00eb      	lsls	r3, r5, #3
 8007f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f22:	00e2      	lsls	r2, r4, #3
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	4643      	mov	r3, r8
 8007f2a:	18e3      	adds	r3, r4, r3
 8007f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f30:	464b      	mov	r3, r9
 8007f32:	eb45 0303 	adc.w	r3, r5, r3
 8007f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f56:	4629      	mov	r1, r5
 8007f58:	008b      	lsls	r3, r1, #2
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f60:	4621      	mov	r1, r4
 8007f62:	008a      	lsls	r2, r1, #2
 8007f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f68:	f7f8 feae 	bl	8000cc8 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4b60      	ldr	r3, [pc, #384]	; (80080f4 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2302 	umull	r2, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	011c      	lsls	r4, r3, #4
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	1891      	adds	r1, r2, r2
 8007f92:	61b9      	str	r1, [r7, #24]
 8007f94:	415b      	adcs	r3, r3
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	6139      	str	r1, [r7, #16]
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	414b      	adcs	r3, r1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	00cb      	lsls	r3, r1, #3
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	00ca      	lsls	r2, r1, #3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4642      	mov	r2, r8
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	eb42 0303 	adc.w	r3, r2, r3
 8007fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	008b      	lsls	r3, r1, #2
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffe:	4641      	mov	r1, r8
 8008000:	008a      	lsls	r2, r1, #2
 8008002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008006:	f7f8 fe5f 	bl	8000cc8 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <UART_SetConfig+0x4e4>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	; 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	3332      	adds	r3, #50	; 0x32
 8008022:	4a34      	ldr	r2, [pc, #208]	; (80080f4 <UART_SetConfig+0x4e4>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800802e:	441c      	add	r4, r3
 8008030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008034:	2200      	movs	r2, #0
 8008036:	673b      	str	r3, [r7, #112]	; 0x70
 8008038:	677a      	str	r2, [r7, #116]	; 0x74
 800803a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	1891      	adds	r1, r2, r2
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	415b      	adcs	r3, r3
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800804e:	4641      	mov	r1, r8
 8008050:	1851      	adds	r1, r2, r1
 8008052:	6039      	str	r1, [r7, #0]
 8008054:	4649      	mov	r1, r9
 8008056:	414b      	adcs	r3, r1
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008066:	4659      	mov	r1, fp
 8008068:	00cb      	lsls	r3, r1, #3
 800806a:	4651      	mov	r1, sl
 800806c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008070:	4651      	mov	r1, sl
 8008072:	00ca      	lsls	r2, r1, #3
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	4603      	mov	r3, r0
 800807a:	4642      	mov	r2, r8
 800807c:	189b      	adds	r3, r3, r2
 800807e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008080:	464b      	mov	r3, r9
 8008082:	460a      	mov	r2, r1
 8008084:	eb42 0303 	adc.w	r3, r2, r3
 8008088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800808a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	663b      	str	r3, [r7, #96]	; 0x60
 8008094:	667a      	str	r2, [r7, #100]	; 0x64
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080a2:	4649      	mov	r1, r9
 80080a4:	008b      	lsls	r3, r1, #2
 80080a6:	4641      	mov	r1, r8
 80080a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ac:	4641      	mov	r1, r8
 80080ae:	008a      	lsls	r2, r1, #2
 80080b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080b4:	f7f8 fe08 	bl	8000cc8 <__aeabi_uldivmod>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <UART_SetConfig+0x4e4>)
 80080be:	fba3 1302 	umull	r1, r3, r3, r2
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	2164      	movs	r1, #100	; 0x64
 80080c6:	fb01 f303 	mul.w	r3, r1, r3
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	3332      	adds	r3, #50	; 0x32
 80080d0:	4a08      	ldr	r2, [pc, #32]	; (80080f4 <UART_SetConfig+0x4e4>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	f003 020f 	and.w	r2, r3, #15
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4422      	add	r2, r4
 80080e4:	609a      	str	r2, [r3, #8]
}
 80080e6:	bf00      	nop
 80080e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080ec:	46bd      	mov	sp, r7
 80080ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f2:	bf00      	nop
 80080f4:	51eb851f 	.word	0x51eb851f

080080f8 <__errno>:
 80080f8:	4b01      	ldr	r3, [pc, #4]	; (8008100 <__errno+0x8>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000010 	.word	0x20000010

08008104 <__libc_init_array>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4d0d      	ldr	r5, [pc, #52]	; (800813c <__libc_init_array+0x38>)
 8008108:	4c0d      	ldr	r4, [pc, #52]	; (8008140 <__libc_init_array+0x3c>)
 800810a:	1b64      	subs	r4, r4, r5
 800810c:	10a4      	asrs	r4, r4, #2
 800810e:	2600      	movs	r6, #0
 8008110:	42a6      	cmp	r6, r4
 8008112:	d109      	bne.n	8008128 <__libc_init_array+0x24>
 8008114:	4d0b      	ldr	r5, [pc, #44]	; (8008144 <__libc_init_array+0x40>)
 8008116:	4c0c      	ldr	r4, [pc, #48]	; (8008148 <__libc_init_array+0x44>)
 8008118:	f005 fc38 	bl	800d98c <_init>
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	2600      	movs	r6, #0
 8008122:	42a6      	cmp	r6, r4
 8008124:	d105      	bne.n	8008132 <__libc_init_array+0x2e>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	f855 3b04 	ldr.w	r3, [r5], #4
 800812c:	4798      	blx	r3
 800812e:	3601      	adds	r6, #1
 8008130:	e7ee      	b.n	8008110 <__libc_init_array+0xc>
 8008132:	f855 3b04 	ldr.w	r3, [r5], #4
 8008136:	4798      	blx	r3
 8008138:	3601      	adds	r6, #1
 800813a:	e7f2      	b.n	8008122 <__libc_init_array+0x1e>
 800813c:	0800dfd8 	.word	0x0800dfd8
 8008140:	0800dfd8 	.word	0x0800dfd8
 8008144:	0800dfd8 	.word	0x0800dfd8
 8008148:	0800dfdc 	.word	0x0800dfdc

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <memset>:
 8008168:	4402      	add	r2, r0
 800816a:	4603      	mov	r3, r0
 800816c:	4293      	cmp	r3, r2
 800816e:	d100      	bne.n	8008172 <memset+0xa>
 8008170:	4770      	bx	lr
 8008172:	f803 1b01 	strb.w	r1, [r3], #1
 8008176:	e7f9      	b.n	800816c <memset+0x4>

08008178 <__cvt>:
 8008178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	ec55 4b10 	vmov	r4, r5, d0
 8008180:	2d00      	cmp	r5, #0
 8008182:	460e      	mov	r6, r1
 8008184:	4619      	mov	r1, r3
 8008186:	462b      	mov	r3, r5
 8008188:	bfbb      	ittet	lt
 800818a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800818e:	461d      	movlt	r5, r3
 8008190:	2300      	movge	r3, #0
 8008192:	232d      	movlt	r3, #45	; 0x2d
 8008194:	700b      	strb	r3, [r1, #0]
 8008196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008198:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800819c:	4691      	mov	r9, r2
 800819e:	f023 0820 	bic.w	r8, r3, #32
 80081a2:	bfbc      	itt	lt
 80081a4:	4622      	movlt	r2, r4
 80081a6:	4614      	movlt	r4, r2
 80081a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081ac:	d005      	beq.n	80081ba <__cvt+0x42>
 80081ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081b2:	d100      	bne.n	80081b6 <__cvt+0x3e>
 80081b4:	3601      	adds	r6, #1
 80081b6:	2102      	movs	r1, #2
 80081b8:	e000      	b.n	80081bc <__cvt+0x44>
 80081ba:	2103      	movs	r1, #3
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	ab02      	add	r3, sp, #8
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	ec45 4b10 	vmov	d0, r4, r5
 80081c8:	4653      	mov	r3, sl
 80081ca:	4632      	mov	r2, r6
 80081cc:	f001 fefc 	bl	8009fc8 <_dtoa_r>
 80081d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081d4:	4607      	mov	r7, r0
 80081d6:	d102      	bne.n	80081de <__cvt+0x66>
 80081d8:	f019 0f01 	tst.w	r9, #1
 80081dc:	d022      	beq.n	8008224 <__cvt+0xac>
 80081de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081e2:	eb07 0906 	add.w	r9, r7, r6
 80081e6:	d110      	bne.n	800820a <__cvt+0x92>
 80081e8:	783b      	ldrb	r3, [r7, #0]
 80081ea:	2b30      	cmp	r3, #48	; 0x30
 80081ec:	d10a      	bne.n	8008204 <__cvt+0x8c>
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f8 fc87 	bl	8000b08 <__aeabi_dcmpeq>
 80081fa:	b918      	cbnz	r0, 8008204 <__cvt+0x8c>
 80081fc:	f1c6 0601 	rsb	r6, r6, #1
 8008200:	f8ca 6000 	str.w	r6, [sl]
 8008204:	f8da 3000 	ldr.w	r3, [sl]
 8008208:	4499      	add	r9, r3
 800820a:	2200      	movs	r2, #0
 800820c:	2300      	movs	r3, #0
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8008216:	b108      	cbz	r0, 800821c <__cvt+0xa4>
 8008218:	f8cd 900c 	str.w	r9, [sp, #12]
 800821c:	2230      	movs	r2, #48	; 0x30
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	454b      	cmp	r3, r9
 8008222:	d307      	bcc.n	8008234 <__cvt+0xbc>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008228:	1bdb      	subs	r3, r3, r7
 800822a:	4638      	mov	r0, r7
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	b004      	add	sp, #16
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	1c59      	adds	r1, r3, #1
 8008236:	9103      	str	r1, [sp, #12]
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e7f0      	b.n	800821e <__cvt+0xa6>

0800823c <__exponent>:
 800823c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800823e:	4603      	mov	r3, r0
 8008240:	2900      	cmp	r1, #0
 8008242:	bfb8      	it	lt
 8008244:	4249      	neglt	r1, r1
 8008246:	f803 2b02 	strb.w	r2, [r3], #2
 800824a:	bfb4      	ite	lt
 800824c:	222d      	movlt	r2, #45	; 0x2d
 800824e:	222b      	movge	r2, #43	; 0x2b
 8008250:	2909      	cmp	r1, #9
 8008252:	7042      	strb	r2, [r0, #1]
 8008254:	dd2a      	ble.n	80082ac <__exponent+0x70>
 8008256:	f10d 0407 	add.w	r4, sp, #7
 800825a:	46a4      	mov	ip, r4
 800825c:	270a      	movs	r7, #10
 800825e:	46a6      	mov	lr, r4
 8008260:	460a      	mov	r2, r1
 8008262:	fb91 f6f7 	sdiv	r6, r1, r7
 8008266:	fb07 1516 	mls	r5, r7, r6, r1
 800826a:	3530      	adds	r5, #48	; 0x30
 800826c:	2a63      	cmp	r2, #99	; 0x63
 800826e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008272:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008276:	4631      	mov	r1, r6
 8008278:	dcf1      	bgt.n	800825e <__exponent+0x22>
 800827a:	3130      	adds	r1, #48	; 0x30
 800827c:	f1ae 0502 	sub.w	r5, lr, #2
 8008280:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008284:	1c44      	adds	r4, r0, #1
 8008286:	4629      	mov	r1, r5
 8008288:	4561      	cmp	r1, ip
 800828a:	d30a      	bcc.n	80082a2 <__exponent+0x66>
 800828c:	f10d 0209 	add.w	r2, sp, #9
 8008290:	eba2 020e 	sub.w	r2, r2, lr
 8008294:	4565      	cmp	r5, ip
 8008296:	bf88      	it	hi
 8008298:	2200      	movhi	r2, #0
 800829a:	4413      	add	r3, r2
 800829c:	1a18      	subs	r0, r3, r0
 800829e:	b003      	add	sp, #12
 80082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082aa:	e7ed      	b.n	8008288 <__exponent+0x4c>
 80082ac:	2330      	movs	r3, #48	; 0x30
 80082ae:	3130      	adds	r1, #48	; 0x30
 80082b0:	7083      	strb	r3, [r0, #2]
 80082b2:	70c1      	strb	r1, [r0, #3]
 80082b4:	1d03      	adds	r3, r0, #4
 80082b6:	e7f1      	b.n	800829c <__exponent+0x60>

080082b8 <_printf_float>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ed2d 8b02 	vpush	{d8}
 80082c0:	b08d      	sub	sp, #52	; 0x34
 80082c2:	460c      	mov	r4, r1
 80082c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082c8:	4616      	mov	r6, r2
 80082ca:	461f      	mov	r7, r3
 80082cc:	4605      	mov	r5, r0
 80082ce:	f003 f98f 	bl	800b5f0 <_localeconv_r>
 80082d2:	f8d0 a000 	ldr.w	sl, [r0]
 80082d6:	4650      	mov	r0, sl
 80082d8:	f7f7 ff9a 	bl	8000210 <strlen>
 80082dc:	2300      	movs	r3, #0
 80082de:	930a      	str	r3, [sp, #40]	; 0x28
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	f8d8 3000 	ldr.w	r3, [r8]
 80082e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082ec:	3307      	adds	r3, #7
 80082ee:	f023 0307 	bic.w	r3, r3, #7
 80082f2:	f103 0208 	add.w	r2, r3, #8
 80082f6:	f8c8 2000 	str.w	r2, [r8]
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008302:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800830a:	9307      	str	r3, [sp, #28]
 800830c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008310:	ee08 0a10 	vmov	s16, r0
 8008314:	4b9f      	ldr	r3, [pc, #636]	; (8008594 <_printf_float+0x2dc>)
 8008316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
 800831e:	f7f8 fc25 	bl	8000b6c <__aeabi_dcmpun>
 8008322:	bb88      	cbnz	r0, 8008388 <_printf_float+0xd0>
 8008324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008328:	4b9a      	ldr	r3, [pc, #616]	; (8008594 <_printf_float+0x2dc>)
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	f7f8 fbff 	bl	8000b30 <__aeabi_dcmple>
 8008332:	bb48      	cbnz	r0, 8008388 <_printf_float+0xd0>
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f8 fbee 	bl	8000b1c <__aeabi_dcmplt>
 8008340:	b110      	cbz	r0, 8008348 <_printf_float+0x90>
 8008342:	232d      	movs	r3, #45	; 0x2d
 8008344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008348:	4b93      	ldr	r3, [pc, #588]	; (8008598 <_printf_float+0x2e0>)
 800834a:	4894      	ldr	r0, [pc, #592]	; (800859c <_printf_float+0x2e4>)
 800834c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008350:	bf94      	ite	ls
 8008352:	4698      	movls	r8, r3
 8008354:	4680      	movhi	r8, r0
 8008356:	2303      	movs	r3, #3
 8008358:	6123      	str	r3, [r4, #16]
 800835a:	9b05      	ldr	r3, [sp, #20]
 800835c:	f023 0204 	bic.w	r2, r3, #4
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	9700      	str	r7, [sp, #0]
 8008368:	4633      	mov	r3, r6
 800836a:	aa0b      	add	r2, sp, #44	; 0x2c
 800836c:	4621      	mov	r1, r4
 800836e:	4628      	mov	r0, r5
 8008370:	f000 f9d8 	bl	8008724 <_printf_common>
 8008374:	3001      	adds	r0, #1
 8008376:	f040 8090 	bne.w	800849a <_printf_float+0x1e2>
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	b00d      	add	sp, #52	; 0x34
 8008380:	ecbd 8b02 	vpop	{d8}
 8008384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	4640      	mov	r0, r8
 800838e:	4649      	mov	r1, r9
 8008390:	f7f8 fbec 	bl	8000b6c <__aeabi_dcmpun>
 8008394:	b140      	cbz	r0, 80083a8 <_printf_float+0xf0>
 8008396:	464b      	mov	r3, r9
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfbc      	itt	lt
 800839c:	232d      	movlt	r3, #45	; 0x2d
 800839e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083a2:	487f      	ldr	r0, [pc, #508]	; (80085a0 <_printf_float+0x2e8>)
 80083a4:	4b7f      	ldr	r3, [pc, #508]	; (80085a4 <_printf_float+0x2ec>)
 80083a6:	e7d1      	b.n	800834c <_printf_float+0x94>
 80083a8:	6863      	ldr	r3, [r4, #4]
 80083aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083ae:	9206      	str	r2, [sp, #24]
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	d13f      	bne.n	8008434 <_printf_float+0x17c>
 80083b4:	2306      	movs	r3, #6
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	9b05      	ldr	r3, [sp, #20]
 80083ba:	6861      	ldr	r1, [r4, #4]
 80083bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083c0:	2300      	movs	r3, #0
 80083c2:	9303      	str	r3, [sp, #12]
 80083c4:	ab0a      	add	r3, sp, #40	; 0x28
 80083c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083ca:	ab09      	add	r3, sp, #36	; 0x24
 80083cc:	ec49 8b10 	vmov	d0, r8, r9
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083d8:	4628      	mov	r0, r5
 80083da:	f7ff fecd 	bl	8008178 <__cvt>
 80083de:	9b06      	ldr	r3, [sp, #24]
 80083e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e2:	2b47      	cmp	r3, #71	; 0x47
 80083e4:	4680      	mov	r8, r0
 80083e6:	d108      	bne.n	80083fa <_printf_float+0x142>
 80083e8:	1cc8      	adds	r0, r1, #3
 80083ea:	db02      	blt.n	80083f2 <_printf_float+0x13a>
 80083ec:	6863      	ldr	r3, [r4, #4]
 80083ee:	4299      	cmp	r1, r3
 80083f0:	dd41      	ble.n	8008476 <_printf_float+0x1be>
 80083f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80083f6:	fa5f fb8b 	uxtb.w	fp, fp
 80083fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083fe:	d820      	bhi.n	8008442 <_printf_float+0x18a>
 8008400:	3901      	subs	r1, #1
 8008402:	465a      	mov	r2, fp
 8008404:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008408:	9109      	str	r1, [sp, #36]	; 0x24
 800840a:	f7ff ff17 	bl	800823c <__exponent>
 800840e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008410:	1813      	adds	r3, r2, r0
 8008412:	2a01      	cmp	r2, #1
 8008414:	4681      	mov	r9, r0
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	dc02      	bgt.n	8008420 <_printf_float+0x168>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	07d2      	lsls	r2, r2, #31
 800841e:	d501      	bpl.n	8008424 <_printf_float+0x16c>
 8008420:	3301      	adds	r3, #1
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008428:	2b00      	cmp	r3, #0
 800842a:	d09c      	beq.n	8008366 <_printf_float+0xae>
 800842c:	232d      	movs	r3, #45	; 0x2d
 800842e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008432:	e798      	b.n	8008366 <_printf_float+0xae>
 8008434:	9a06      	ldr	r2, [sp, #24]
 8008436:	2a47      	cmp	r2, #71	; 0x47
 8008438:	d1be      	bne.n	80083b8 <_printf_float+0x100>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1bc      	bne.n	80083b8 <_printf_float+0x100>
 800843e:	2301      	movs	r3, #1
 8008440:	e7b9      	b.n	80083b6 <_printf_float+0xfe>
 8008442:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008446:	d118      	bne.n	800847a <_printf_float+0x1c2>
 8008448:	2900      	cmp	r1, #0
 800844a:	6863      	ldr	r3, [r4, #4]
 800844c:	dd0b      	ble.n	8008466 <_printf_float+0x1ae>
 800844e:	6121      	str	r1, [r4, #16]
 8008450:	b913      	cbnz	r3, 8008458 <_printf_float+0x1a0>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	d502      	bpl.n	800845e <_printf_float+0x1a6>
 8008458:	3301      	adds	r3, #1
 800845a:	440b      	add	r3, r1
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	e7de      	b.n	8008424 <_printf_float+0x16c>
 8008466:	b913      	cbnz	r3, 800846e <_printf_float+0x1b6>
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	07d2      	lsls	r2, r2, #31
 800846c:	d501      	bpl.n	8008472 <_printf_float+0x1ba>
 800846e:	3302      	adds	r3, #2
 8008470:	e7f4      	b.n	800845c <_printf_float+0x1a4>
 8008472:	2301      	movs	r3, #1
 8008474:	e7f2      	b.n	800845c <_printf_float+0x1a4>
 8008476:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800847a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847c:	4299      	cmp	r1, r3
 800847e:	db05      	blt.n	800848c <_printf_float+0x1d4>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	6121      	str	r1, [r4, #16]
 8008484:	07d8      	lsls	r0, r3, #31
 8008486:	d5ea      	bpl.n	800845e <_printf_float+0x1a6>
 8008488:	1c4b      	adds	r3, r1, #1
 800848a:	e7e7      	b.n	800845c <_printf_float+0x1a4>
 800848c:	2900      	cmp	r1, #0
 800848e:	bfd4      	ite	le
 8008490:	f1c1 0202 	rsble	r2, r1, #2
 8008494:	2201      	movgt	r2, #1
 8008496:	4413      	add	r3, r2
 8008498:	e7e0      	b.n	800845c <_printf_float+0x1a4>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	055a      	lsls	r2, r3, #21
 800849e:	d407      	bmi.n	80084b0 <_printf_float+0x1f8>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	4642      	mov	r2, r8
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	d12c      	bne.n	8008508 <_printf_float+0x250>
 80084ae:	e764      	b.n	800837a <_printf_float+0xc2>
 80084b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084b4:	f240 80e0 	bls.w	8008678 <_printf_float+0x3c0>
 80084b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084bc:	2200      	movs	r2, #0
 80084be:	2300      	movs	r3, #0
 80084c0:	f7f8 fb22 	bl	8000b08 <__aeabi_dcmpeq>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d034      	beq.n	8008532 <_printf_float+0x27a>
 80084c8:	4a37      	ldr	r2, [pc, #220]	; (80085a8 <_printf_float+0x2f0>)
 80084ca:	2301      	movs	r3, #1
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f af51 	beq.w	800837a <_printf_float+0xc2>
 80084d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084dc:	429a      	cmp	r2, r3
 80084de:	db02      	blt.n	80084e6 <_printf_float+0x22e>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	07d8      	lsls	r0, r3, #31
 80084e4:	d510      	bpl.n	8008508 <_printf_float+0x250>
 80084e6:	ee18 3a10 	vmov	r3, s16
 80084ea:	4652      	mov	r2, sl
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	f43f af41 	beq.w	800837a <_printf_float+0xc2>
 80084f8:	f04f 0800 	mov.w	r8, #0
 80084fc:	f104 091a 	add.w	r9, r4, #26
 8008500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008502:	3b01      	subs	r3, #1
 8008504:	4543      	cmp	r3, r8
 8008506:	dc09      	bgt.n	800851c <_printf_float+0x264>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	079b      	lsls	r3, r3, #30
 800850c:	f100 8105 	bmi.w	800871a <_printf_float+0x462>
 8008510:	68e0      	ldr	r0, [r4, #12]
 8008512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008514:	4298      	cmp	r0, r3
 8008516:	bfb8      	it	lt
 8008518:	4618      	movlt	r0, r3
 800851a:	e730      	b.n	800837e <_printf_float+0xc6>
 800851c:	2301      	movs	r3, #1
 800851e:	464a      	mov	r2, r9
 8008520:	4631      	mov	r1, r6
 8008522:	4628      	mov	r0, r5
 8008524:	47b8      	blx	r7
 8008526:	3001      	adds	r0, #1
 8008528:	f43f af27 	beq.w	800837a <_printf_float+0xc2>
 800852c:	f108 0801 	add.w	r8, r8, #1
 8008530:	e7e6      	b.n	8008500 <_printf_float+0x248>
 8008532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	dc39      	bgt.n	80085ac <_printf_float+0x2f4>
 8008538:	4a1b      	ldr	r2, [pc, #108]	; (80085a8 <_printf_float+0x2f0>)
 800853a:	2301      	movs	r3, #1
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	47b8      	blx	r7
 8008542:	3001      	adds	r0, #1
 8008544:	f43f af19 	beq.w	800837a <_printf_float+0xc2>
 8008548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800854c:	4313      	orrs	r3, r2
 800854e:	d102      	bne.n	8008556 <_printf_float+0x29e>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d5d8      	bpl.n	8008508 <_printf_float+0x250>
 8008556:	ee18 3a10 	vmov	r3, s16
 800855a:	4652      	mov	r2, sl
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f af09 	beq.w	800837a <_printf_float+0xc2>
 8008568:	f04f 0900 	mov.w	r9, #0
 800856c:	f104 0a1a 	add.w	sl, r4, #26
 8008570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008572:	425b      	negs	r3, r3
 8008574:	454b      	cmp	r3, r9
 8008576:	dc01      	bgt.n	800857c <_printf_float+0x2c4>
 8008578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857a:	e792      	b.n	80084a2 <_printf_float+0x1ea>
 800857c:	2301      	movs	r3, #1
 800857e:	4652      	mov	r2, sl
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f aef7 	beq.w	800837a <_printf_float+0xc2>
 800858c:	f109 0901 	add.w	r9, r9, #1
 8008590:	e7ee      	b.n	8008570 <_printf_float+0x2b8>
 8008592:	bf00      	nop
 8008594:	7fefffff 	.word	0x7fefffff
 8008598:	0800daf4 	.word	0x0800daf4
 800859c:	0800daf8 	.word	0x0800daf8
 80085a0:	0800db00 	.word	0x0800db00
 80085a4:	0800dafc 	.word	0x0800dafc
 80085a8:	0800db04 	.word	0x0800db04
 80085ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085b0:	429a      	cmp	r2, r3
 80085b2:	bfa8      	it	ge
 80085b4:	461a      	movge	r2, r3
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	4691      	mov	r9, r2
 80085ba:	dc37      	bgt.n	800862c <_printf_float+0x374>
 80085bc:	f04f 0b00 	mov.w	fp, #0
 80085c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085c4:	f104 021a 	add.w	r2, r4, #26
 80085c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	eba3 0309 	sub.w	r3, r3, r9
 80085d0:	455b      	cmp	r3, fp
 80085d2:	dc33      	bgt.n	800863c <_printf_float+0x384>
 80085d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d8:	429a      	cmp	r2, r3
 80085da:	db3b      	blt.n	8008654 <_printf_float+0x39c>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	07da      	lsls	r2, r3, #31
 80085e0:	d438      	bmi.n	8008654 <_printf_float+0x39c>
 80085e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e4:	9a05      	ldr	r2, [sp, #20]
 80085e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085e8:	1a9a      	subs	r2, r3, r2
 80085ea:	eba3 0901 	sub.w	r9, r3, r1
 80085ee:	4591      	cmp	r9, r2
 80085f0:	bfa8      	it	ge
 80085f2:	4691      	movge	r9, r2
 80085f4:	f1b9 0f00 	cmp.w	r9, #0
 80085f8:	dc35      	bgt.n	8008666 <_printf_float+0x3ae>
 80085fa:	f04f 0800 	mov.w	r8, #0
 80085fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008602:	f104 0a1a 	add.w	sl, r4, #26
 8008606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	eba3 0309 	sub.w	r3, r3, r9
 8008610:	4543      	cmp	r3, r8
 8008612:	f77f af79 	ble.w	8008508 <_printf_float+0x250>
 8008616:	2301      	movs	r3, #1
 8008618:	4652      	mov	r2, sl
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f aeaa 	beq.w	800837a <_printf_float+0xc2>
 8008626:	f108 0801 	add.w	r8, r8, #1
 800862a:	e7ec      	b.n	8008606 <_printf_float+0x34e>
 800862c:	4613      	mov	r3, r2
 800862e:	4631      	mov	r1, r6
 8008630:	4642      	mov	r2, r8
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	d1c0      	bne.n	80085bc <_printf_float+0x304>
 800863a:	e69e      	b.n	800837a <_printf_float+0xc2>
 800863c:	2301      	movs	r3, #1
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	9205      	str	r2, [sp, #20]
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	f43f ae97 	beq.w	800837a <_printf_float+0xc2>
 800864c:	9a05      	ldr	r2, [sp, #20]
 800864e:	f10b 0b01 	add.w	fp, fp, #1
 8008652:	e7b9      	b.n	80085c8 <_printf_float+0x310>
 8008654:	ee18 3a10 	vmov	r3, s16
 8008658:	4652      	mov	r2, sl
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	d1be      	bne.n	80085e2 <_printf_float+0x32a>
 8008664:	e689      	b.n	800837a <_printf_float+0xc2>
 8008666:	9a05      	ldr	r2, [sp, #20]
 8008668:	464b      	mov	r3, r9
 800866a:	4442      	add	r2, r8
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	d1c1      	bne.n	80085fa <_printf_float+0x342>
 8008676:	e680      	b.n	800837a <_printf_float+0xc2>
 8008678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867a:	2a01      	cmp	r2, #1
 800867c:	dc01      	bgt.n	8008682 <_printf_float+0x3ca>
 800867e:	07db      	lsls	r3, r3, #31
 8008680:	d538      	bpl.n	80086f4 <_printf_float+0x43c>
 8008682:	2301      	movs	r3, #1
 8008684:	4642      	mov	r2, r8
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	f43f ae74 	beq.w	800837a <_printf_float+0xc2>
 8008692:	ee18 3a10 	vmov	r3, s16
 8008696:	4652      	mov	r2, sl
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	f43f ae6b 	beq.w	800837a <_printf_float+0xc2>
 80086a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086a8:	2200      	movs	r2, #0
 80086aa:	2300      	movs	r3, #0
 80086ac:	f7f8 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80086b0:	b9d8      	cbnz	r0, 80086ea <_printf_float+0x432>
 80086b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b4:	f108 0201 	add.w	r2, r8, #1
 80086b8:	3b01      	subs	r3, #1
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	d10e      	bne.n	80086e2 <_printf_float+0x42a>
 80086c4:	e659      	b.n	800837a <_printf_float+0xc2>
 80086c6:	2301      	movs	r3, #1
 80086c8:	4652      	mov	r2, sl
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b8      	blx	r7
 80086d0:	3001      	adds	r0, #1
 80086d2:	f43f ae52 	beq.w	800837a <_printf_float+0xc2>
 80086d6:	f108 0801 	add.w	r8, r8, #1
 80086da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086dc:	3b01      	subs	r3, #1
 80086de:	4543      	cmp	r3, r8
 80086e0:	dcf1      	bgt.n	80086c6 <_printf_float+0x40e>
 80086e2:	464b      	mov	r3, r9
 80086e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086e8:	e6dc      	b.n	80084a4 <_printf_float+0x1ec>
 80086ea:	f04f 0800 	mov.w	r8, #0
 80086ee:	f104 0a1a 	add.w	sl, r4, #26
 80086f2:	e7f2      	b.n	80086da <_printf_float+0x422>
 80086f4:	2301      	movs	r3, #1
 80086f6:	4642      	mov	r2, r8
 80086f8:	e7df      	b.n	80086ba <_printf_float+0x402>
 80086fa:	2301      	movs	r3, #1
 80086fc:	464a      	mov	r2, r9
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	f43f ae38 	beq.w	800837a <_printf_float+0xc2>
 800870a:	f108 0801 	add.w	r8, r8, #1
 800870e:	68e3      	ldr	r3, [r4, #12]
 8008710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008712:	1a5b      	subs	r3, r3, r1
 8008714:	4543      	cmp	r3, r8
 8008716:	dcf0      	bgt.n	80086fa <_printf_float+0x442>
 8008718:	e6fa      	b.n	8008510 <_printf_float+0x258>
 800871a:	f04f 0800 	mov.w	r8, #0
 800871e:	f104 0919 	add.w	r9, r4, #25
 8008722:	e7f4      	b.n	800870e <_printf_float+0x456>

08008724 <_printf_common>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	4616      	mov	r6, r2
 800872a:	4699      	mov	r9, r3
 800872c:	688a      	ldr	r2, [r1, #8]
 800872e:	690b      	ldr	r3, [r1, #16]
 8008730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008734:	4293      	cmp	r3, r2
 8008736:	bfb8      	it	lt
 8008738:	4613      	movlt	r3, r2
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008740:	4607      	mov	r7, r0
 8008742:	460c      	mov	r4, r1
 8008744:	b10a      	cbz	r2, 800874a <_printf_common+0x26>
 8008746:	3301      	adds	r3, #1
 8008748:	6033      	str	r3, [r6, #0]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	0699      	lsls	r1, r3, #26
 800874e:	bf42      	ittt	mi
 8008750:	6833      	ldrmi	r3, [r6, #0]
 8008752:	3302      	addmi	r3, #2
 8008754:	6033      	strmi	r3, [r6, #0]
 8008756:	6825      	ldr	r5, [r4, #0]
 8008758:	f015 0506 	ands.w	r5, r5, #6
 800875c:	d106      	bne.n	800876c <_printf_common+0x48>
 800875e:	f104 0a19 	add.w	sl, r4, #25
 8008762:	68e3      	ldr	r3, [r4, #12]
 8008764:	6832      	ldr	r2, [r6, #0]
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	42ab      	cmp	r3, r5
 800876a:	dc26      	bgt.n	80087ba <_printf_common+0x96>
 800876c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008770:	1e13      	subs	r3, r2, #0
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	bf18      	it	ne
 8008776:	2301      	movne	r3, #1
 8008778:	0692      	lsls	r2, r2, #26
 800877a:	d42b      	bmi.n	80087d4 <_printf_common+0xb0>
 800877c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008780:	4649      	mov	r1, r9
 8008782:	4638      	mov	r0, r7
 8008784:	47c0      	blx	r8
 8008786:	3001      	adds	r0, #1
 8008788:	d01e      	beq.n	80087c8 <_printf_common+0xa4>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	68e5      	ldr	r5, [r4, #12]
 800878e:	6832      	ldr	r2, [r6, #0]
 8008790:	f003 0306 	and.w	r3, r3, #6
 8008794:	2b04      	cmp	r3, #4
 8008796:	bf08      	it	eq
 8008798:	1aad      	subeq	r5, r5, r2
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	bf0c      	ite	eq
 80087a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a4:	2500      	movne	r5, #0
 80087a6:	4293      	cmp	r3, r2
 80087a8:	bfc4      	itt	gt
 80087aa:	1a9b      	subgt	r3, r3, r2
 80087ac:	18ed      	addgt	r5, r5, r3
 80087ae:	2600      	movs	r6, #0
 80087b0:	341a      	adds	r4, #26
 80087b2:	42b5      	cmp	r5, r6
 80087b4:	d11a      	bne.n	80087ec <_printf_common+0xc8>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e008      	b.n	80087cc <_printf_common+0xa8>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4652      	mov	r2, sl
 80087be:	4649      	mov	r1, r9
 80087c0:	4638      	mov	r0, r7
 80087c2:	47c0      	blx	r8
 80087c4:	3001      	adds	r0, #1
 80087c6:	d103      	bne.n	80087d0 <_printf_common+0xac>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	3501      	adds	r5, #1
 80087d2:	e7c6      	b.n	8008762 <_printf_common+0x3e>
 80087d4:	18e1      	adds	r1, r4, r3
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	2030      	movs	r0, #48	; 0x30
 80087da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087de:	4422      	add	r2, r4
 80087e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087e8:	3302      	adds	r3, #2
 80087ea:	e7c7      	b.n	800877c <_printf_common+0x58>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4622      	mov	r2, r4
 80087f0:	4649      	mov	r1, r9
 80087f2:	4638      	mov	r0, r7
 80087f4:	47c0      	blx	r8
 80087f6:	3001      	adds	r0, #1
 80087f8:	d0e6      	beq.n	80087c8 <_printf_common+0xa4>
 80087fa:	3601      	adds	r6, #1
 80087fc:	e7d9      	b.n	80087b2 <_printf_common+0x8e>
	...

08008800 <_printf_i>:
 8008800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	7e0f      	ldrb	r7, [r1, #24]
 8008806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008808:	2f78      	cmp	r7, #120	; 0x78
 800880a:	4691      	mov	r9, r2
 800880c:	4680      	mov	r8, r0
 800880e:	460c      	mov	r4, r1
 8008810:	469a      	mov	sl, r3
 8008812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008816:	d807      	bhi.n	8008828 <_printf_i+0x28>
 8008818:	2f62      	cmp	r7, #98	; 0x62
 800881a:	d80a      	bhi.n	8008832 <_printf_i+0x32>
 800881c:	2f00      	cmp	r7, #0
 800881e:	f000 80d8 	beq.w	80089d2 <_printf_i+0x1d2>
 8008822:	2f58      	cmp	r7, #88	; 0x58
 8008824:	f000 80a3 	beq.w	800896e <_printf_i+0x16e>
 8008828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008830:	e03a      	b.n	80088a8 <_printf_i+0xa8>
 8008832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008836:	2b15      	cmp	r3, #21
 8008838:	d8f6      	bhi.n	8008828 <_printf_i+0x28>
 800883a:	a101      	add	r1, pc, #4	; (adr r1, 8008840 <_printf_i+0x40>)
 800883c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008840:	08008899 	.word	0x08008899
 8008844:	080088ad 	.word	0x080088ad
 8008848:	08008829 	.word	0x08008829
 800884c:	08008829 	.word	0x08008829
 8008850:	08008829 	.word	0x08008829
 8008854:	08008829 	.word	0x08008829
 8008858:	080088ad 	.word	0x080088ad
 800885c:	08008829 	.word	0x08008829
 8008860:	08008829 	.word	0x08008829
 8008864:	08008829 	.word	0x08008829
 8008868:	08008829 	.word	0x08008829
 800886c:	080089b9 	.word	0x080089b9
 8008870:	080088dd 	.word	0x080088dd
 8008874:	0800899b 	.word	0x0800899b
 8008878:	08008829 	.word	0x08008829
 800887c:	08008829 	.word	0x08008829
 8008880:	080089db 	.word	0x080089db
 8008884:	08008829 	.word	0x08008829
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008829 	.word	0x08008829
 8008890:	08008829 	.word	0x08008829
 8008894:	080089a3 	.word	0x080089a3
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	602a      	str	r2, [r5, #0]
 80088a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0a3      	b.n	80089f4 <_printf_i+0x1f4>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	6829      	ldr	r1, [r5, #0]
 80088b0:	0606      	lsls	r6, r0, #24
 80088b2:	f101 0304 	add.w	r3, r1, #4
 80088b6:	d50a      	bpl.n	80088ce <_printf_i+0xce>
 80088b8:	680e      	ldr	r6, [r1, #0]
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	2e00      	cmp	r6, #0
 80088be:	da03      	bge.n	80088c8 <_printf_i+0xc8>
 80088c0:	232d      	movs	r3, #45	; 0x2d
 80088c2:	4276      	negs	r6, r6
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c8:	485e      	ldr	r0, [pc, #376]	; (8008a44 <_printf_i+0x244>)
 80088ca:	230a      	movs	r3, #10
 80088cc:	e019      	b.n	8008902 <_printf_i+0x102>
 80088ce:	680e      	ldr	r6, [r1, #0]
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d6:	bf18      	it	ne
 80088d8:	b236      	sxthne	r6, r6
 80088da:	e7ef      	b.n	80088bc <_printf_i+0xbc>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	6029      	str	r1, [r5, #0]
 80088e4:	0601      	lsls	r1, r0, #24
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0xec>
 80088e8:	681e      	ldr	r6, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <_printf_i+0xf2>
 80088ec:	0646      	lsls	r6, r0, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0xe8>
 80088f0:	881e      	ldrh	r6, [r3, #0]
 80088f2:	4854      	ldr	r0, [pc, #336]	; (8008a44 <_printf_i+0x244>)
 80088f4:	2f6f      	cmp	r7, #111	; 0x6f
 80088f6:	bf0c      	ite	eq
 80088f8:	2308      	moveq	r3, #8
 80088fa:	230a      	movne	r3, #10
 80088fc:	2100      	movs	r1, #0
 80088fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008902:	6865      	ldr	r5, [r4, #4]
 8008904:	60a5      	str	r5, [r4, #8]
 8008906:	2d00      	cmp	r5, #0
 8008908:	bfa2      	ittt	ge
 800890a:	6821      	ldrge	r1, [r4, #0]
 800890c:	f021 0104 	bicge.w	r1, r1, #4
 8008910:	6021      	strge	r1, [r4, #0]
 8008912:	b90e      	cbnz	r6, 8008918 <_printf_i+0x118>
 8008914:	2d00      	cmp	r5, #0
 8008916:	d04d      	beq.n	80089b4 <_printf_i+0x1b4>
 8008918:	4615      	mov	r5, r2
 800891a:	fbb6 f1f3 	udiv	r1, r6, r3
 800891e:	fb03 6711 	mls	r7, r3, r1, r6
 8008922:	5dc7      	ldrb	r7, [r0, r7]
 8008924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008928:	4637      	mov	r7, r6
 800892a:	42bb      	cmp	r3, r7
 800892c:	460e      	mov	r6, r1
 800892e:	d9f4      	bls.n	800891a <_printf_i+0x11a>
 8008930:	2b08      	cmp	r3, #8
 8008932:	d10b      	bne.n	800894c <_printf_i+0x14c>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	07de      	lsls	r6, r3, #31
 8008938:	d508      	bpl.n	800894c <_printf_i+0x14c>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4299      	cmp	r1, r3
 8008940:	bfde      	ittt	le
 8008942:	2330      	movle	r3, #48	; 0x30
 8008944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800894c:	1b52      	subs	r2, r2, r5
 800894e:	6122      	str	r2, [r4, #16]
 8008950:	f8cd a000 	str.w	sl, [sp]
 8008954:	464b      	mov	r3, r9
 8008956:	aa03      	add	r2, sp, #12
 8008958:	4621      	mov	r1, r4
 800895a:	4640      	mov	r0, r8
 800895c:	f7ff fee2 	bl	8008724 <_printf_common>
 8008960:	3001      	adds	r0, #1
 8008962:	d14c      	bne.n	80089fe <_printf_i+0x1fe>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	b004      	add	sp, #16
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	4835      	ldr	r0, [pc, #212]	; (8008a44 <_printf_i+0x244>)
 8008970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f851 6b04 	ldr.w	r6, [r1], #4
 800897c:	6029      	str	r1, [r5, #0]
 800897e:	061d      	lsls	r5, r3, #24
 8008980:	d514      	bpl.n	80089ac <_printf_i+0x1ac>
 8008982:	07df      	lsls	r7, r3, #31
 8008984:	bf44      	itt	mi
 8008986:	f043 0320 	orrmi.w	r3, r3, #32
 800898a:	6023      	strmi	r3, [r4, #0]
 800898c:	b91e      	cbnz	r6, 8008996 <_printf_i+0x196>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	f023 0320 	bic.w	r3, r3, #32
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	2310      	movs	r3, #16
 8008998:	e7b0      	b.n	80088fc <_printf_i+0xfc>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f043 0320 	orr.w	r3, r3, #32
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	2378      	movs	r3, #120	; 0x78
 80089a4:	4828      	ldr	r0, [pc, #160]	; (8008a48 <_printf_i+0x248>)
 80089a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089aa:	e7e3      	b.n	8008974 <_printf_i+0x174>
 80089ac:	0659      	lsls	r1, r3, #25
 80089ae:	bf48      	it	mi
 80089b0:	b2b6      	uxthmi	r6, r6
 80089b2:	e7e6      	b.n	8008982 <_printf_i+0x182>
 80089b4:	4615      	mov	r5, r2
 80089b6:	e7bb      	b.n	8008930 <_printf_i+0x130>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	6826      	ldr	r6, [r4, #0]
 80089bc:	6961      	ldr	r1, [r4, #20]
 80089be:	1d18      	adds	r0, r3, #4
 80089c0:	6028      	str	r0, [r5, #0]
 80089c2:	0635      	lsls	r5, r6, #24
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	d501      	bpl.n	80089cc <_printf_i+0x1cc>
 80089c8:	6019      	str	r1, [r3, #0]
 80089ca:	e002      	b.n	80089d2 <_printf_i+0x1d2>
 80089cc:	0670      	lsls	r0, r6, #25
 80089ce:	d5fb      	bpl.n	80089c8 <_printf_i+0x1c8>
 80089d0:	8019      	strh	r1, [r3, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	4615      	mov	r5, r2
 80089d8:	e7ba      	b.n	8008950 <_printf_i+0x150>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	1d1a      	adds	r2, r3, #4
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	2100      	movs	r1, #0
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7f7 fc1a 	bl	8000220 <memchr>
 80089ec:	b108      	cbz	r0, 80089f2 <_printf_i+0x1f2>
 80089ee:	1b40      	subs	r0, r0, r5
 80089f0:	6060      	str	r0, [r4, #4]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	2300      	movs	r3, #0
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	e7a8      	b.n	8008950 <_printf_i+0x150>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4649      	mov	r1, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	47d0      	blx	sl
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d0ab      	beq.n	8008964 <_printf_i+0x164>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	079b      	lsls	r3, r3, #30
 8008a10:	d413      	bmi.n	8008a3a <_printf_i+0x23a>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	4298      	cmp	r0, r3
 8008a18:	bfb8      	it	lt
 8008a1a:	4618      	movlt	r0, r3
 8008a1c:	e7a4      	b.n	8008968 <_printf_i+0x168>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d09b      	beq.n	8008964 <_printf_i+0x164>
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	68e3      	ldr	r3, [r4, #12]
 8008a30:	9903      	ldr	r1, [sp, #12]
 8008a32:	1a5b      	subs	r3, r3, r1
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dcf2      	bgt.n	8008a1e <_printf_i+0x21e>
 8008a38:	e7eb      	b.n	8008a12 <_printf_i+0x212>
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	f104 0619 	add.w	r6, r4, #25
 8008a40:	e7f5      	b.n	8008a2e <_printf_i+0x22e>
 8008a42:	bf00      	nop
 8008a44:	0800db06 	.word	0x0800db06
 8008a48:	0800db17 	.word	0x0800db17

08008a4c <_scanf_float>:
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	b087      	sub	sp, #28
 8008a52:	4617      	mov	r7, r2
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	688b      	ldr	r3, [r1, #8]
 8008a58:	1e5a      	subs	r2, r3, #1
 8008a5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a5e:	bf83      	ittte	hi
 8008a60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a64:	195b      	addhi	r3, r3, r5
 8008a66:	9302      	strhi	r3, [sp, #8]
 8008a68:	2300      	movls	r3, #0
 8008a6a:	bf86      	itte	hi
 8008a6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a70:	608b      	strhi	r3, [r1, #8]
 8008a72:	9302      	strls	r3, [sp, #8]
 8008a74:	680b      	ldr	r3, [r1, #0]
 8008a76:	468b      	mov	fp, r1
 8008a78:	2500      	movs	r5, #0
 8008a7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008a7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008a82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a86:	4680      	mov	r8, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	465e      	mov	r6, fp
 8008a8c:	46aa      	mov	sl, r5
 8008a8e:	46a9      	mov	r9, r5
 8008a90:	9501      	str	r5, [sp, #4]
 8008a92:	68a2      	ldr	r2, [r4, #8]
 8008a94:	b152      	cbz	r2, 8008aac <_scanf_float+0x60>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b4e      	cmp	r3, #78	; 0x4e
 8008a9c:	d864      	bhi.n	8008b68 <_scanf_float+0x11c>
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d83c      	bhi.n	8008b1c <_scanf_float+0xd0>
 8008aa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008aa6:	b2c8      	uxtb	r0, r1
 8008aa8:	280e      	cmp	r0, #14
 8008aaa:	d93a      	bls.n	8008b22 <_scanf_float+0xd6>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	d003      	beq.n	8008aba <_scanf_float+0x6e>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008abe:	f1ba 0f01 	cmp.w	sl, #1
 8008ac2:	f200 8113 	bhi.w	8008cec <_scanf_float+0x2a0>
 8008ac6:	455e      	cmp	r6, fp
 8008ac8:	f200 8105 	bhi.w	8008cd6 <_scanf_float+0x28a>
 8008acc:	2501      	movs	r5, #1
 8008ace:	4628      	mov	r0, r5
 8008ad0:	b007      	add	sp, #28
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ada:	2a0d      	cmp	r2, #13
 8008adc:	d8e6      	bhi.n	8008aac <_scanf_float+0x60>
 8008ade:	a101      	add	r1, pc, #4	; (adr r1, 8008ae4 <_scanf_float+0x98>)
 8008ae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ae4:	08008c23 	.word	0x08008c23
 8008ae8:	08008aad 	.word	0x08008aad
 8008aec:	08008aad 	.word	0x08008aad
 8008af0:	08008aad 	.word	0x08008aad
 8008af4:	08008c83 	.word	0x08008c83
 8008af8:	08008c5b 	.word	0x08008c5b
 8008afc:	08008aad 	.word	0x08008aad
 8008b00:	08008aad 	.word	0x08008aad
 8008b04:	08008c31 	.word	0x08008c31
 8008b08:	08008aad 	.word	0x08008aad
 8008b0c:	08008aad 	.word	0x08008aad
 8008b10:	08008aad 	.word	0x08008aad
 8008b14:	08008aad 	.word	0x08008aad
 8008b18:	08008be9 	.word	0x08008be9
 8008b1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008b20:	e7db      	b.n	8008ada <_scanf_float+0x8e>
 8008b22:	290e      	cmp	r1, #14
 8008b24:	d8c2      	bhi.n	8008aac <_scanf_float+0x60>
 8008b26:	a001      	add	r0, pc, #4	; (adr r0, 8008b2c <_scanf_float+0xe0>)
 8008b28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b2c:	08008bdb 	.word	0x08008bdb
 8008b30:	08008aad 	.word	0x08008aad
 8008b34:	08008bdb 	.word	0x08008bdb
 8008b38:	08008c6f 	.word	0x08008c6f
 8008b3c:	08008aad 	.word	0x08008aad
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008bc5 	.word	0x08008bc5
 8008b48:	08008bc5 	.word	0x08008bc5
 8008b4c:	08008bc5 	.word	0x08008bc5
 8008b50:	08008bc5 	.word	0x08008bc5
 8008b54:	08008bc5 	.word	0x08008bc5
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008bc5 	.word	0x08008bc5
 8008b64:	08008bc5 	.word	0x08008bc5
 8008b68:	2b6e      	cmp	r3, #110	; 0x6e
 8008b6a:	d809      	bhi.n	8008b80 <_scanf_float+0x134>
 8008b6c:	2b60      	cmp	r3, #96	; 0x60
 8008b6e:	d8b2      	bhi.n	8008ad6 <_scanf_float+0x8a>
 8008b70:	2b54      	cmp	r3, #84	; 0x54
 8008b72:	d077      	beq.n	8008c64 <_scanf_float+0x218>
 8008b74:	2b59      	cmp	r3, #89	; 0x59
 8008b76:	d199      	bne.n	8008aac <_scanf_float+0x60>
 8008b78:	2d07      	cmp	r5, #7
 8008b7a:	d197      	bne.n	8008aac <_scanf_float+0x60>
 8008b7c:	2508      	movs	r5, #8
 8008b7e:	e029      	b.n	8008bd4 <_scanf_float+0x188>
 8008b80:	2b74      	cmp	r3, #116	; 0x74
 8008b82:	d06f      	beq.n	8008c64 <_scanf_float+0x218>
 8008b84:	2b79      	cmp	r3, #121	; 0x79
 8008b86:	e7f6      	b.n	8008b76 <_scanf_float+0x12a>
 8008b88:	6821      	ldr	r1, [r4, #0]
 8008b8a:	05c8      	lsls	r0, r1, #23
 8008b8c:	d51a      	bpl.n	8008bc4 <_scanf_float+0x178>
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b94:	6021      	str	r1, [r4, #0]
 8008b96:	f109 0901 	add.w	r9, r9, #1
 8008b9a:	b11b      	cbz	r3, 8008ba4 <_scanf_float+0x158>
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	3201      	adds	r2, #1
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	60a2      	str	r2, [r4, #8]
 8008ba4:	68a3      	ldr	r3, [r4, #8]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	60a3      	str	r3, [r4, #8]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	3301      	adds	r3, #1
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	607b      	str	r3, [r7, #4]
 8008bb8:	f340 8084 	ble.w	8008cc4 <_scanf_float+0x278>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	e766      	b.n	8008a92 <_scanf_float+0x46>
 8008bc4:	eb1a 0f05 	cmn.w	sl, r5
 8008bc8:	f47f af70 	bne.w	8008aac <_scanf_float+0x60>
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008bd2:	6022      	str	r2, [r4, #0]
 8008bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8008bd8:	e7e4      	b.n	8008ba4 <_scanf_float+0x158>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	0610      	lsls	r0, r2, #24
 8008bde:	f57f af65 	bpl.w	8008aac <_scanf_float+0x60>
 8008be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008be6:	e7f4      	b.n	8008bd2 <_scanf_float+0x186>
 8008be8:	f1ba 0f00 	cmp.w	sl, #0
 8008bec:	d10e      	bne.n	8008c0c <_scanf_float+0x1c0>
 8008bee:	f1b9 0f00 	cmp.w	r9, #0
 8008bf2:	d10e      	bne.n	8008c12 <_scanf_float+0x1c6>
 8008bf4:	6822      	ldr	r2, [r4, #0]
 8008bf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008bfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008bfe:	d108      	bne.n	8008c12 <_scanf_float+0x1c6>
 8008c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	f04f 0a01 	mov.w	sl, #1
 8008c0a:	e7e3      	b.n	8008bd4 <_scanf_float+0x188>
 8008c0c:	f1ba 0f02 	cmp.w	sl, #2
 8008c10:	d055      	beq.n	8008cbe <_scanf_float+0x272>
 8008c12:	2d01      	cmp	r5, #1
 8008c14:	d002      	beq.n	8008c1c <_scanf_float+0x1d0>
 8008c16:	2d04      	cmp	r5, #4
 8008c18:	f47f af48 	bne.w	8008aac <_scanf_float+0x60>
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	b2ed      	uxtb	r5, r5
 8008c20:	e7d8      	b.n	8008bd4 <_scanf_float+0x188>
 8008c22:	f1ba 0f01 	cmp.w	sl, #1
 8008c26:	f47f af41 	bne.w	8008aac <_scanf_float+0x60>
 8008c2a:	f04f 0a02 	mov.w	sl, #2
 8008c2e:	e7d1      	b.n	8008bd4 <_scanf_float+0x188>
 8008c30:	b97d      	cbnz	r5, 8008c52 <_scanf_float+0x206>
 8008c32:	f1b9 0f00 	cmp.w	r9, #0
 8008c36:	f47f af3c 	bne.w	8008ab2 <_scanf_float+0x66>
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c44:	f47f af39 	bne.w	8008aba <_scanf_float+0x6e>
 8008c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	2501      	movs	r5, #1
 8008c50:	e7c0      	b.n	8008bd4 <_scanf_float+0x188>
 8008c52:	2d03      	cmp	r5, #3
 8008c54:	d0e2      	beq.n	8008c1c <_scanf_float+0x1d0>
 8008c56:	2d05      	cmp	r5, #5
 8008c58:	e7de      	b.n	8008c18 <_scanf_float+0x1cc>
 8008c5a:	2d02      	cmp	r5, #2
 8008c5c:	f47f af26 	bne.w	8008aac <_scanf_float+0x60>
 8008c60:	2503      	movs	r5, #3
 8008c62:	e7b7      	b.n	8008bd4 <_scanf_float+0x188>
 8008c64:	2d06      	cmp	r5, #6
 8008c66:	f47f af21 	bne.w	8008aac <_scanf_float+0x60>
 8008c6a:	2507      	movs	r5, #7
 8008c6c:	e7b2      	b.n	8008bd4 <_scanf_float+0x188>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	0591      	lsls	r1, r2, #22
 8008c72:	f57f af1b 	bpl.w	8008aac <_scanf_float+0x60>
 8008c76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008c7a:	6022      	str	r2, [r4, #0]
 8008c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c80:	e7a8      	b.n	8008bd4 <_scanf_float+0x188>
 8008c82:	6822      	ldr	r2, [r4, #0]
 8008c84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008c8c:	d006      	beq.n	8008c9c <_scanf_float+0x250>
 8008c8e:	0550      	lsls	r0, r2, #21
 8008c90:	f57f af0c 	bpl.w	8008aac <_scanf_float+0x60>
 8008c94:	f1b9 0f00 	cmp.w	r9, #0
 8008c98:	f43f af0f 	beq.w	8008aba <_scanf_float+0x6e>
 8008c9c:	0591      	lsls	r1, r2, #22
 8008c9e:	bf58      	it	pl
 8008ca0:	9901      	ldrpl	r1, [sp, #4]
 8008ca2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ca6:	bf58      	it	pl
 8008ca8:	eba9 0101 	subpl.w	r1, r9, r1
 8008cac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008cb0:	bf58      	it	pl
 8008cb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008cb6:	6022      	str	r2, [r4, #0]
 8008cb8:	f04f 0900 	mov.w	r9, #0
 8008cbc:	e78a      	b.n	8008bd4 <_scanf_float+0x188>
 8008cbe:	f04f 0a03 	mov.w	sl, #3
 8008cc2:	e787      	b.n	8008bd4 <_scanf_float+0x188>
 8008cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4798      	blx	r3
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f aedf 	beq.w	8008a92 <_scanf_float+0x46>
 8008cd4:	e6ea      	b.n	8008aac <_scanf_float+0x60>
 8008cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4798      	blx	r3
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	e6ec      	b.n	8008ac6 <_scanf_float+0x7a>
 8008cec:	1e6b      	subs	r3, r5, #1
 8008cee:	2b06      	cmp	r3, #6
 8008cf0:	d825      	bhi.n	8008d3e <_scanf_float+0x2f2>
 8008cf2:	2d02      	cmp	r5, #2
 8008cf4:	d836      	bhi.n	8008d64 <_scanf_float+0x318>
 8008cf6:	455e      	cmp	r6, fp
 8008cf8:	f67f aee8 	bls.w	8008acc <_scanf_float+0x80>
 8008cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d04:	463a      	mov	r2, r7
 8008d06:	4640      	mov	r0, r8
 8008d08:	4798      	blx	r3
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	6123      	str	r3, [r4, #16]
 8008d10:	e7f1      	b.n	8008cf6 <_scanf_float+0x2aa>
 8008d12:	9802      	ldr	r0, [sp, #8]
 8008d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d1c:	9002      	str	r0, [sp, #8]
 8008d1e:	463a      	mov	r2, r7
 8008d20:	4640      	mov	r0, r8
 8008d22:	4798      	blx	r3
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d2e:	fa5f fa8a 	uxtb.w	sl, sl
 8008d32:	f1ba 0f02 	cmp.w	sl, #2
 8008d36:	d1ec      	bne.n	8008d12 <_scanf_float+0x2c6>
 8008d38:	3d03      	subs	r5, #3
 8008d3a:	b2ed      	uxtb	r5, r5
 8008d3c:	1b76      	subs	r6, r6, r5
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	05da      	lsls	r2, r3, #23
 8008d42:	d52f      	bpl.n	8008da4 <_scanf_float+0x358>
 8008d44:	055b      	lsls	r3, r3, #21
 8008d46:	d510      	bpl.n	8008d6a <_scanf_float+0x31e>
 8008d48:	455e      	cmp	r6, fp
 8008d4a:	f67f aebf 	bls.w	8008acc <_scanf_float+0x80>
 8008d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d56:	463a      	mov	r2, r7
 8008d58:	4640      	mov	r0, r8
 8008d5a:	4798      	blx	r3
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	e7f1      	b.n	8008d48 <_scanf_float+0x2fc>
 8008d64:	46aa      	mov	sl, r5
 8008d66:	9602      	str	r6, [sp, #8]
 8008d68:	e7df      	b.n	8008d2a <_scanf_float+0x2de>
 8008d6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	2965      	cmp	r1, #101	; 0x65
 8008d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d76:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	d00c      	beq.n	8008d98 <_scanf_float+0x34c>
 8008d7e:	2945      	cmp	r1, #69	; 0x45
 8008d80:	d00a      	beq.n	8008d98 <_scanf_float+0x34c>
 8008d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d86:	463a      	mov	r2, r7
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4798      	blx	r3
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	1eb5      	subs	r5, r6, #2
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4798      	blx	r3
 8008da2:	462e      	mov	r6, r5
 8008da4:	6825      	ldr	r5, [r4, #0]
 8008da6:	f015 0510 	ands.w	r5, r5, #16
 8008daa:	d159      	bne.n	8008e60 <_scanf_float+0x414>
 8008dac:	7035      	strb	r5, [r6, #0]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db8:	d11b      	bne.n	8008df2 <_scanf_float+0x3a6>
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	454b      	cmp	r3, r9
 8008dbe:	eba3 0209 	sub.w	r2, r3, r9
 8008dc2:	d123      	bne.n	8008e0c <_scanf_float+0x3c0>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f000 ff27 	bl	8009c1c <_strtod_r>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	f012 0f02 	tst.w	r2, #2
 8008dd6:	ec57 6b10 	vmov	r6, r7, d0
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	d021      	beq.n	8008e22 <_scanf_float+0x3d6>
 8008dde:	9903      	ldr	r1, [sp, #12]
 8008de0:	1d1a      	adds	r2, r3, #4
 8008de2:	600a      	str	r2, [r1, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	e9c3 6700 	strd	r6, r7, [r3]
 8008dea:	68e3      	ldr	r3, [r4, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60e3      	str	r3, [r4, #12]
 8008df0:	e66d      	b.n	8008ace <_scanf_float+0x82>
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0e5      	beq.n	8008dc4 <_scanf_float+0x378>
 8008df8:	9905      	ldr	r1, [sp, #20]
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	3101      	adds	r1, #1
 8008e00:	4640      	mov	r0, r8
 8008e02:	f000 ff93 	bl	8009d2c <_strtol_r>
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	9e05      	ldr	r6, [sp, #20]
 8008e0a:	1ac2      	subs	r2, r0, r3
 8008e0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e10:	429e      	cmp	r6, r3
 8008e12:	bf28      	it	cs
 8008e14:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e18:	4912      	ldr	r1, [pc, #72]	; (8008e64 <_scanf_float+0x418>)
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f000 f8ba 	bl	8008f94 <siprintf>
 8008e20:	e7d0      	b.n	8008dc4 <_scanf_float+0x378>
 8008e22:	9903      	ldr	r1, [sp, #12]
 8008e24:	f012 0f04 	tst.w	r2, #4
 8008e28:	f103 0204 	add.w	r2, r3, #4
 8008e2c:	600a      	str	r2, [r1, #0]
 8008e2e:	d1d9      	bne.n	8008de4 <_scanf_float+0x398>
 8008e30:	f8d3 8000 	ldr.w	r8, [r3]
 8008e34:	ee10 2a10 	vmov	r2, s0
 8008e38:	ee10 0a10 	vmov	r0, s0
 8008e3c:	463b      	mov	r3, r7
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fe94 	bl	8000b6c <__aeabi_dcmpun>
 8008e44:	b128      	cbz	r0, 8008e52 <_scanf_float+0x406>
 8008e46:	4808      	ldr	r0, [pc, #32]	; (8008e68 <_scanf_float+0x41c>)
 8008e48:	f000 f89e 	bl	8008f88 <nanf>
 8008e4c:	ed88 0a00 	vstr	s0, [r8]
 8008e50:	e7cb      	b.n	8008dea <_scanf_float+0x39e>
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fee7 	bl	8000c28 <__aeabi_d2f>
 8008e5a:	f8c8 0000 	str.w	r0, [r8]
 8008e5e:	e7c4      	b.n	8008dea <_scanf_float+0x39e>
 8008e60:	2500      	movs	r5, #0
 8008e62:	e634      	b.n	8008ace <_scanf_float+0x82>
 8008e64:	0800db28 	.word	0x0800db28
 8008e68:	0800df98 	.word	0x0800df98

08008e6c <iprintf>:
 8008e6c:	b40f      	push	{r0, r1, r2, r3}
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <iprintf+0x2c>)
 8008e70:	b513      	push	{r0, r1, r4, lr}
 8008e72:	681c      	ldr	r4, [r3, #0]
 8008e74:	b124      	cbz	r4, 8008e80 <iprintf+0x14>
 8008e76:	69a3      	ldr	r3, [r4, #24]
 8008e78:	b913      	cbnz	r3, 8008e80 <iprintf+0x14>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f001 ffac 	bl	800add8 <__sinit>
 8008e80:	ab05      	add	r3, sp, #20
 8008e82:	9a04      	ldr	r2, [sp, #16]
 8008e84:	68a1      	ldr	r1, [r4, #8]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f003 fb75 	bl	800c578 <_vfiprintf_r>
 8008e8e:	b002      	add	sp, #8
 8008e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	20000010 	.word	0x20000010

08008e9c <_puts_r>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	460e      	mov	r6, r1
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	b118      	cbz	r0, 8008eac <_puts_r+0x10>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_puts_r+0x10>
 8008ea8:	f001 ff96 	bl	800add8 <__sinit>
 8008eac:	69ab      	ldr	r3, [r5, #24]
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_puts_r+0x1c>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f001 ff90 	bl	800add8 <__sinit>
 8008eb8:	4b2c      	ldr	r3, [pc, #176]	; (8008f6c <_puts_r+0xd0>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d120      	bne.n	8008f00 <_puts_r+0x64>
 8008ebe:	686c      	ldr	r4, [r5, #4]
 8008ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec2:	07db      	lsls	r3, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_puts_r+0x36>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_puts_r+0x36>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ece:	f002 fb94 	bl	800b5fa <__retarget_lock_acquire_recursive>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	0719      	lsls	r1, r3, #28
 8008ed6:	d51d      	bpl.n	8008f14 <_puts_r+0x78>
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b1db      	cbz	r3, 8008f14 <_puts_r+0x78>
 8008edc:	3e01      	subs	r6, #1
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	60a3      	str	r3, [r4, #8]
 8008ee8:	bb39      	cbnz	r1, 8008f3a <_puts_r+0x9e>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da38      	bge.n	8008f60 <_puts_r+0xc4>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	210a      	movs	r1, #10
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 ff1c 	bl	8009d30 <__swbuf_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d011      	beq.n	8008f20 <_puts_r+0x84>
 8008efc:	250a      	movs	r5, #10
 8008efe:	e011      	b.n	8008f24 <_puts_r+0x88>
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <_puts_r+0xd4>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <_puts_r+0x6e>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7da      	b.n	8008ec0 <_puts_r+0x24>
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <_puts_r+0xd8>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7d5      	b.n	8008ec0 <_puts_r+0x24>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 ff5c 	bl	8009dd4 <__swsetup_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0dd      	beq.n	8008edc <_puts_r+0x40>
 8008f20:	f04f 35ff 	mov.w	r5, #4294967295
 8008f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f26:	07da      	lsls	r2, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_puts_r+0x9a>
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	059b      	lsls	r3, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_puts_r+0x9a>
 8008f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f32:	f002 fb63 	bl	800b5fc <__retarget_lock_release_recursive>
 8008f36:	4628      	mov	r0, r5
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da04      	bge.n	8008f48 <_puts_r+0xac>
 8008f3e:	69a2      	ldr	r2, [r4, #24]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	dc06      	bgt.n	8008f52 <_puts_r+0xb6>
 8008f44:	290a      	cmp	r1, #10
 8008f46:	d004      	beq.n	8008f52 <_puts_r+0xb6>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	6022      	str	r2, [r4, #0]
 8008f4e:	7019      	strb	r1, [r3, #0]
 8008f50:	e7c5      	b.n	8008ede <_puts_r+0x42>
 8008f52:	4622      	mov	r2, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 feeb 	bl	8009d30 <__swbuf_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d1bf      	bne.n	8008ede <_puts_r+0x42>
 8008f5e:	e7df      	b.n	8008f20 <_puts_r+0x84>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	250a      	movs	r5, #10
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	701d      	strb	r5, [r3, #0]
 8008f6a:	e7db      	b.n	8008f24 <_puts_r+0x88>
 8008f6c:	0800dd34 	.word	0x0800dd34
 8008f70:	0800dd54 	.word	0x0800dd54
 8008f74:	0800dd14 	.word	0x0800dd14

08008f78 <puts>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <puts+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f7ff bf8d 	b.w	8008e9c <_puts_r>
 8008f82:	bf00      	nop
 8008f84:	20000010 	.word	0x20000010

08008f88 <nanf>:
 8008f88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f90 <nanf+0x8>
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	7fc00000 	.word	0x7fc00000

08008f94 <siprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	b500      	push	{lr}
 8008f98:	b09c      	sub	sp, #112	; 0x70
 8008f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9006      	str	r0, [sp, #24]
 8008fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fa4:	4809      	ldr	r0, [pc, #36]	; (8008fcc <siprintf+0x38>)
 8008fa6:	9107      	str	r1, [sp, #28]
 8008fa8:	9104      	str	r1, [sp, #16]
 8008faa:	4909      	ldr	r1, [pc, #36]	; (8008fd0 <siprintf+0x3c>)
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	9105      	str	r1, [sp, #20]
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	a902      	add	r1, sp, #8
 8008fb8:	f003 f9b4 	bl	800c324 <_svfiprintf_r>
 8008fbc:	9b02      	ldr	r3, [sp, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	b01c      	add	sp, #112	; 0x70
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	20000010 	.word	0x20000010
 8008fd0:	ffff0208 	.word	0xffff0208

08008fd4 <sulp>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
 8008fda:	ec45 4b10 	vmov	d0, r4, r5
 8008fde:	4616      	mov	r6, r2
 8008fe0:	f002 fefe 	bl	800bde0 <__ulp>
 8008fe4:	ec51 0b10 	vmov	r0, r1, d0
 8008fe8:	b17e      	cbz	r6, 800900a <sulp+0x36>
 8008fea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd09      	ble.n	800900a <sulp+0x36>
 8008ff6:	051b      	lsls	r3, r3, #20
 8008ff8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ffc:	2400      	movs	r4, #0
 8008ffe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009002:	4622      	mov	r2, r4
 8009004:	462b      	mov	r3, r5
 8009006:	f7f7 fb17 	bl	8000638 <__aeabi_dmul>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	0000      	movs	r0, r0
	...

08009010 <_strtod_l>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	ed2d 8b02 	vpush	{d8}
 8009018:	b09d      	sub	sp, #116	; 0x74
 800901a:	461f      	mov	r7, r3
 800901c:	2300      	movs	r3, #0
 800901e:	9318      	str	r3, [sp, #96]	; 0x60
 8009020:	4ba2      	ldr	r3, [pc, #648]	; (80092ac <_strtod_l+0x29c>)
 8009022:	9213      	str	r2, [sp, #76]	; 0x4c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9305      	str	r3, [sp, #20]
 8009028:	4604      	mov	r4, r0
 800902a:	4618      	mov	r0, r3
 800902c:	4688      	mov	r8, r1
 800902e:	f7f7 f8ef 	bl	8000210 <strlen>
 8009032:	f04f 0a00 	mov.w	sl, #0
 8009036:	4605      	mov	r5, r0
 8009038:	f04f 0b00 	mov.w	fp, #0
 800903c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009042:	781a      	ldrb	r2, [r3, #0]
 8009044:	2a2b      	cmp	r2, #43	; 0x2b
 8009046:	d04e      	beq.n	80090e6 <_strtod_l+0xd6>
 8009048:	d83b      	bhi.n	80090c2 <_strtod_l+0xb2>
 800904a:	2a0d      	cmp	r2, #13
 800904c:	d834      	bhi.n	80090b8 <_strtod_l+0xa8>
 800904e:	2a08      	cmp	r2, #8
 8009050:	d834      	bhi.n	80090bc <_strtod_l+0xac>
 8009052:	2a00      	cmp	r2, #0
 8009054:	d03e      	beq.n	80090d4 <_strtod_l+0xc4>
 8009056:	2300      	movs	r3, #0
 8009058:	930a      	str	r3, [sp, #40]	; 0x28
 800905a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800905c:	7833      	ldrb	r3, [r6, #0]
 800905e:	2b30      	cmp	r3, #48	; 0x30
 8009060:	f040 80b0 	bne.w	80091c4 <_strtod_l+0x1b4>
 8009064:	7873      	ldrb	r3, [r6, #1]
 8009066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800906a:	2b58      	cmp	r3, #88	; 0x58
 800906c:	d168      	bne.n	8009140 <_strtod_l+0x130>
 800906e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	ab18      	add	r3, sp, #96	; 0x60
 8009074:	9702      	str	r7, [sp, #8]
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	4a8d      	ldr	r2, [pc, #564]	; (80092b0 <_strtod_l+0x2a0>)
 800907a:	ab19      	add	r3, sp, #100	; 0x64
 800907c:	a917      	add	r1, sp, #92	; 0x5c
 800907e:	4620      	mov	r0, r4
 8009080:	f001 ffae 	bl	800afe0 <__gethex>
 8009084:	f010 0707 	ands.w	r7, r0, #7
 8009088:	4605      	mov	r5, r0
 800908a:	d005      	beq.n	8009098 <_strtod_l+0x88>
 800908c:	2f06      	cmp	r7, #6
 800908e:	d12c      	bne.n	80090ea <_strtod_l+0xda>
 8009090:	3601      	adds	r6, #1
 8009092:	2300      	movs	r3, #0
 8009094:	9617      	str	r6, [sp, #92]	; 0x5c
 8009096:	930a      	str	r3, [sp, #40]	; 0x28
 8009098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800909a:	2b00      	cmp	r3, #0
 800909c:	f040 8590 	bne.w	8009bc0 <_strtod_l+0xbb0>
 80090a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a2:	b1eb      	cbz	r3, 80090e0 <_strtod_l+0xd0>
 80090a4:	4652      	mov	r2, sl
 80090a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80090aa:	ec43 2b10 	vmov	d0, r2, r3
 80090ae:	b01d      	add	sp, #116	; 0x74
 80090b0:	ecbd 8b02 	vpop	{d8}
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	2a20      	cmp	r2, #32
 80090ba:	d1cc      	bne.n	8009056 <_strtod_l+0x46>
 80090bc:	3301      	adds	r3, #1
 80090be:	9317      	str	r3, [sp, #92]	; 0x5c
 80090c0:	e7be      	b.n	8009040 <_strtod_l+0x30>
 80090c2:	2a2d      	cmp	r2, #45	; 0x2d
 80090c4:	d1c7      	bne.n	8009056 <_strtod_l+0x46>
 80090c6:	2201      	movs	r2, #1
 80090c8:	920a      	str	r2, [sp, #40]	; 0x28
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80090ce:	785b      	ldrb	r3, [r3, #1]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1c2      	bne.n	800905a <_strtod_l+0x4a>
 80090d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 856e 	bne.w	8009bbc <_strtod_l+0xbac>
 80090e0:	4652      	mov	r2, sl
 80090e2:	465b      	mov	r3, fp
 80090e4:	e7e1      	b.n	80090aa <_strtod_l+0x9a>
 80090e6:	2200      	movs	r2, #0
 80090e8:	e7ee      	b.n	80090c8 <_strtod_l+0xb8>
 80090ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090ec:	b13a      	cbz	r2, 80090fe <_strtod_l+0xee>
 80090ee:	2135      	movs	r1, #53	; 0x35
 80090f0:	a81a      	add	r0, sp, #104	; 0x68
 80090f2:	f002 ff80 	bl	800bff6 <__copybits>
 80090f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090f8:	4620      	mov	r0, r4
 80090fa:	f002 fb3f 	bl	800b77c <_Bfree>
 80090fe:	3f01      	subs	r7, #1
 8009100:	2f04      	cmp	r7, #4
 8009102:	d806      	bhi.n	8009112 <_strtod_l+0x102>
 8009104:	e8df f007 	tbb	[pc, r7]
 8009108:	1714030a 	.word	0x1714030a
 800910c:	0a          	.byte	0x0a
 800910d:	00          	.byte	0x00
 800910e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009112:	0728      	lsls	r0, r5, #28
 8009114:	d5c0      	bpl.n	8009098 <_strtod_l+0x88>
 8009116:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800911a:	e7bd      	b.n	8009098 <_strtod_l+0x88>
 800911c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800912a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800912e:	e7f0      	b.n	8009112 <_strtod_l+0x102>
 8009130:	f8df b180 	ldr.w	fp, [pc, #384]	; 80092b4 <_strtod_l+0x2a4>
 8009134:	e7ed      	b.n	8009112 <_strtod_l+0x102>
 8009136:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800913a:	f04f 3aff 	mov.w	sl, #4294967295
 800913e:	e7e8      	b.n	8009112 <_strtod_l+0x102>
 8009140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	9217      	str	r2, [sp, #92]	; 0x5c
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b30      	cmp	r3, #48	; 0x30
 800914a:	d0f9      	beq.n	8009140 <_strtod_l+0x130>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0a3      	beq.n	8009098 <_strtod_l+0x88>
 8009150:	2301      	movs	r3, #1
 8009152:	f04f 0900 	mov.w	r9, #0
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800915a:	9308      	str	r3, [sp, #32]
 800915c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009160:	464f      	mov	r7, r9
 8009162:	220a      	movs	r2, #10
 8009164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009166:	7806      	ldrb	r6, [r0, #0]
 8009168:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800916c:	b2d9      	uxtb	r1, r3
 800916e:	2909      	cmp	r1, #9
 8009170:	d92a      	bls.n	80091c8 <_strtod_l+0x1b8>
 8009172:	9905      	ldr	r1, [sp, #20]
 8009174:	462a      	mov	r2, r5
 8009176:	f003 fb8a 	bl	800c88e <strncmp>
 800917a:	b398      	cbz	r0, 80091e4 <_strtod_l+0x1d4>
 800917c:	2000      	movs	r0, #0
 800917e:	4632      	mov	r2, r6
 8009180:	463d      	mov	r5, r7
 8009182:	9005      	str	r0, [sp, #20]
 8009184:	4603      	mov	r3, r0
 8009186:	2a65      	cmp	r2, #101	; 0x65
 8009188:	d001      	beq.n	800918e <_strtod_l+0x17e>
 800918a:	2a45      	cmp	r2, #69	; 0x45
 800918c:	d118      	bne.n	80091c0 <_strtod_l+0x1b0>
 800918e:	b91d      	cbnz	r5, 8009198 <_strtod_l+0x188>
 8009190:	9a04      	ldr	r2, [sp, #16]
 8009192:	4302      	orrs	r2, r0
 8009194:	d09e      	beq.n	80090d4 <_strtod_l+0xc4>
 8009196:	2500      	movs	r5, #0
 8009198:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800919c:	f108 0201 	add.w	r2, r8, #1
 80091a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80091a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80091a6:	2a2b      	cmp	r2, #43	; 0x2b
 80091a8:	d075      	beq.n	8009296 <_strtod_l+0x286>
 80091aa:	2a2d      	cmp	r2, #45	; 0x2d
 80091ac:	d07b      	beq.n	80092a6 <_strtod_l+0x296>
 80091ae:	f04f 0c00 	mov.w	ip, #0
 80091b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80091b6:	2909      	cmp	r1, #9
 80091b8:	f240 8082 	bls.w	80092c0 <_strtod_l+0x2b0>
 80091bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091c0:	2600      	movs	r6, #0
 80091c2:	e09d      	b.n	8009300 <_strtod_l+0x2f0>
 80091c4:	2300      	movs	r3, #0
 80091c6:	e7c4      	b.n	8009152 <_strtod_l+0x142>
 80091c8:	2f08      	cmp	r7, #8
 80091ca:	bfd8      	it	le
 80091cc:	9907      	ldrle	r1, [sp, #28]
 80091ce:	f100 0001 	add.w	r0, r0, #1
 80091d2:	bfda      	itte	le
 80091d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80091d8:	9307      	strle	r3, [sp, #28]
 80091da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80091de:	3701      	adds	r7, #1
 80091e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80091e2:	e7bf      	b.n	8009164 <_strtod_l+0x154>
 80091e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091e6:	195a      	adds	r2, r3, r5
 80091e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80091ea:	5d5a      	ldrb	r2, [r3, r5]
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	d037      	beq.n	8009260 <_strtod_l+0x250>
 80091f0:	9005      	str	r0, [sp, #20]
 80091f2:	463d      	mov	r5, r7
 80091f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	d912      	bls.n	8009222 <_strtod_l+0x212>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e7c2      	b.n	8009186 <_strtod_l+0x176>
 8009200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	9217      	str	r2, [sp, #92]	; 0x5c
 8009206:	785a      	ldrb	r2, [r3, #1]
 8009208:	3001      	adds	r0, #1
 800920a:	2a30      	cmp	r2, #48	; 0x30
 800920c:	d0f8      	beq.n	8009200 <_strtod_l+0x1f0>
 800920e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009212:	2b08      	cmp	r3, #8
 8009214:	f200 84d9 	bhi.w	8009bca <_strtod_l+0xbba>
 8009218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800921a:	9005      	str	r0, [sp, #20]
 800921c:	2000      	movs	r0, #0
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	4605      	mov	r5, r0
 8009222:	3a30      	subs	r2, #48	; 0x30
 8009224:	f100 0301 	add.w	r3, r0, #1
 8009228:	d014      	beq.n	8009254 <_strtod_l+0x244>
 800922a:	9905      	ldr	r1, [sp, #20]
 800922c:	4419      	add	r1, r3
 800922e:	9105      	str	r1, [sp, #20]
 8009230:	462b      	mov	r3, r5
 8009232:	eb00 0e05 	add.w	lr, r0, r5
 8009236:	210a      	movs	r1, #10
 8009238:	4573      	cmp	r3, lr
 800923a:	d113      	bne.n	8009264 <_strtod_l+0x254>
 800923c:	182b      	adds	r3, r5, r0
 800923e:	2b08      	cmp	r3, #8
 8009240:	f105 0501 	add.w	r5, r5, #1
 8009244:	4405      	add	r5, r0
 8009246:	dc1c      	bgt.n	8009282 <_strtod_l+0x272>
 8009248:	9907      	ldr	r1, [sp, #28]
 800924a:	230a      	movs	r3, #10
 800924c:	fb03 2301 	mla	r3, r3, r1, r2
 8009250:	9307      	str	r3, [sp, #28]
 8009252:	2300      	movs	r3, #0
 8009254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009256:	1c51      	adds	r1, r2, #1
 8009258:	9117      	str	r1, [sp, #92]	; 0x5c
 800925a:	7852      	ldrb	r2, [r2, #1]
 800925c:	4618      	mov	r0, r3
 800925e:	e7c9      	b.n	80091f4 <_strtod_l+0x1e4>
 8009260:	4638      	mov	r0, r7
 8009262:	e7d2      	b.n	800920a <_strtod_l+0x1fa>
 8009264:	2b08      	cmp	r3, #8
 8009266:	dc04      	bgt.n	8009272 <_strtod_l+0x262>
 8009268:	9e07      	ldr	r6, [sp, #28]
 800926a:	434e      	muls	r6, r1
 800926c:	9607      	str	r6, [sp, #28]
 800926e:	3301      	adds	r3, #1
 8009270:	e7e2      	b.n	8009238 <_strtod_l+0x228>
 8009272:	f103 0c01 	add.w	ip, r3, #1
 8009276:	f1bc 0f10 	cmp.w	ip, #16
 800927a:	bfd8      	it	le
 800927c:	fb01 f909 	mulle.w	r9, r1, r9
 8009280:	e7f5      	b.n	800926e <_strtod_l+0x25e>
 8009282:	2d10      	cmp	r5, #16
 8009284:	bfdc      	itt	le
 8009286:	230a      	movle	r3, #10
 8009288:	fb03 2909 	mlale	r9, r3, r9, r2
 800928c:	e7e1      	b.n	8009252 <_strtod_l+0x242>
 800928e:	2300      	movs	r3, #0
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	2301      	movs	r3, #1
 8009294:	e77c      	b.n	8009190 <_strtod_l+0x180>
 8009296:	f04f 0c00 	mov.w	ip, #0
 800929a:	f108 0202 	add.w	r2, r8, #2
 800929e:	9217      	str	r2, [sp, #92]	; 0x5c
 80092a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80092a4:	e785      	b.n	80091b2 <_strtod_l+0x1a2>
 80092a6:	f04f 0c01 	mov.w	ip, #1
 80092aa:	e7f6      	b.n	800929a <_strtod_l+0x28a>
 80092ac:	0800dddc 	.word	0x0800dddc
 80092b0:	0800db30 	.word	0x0800db30
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092ba:	1c51      	adds	r1, r2, #1
 80092bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80092be:	7852      	ldrb	r2, [r2, #1]
 80092c0:	2a30      	cmp	r2, #48	; 0x30
 80092c2:	d0f9      	beq.n	80092b8 <_strtod_l+0x2a8>
 80092c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80092c8:	2908      	cmp	r1, #8
 80092ca:	f63f af79 	bhi.w	80091c0 <_strtod_l+0x1b0>
 80092ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80092d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092d4:	9206      	str	r2, [sp, #24]
 80092d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092d8:	1c51      	adds	r1, r2, #1
 80092da:	9117      	str	r1, [sp, #92]	; 0x5c
 80092dc:	7852      	ldrb	r2, [r2, #1]
 80092de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80092e2:	2e09      	cmp	r6, #9
 80092e4:	d937      	bls.n	8009356 <_strtod_l+0x346>
 80092e6:	9e06      	ldr	r6, [sp, #24]
 80092e8:	1b89      	subs	r1, r1, r6
 80092ea:	2908      	cmp	r1, #8
 80092ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80092f0:	dc02      	bgt.n	80092f8 <_strtod_l+0x2e8>
 80092f2:	4576      	cmp	r6, lr
 80092f4:	bfa8      	it	ge
 80092f6:	4676      	movge	r6, lr
 80092f8:	f1bc 0f00 	cmp.w	ip, #0
 80092fc:	d000      	beq.n	8009300 <_strtod_l+0x2f0>
 80092fe:	4276      	negs	r6, r6
 8009300:	2d00      	cmp	r5, #0
 8009302:	d14d      	bne.n	80093a0 <_strtod_l+0x390>
 8009304:	9904      	ldr	r1, [sp, #16]
 8009306:	4301      	orrs	r1, r0
 8009308:	f47f aec6 	bne.w	8009098 <_strtod_l+0x88>
 800930c:	2b00      	cmp	r3, #0
 800930e:	f47f aee1 	bne.w	80090d4 <_strtod_l+0xc4>
 8009312:	2a69      	cmp	r2, #105	; 0x69
 8009314:	d027      	beq.n	8009366 <_strtod_l+0x356>
 8009316:	dc24      	bgt.n	8009362 <_strtod_l+0x352>
 8009318:	2a49      	cmp	r2, #73	; 0x49
 800931a:	d024      	beq.n	8009366 <_strtod_l+0x356>
 800931c:	2a4e      	cmp	r2, #78	; 0x4e
 800931e:	f47f aed9 	bne.w	80090d4 <_strtod_l+0xc4>
 8009322:	499f      	ldr	r1, [pc, #636]	; (80095a0 <_strtod_l+0x590>)
 8009324:	a817      	add	r0, sp, #92	; 0x5c
 8009326:	f002 f8b3 	bl	800b490 <__match>
 800932a:	2800      	cmp	r0, #0
 800932c:	f43f aed2 	beq.w	80090d4 <_strtod_l+0xc4>
 8009330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b28      	cmp	r3, #40	; 0x28
 8009336:	d12d      	bne.n	8009394 <_strtod_l+0x384>
 8009338:	499a      	ldr	r1, [pc, #616]	; (80095a4 <_strtod_l+0x594>)
 800933a:	aa1a      	add	r2, sp, #104	; 0x68
 800933c:	a817      	add	r0, sp, #92	; 0x5c
 800933e:	f002 f8bb 	bl	800b4b8 <__hexnan>
 8009342:	2805      	cmp	r0, #5
 8009344:	d126      	bne.n	8009394 <_strtod_l+0x384>
 8009346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009348:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800934c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009350:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009354:	e6a0      	b.n	8009098 <_strtod_l+0x88>
 8009356:	210a      	movs	r1, #10
 8009358:	fb01 2e0e 	mla	lr, r1, lr, r2
 800935c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009360:	e7b9      	b.n	80092d6 <_strtod_l+0x2c6>
 8009362:	2a6e      	cmp	r2, #110	; 0x6e
 8009364:	e7db      	b.n	800931e <_strtod_l+0x30e>
 8009366:	4990      	ldr	r1, [pc, #576]	; (80095a8 <_strtod_l+0x598>)
 8009368:	a817      	add	r0, sp, #92	; 0x5c
 800936a:	f002 f891 	bl	800b490 <__match>
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f aeb0 	beq.w	80090d4 <_strtod_l+0xc4>
 8009374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009376:	498d      	ldr	r1, [pc, #564]	; (80095ac <_strtod_l+0x59c>)
 8009378:	3b01      	subs	r3, #1
 800937a:	a817      	add	r0, sp, #92	; 0x5c
 800937c:	9317      	str	r3, [sp, #92]	; 0x5c
 800937e:	f002 f887 	bl	800b490 <__match>
 8009382:	b910      	cbnz	r0, 800938a <_strtod_l+0x37a>
 8009384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009386:	3301      	adds	r3, #1
 8009388:	9317      	str	r3, [sp, #92]	; 0x5c
 800938a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80095bc <_strtod_l+0x5ac>
 800938e:	f04f 0a00 	mov.w	sl, #0
 8009392:	e681      	b.n	8009098 <_strtod_l+0x88>
 8009394:	4886      	ldr	r0, [pc, #536]	; (80095b0 <_strtod_l+0x5a0>)
 8009396:	f003 fa1f 	bl	800c7d8 <nan>
 800939a:	ec5b ab10 	vmov	sl, fp, d0
 800939e:	e67b      	b.n	8009098 <_strtod_l+0x88>
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	9807      	ldr	r0, [sp, #28]
 80093a4:	1af3      	subs	r3, r6, r3
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	bf08      	it	eq
 80093aa:	462f      	moveq	r7, r5
 80093ac:	2d10      	cmp	r5, #16
 80093ae:	9306      	str	r3, [sp, #24]
 80093b0:	46a8      	mov	r8, r5
 80093b2:	bfa8      	it	ge
 80093b4:	f04f 0810 	movge.w	r8, #16
 80093b8:	f7f7 f8c4 	bl	8000544 <__aeabi_ui2d>
 80093bc:	2d09      	cmp	r5, #9
 80093be:	4682      	mov	sl, r0
 80093c0:	468b      	mov	fp, r1
 80093c2:	dd13      	ble.n	80093ec <_strtod_l+0x3dc>
 80093c4:	4b7b      	ldr	r3, [pc, #492]	; (80095b4 <_strtod_l+0x5a4>)
 80093c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80093ce:	f7f7 f933 	bl	8000638 <__aeabi_dmul>
 80093d2:	4682      	mov	sl, r0
 80093d4:	4648      	mov	r0, r9
 80093d6:	468b      	mov	fp, r1
 80093d8:	f7f7 f8b4 	bl	8000544 <__aeabi_ui2d>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4650      	mov	r0, sl
 80093e2:	4659      	mov	r1, fp
 80093e4:	f7f6 ff72 	bl	80002cc <__adddf3>
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	2d0f      	cmp	r5, #15
 80093ee:	dc38      	bgt.n	8009462 <_strtod_l+0x452>
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f43f ae50 	beq.w	8009098 <_strtod_l+0x88>
 80093f8:	dd24      	ble.n	8009444 <_strtod_l+0x434>
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	dc0b      	bgt.n	8009416 <_strtod_l+0x406>
 80093fe:	496d      	ldr	r1, [pc, #436]	; (80095b4 <_strtod_l+0x5a4>)
 8009400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	f7f7 f914 	bl	8000638 <__aeabi_dmul>
 8009410:	4682      	mov	sl, r0
 8009412:	468b      	mov	fp, r1
 8009414:	e640      	b.n	8009098 <_strtod_l+0x88>
 8009416:	9a06      	ldr	r2, [sp, #24]
 8009418:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800941c:	4293      	cmp	r3, r2
 800941e:	db20      	blt.n	8009462 <_strtod_l+0x452>
 8009420:	4c64      	ldr	r4, [pc, #400]	; (80095b4 <_strtod_l+0x5a4>)
 8009422:	f1c5 050f 	rsb	r5, r5, #15
 8009426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009432:	f7f7 f901 	bl	8000638 <__aeabi_dmul>
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	1b5d      	subs	r5, r3, r5
 800943a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800943e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009442:	e7e3      	b.n	800940c <_strtod_l+0x3fc>
 8009444:	9b06      	ldr	r3, [sp, #24]
 8009446:	3316      	adds	r3, #22
 8009448:	db0b      	blt.n	8009462 <_strtod_l+0x452>
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	1b9e      	subs	r6, r3, r6
 800944e:	4b59      	ldr	r3, [pc, #356]	; (80095b4 <_strtod_l+0x5a4>)
 8009450:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 fa16 	bl	800088c <__aeabi_ddiv>
 8009460:	e7d6      	b.n	8009410 <_strtod_l+0x400>
 8009462:	9b06      	ldr	r3, [sp, #24]
 8009464:	eba5 0808 	sub.w	r8, r5, r8
 8009468:	4498      	add	r8, r3
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	dd74      	ble.n	800955a <_strtod_l+0x54a>
 8009470:	f018 030f 	ands.w	r3, r8, #15
 8009474:	d00a      	beq.n	800948c <_strtod_l+0x47c>
 8009476:	494f      	ldr	r1, [pc, #316]	; (80095b4 <_strtod_l+0x5a4>)
 8009478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800947c:	4652      	mov	r2, sl
 800947e:	465b      	mov	r3, fp
 8009480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	4682      	mov	sl, r0
 800948a:	468b      	mov	fp, r1
 800948c:	f038 080f 	bics.w	r8, r8, #15
 8009490:	d04f      	beq.n	8009532 <_strtod_l+0x522>
 8009492:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009496:	dd22      	ble.n	80094de <_strtod_l+0x4ce>
 8009498:	2500      	movs	r5, #0
 800949a:	462e      	mov	r6, r5
 800949c:	9507      	str	r5, [sp, #28]
 800949e:	9505      	str	r5, [sp, #20]
 80094a0:	2322      	movs	r3, #34	; 0x22
 80094a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80095bc <_strtod_l+0x5ac>
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	f04f 0a00 	mov.w	sl, #0
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f43f adf2 	beq.w	8009098 <_strtod_l+0x88>
 80094b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094b6:	4620      	mov	r0, r4
 80094b8:	f002 f960 	bl	800b77c <_Bfree>
 80094bc:	9905      	ldr	r1, [sp, #20]
 80094be:	4620      	mov	r0, r4
 80094c0:	f002 f95c 	bl	800b77c <_Bfree>
 80094c4:	4631      	mov	r1, r6
 80094c6:	4620      	mov	r0, r4
 80094c8:	f002 f958 	bl	800b77c <_Bfree>
 80094cc:	9907      	ldr	r1, [sp, #28]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f002 f954 	bl	800b77c <_Bfree>
 80094d4:	4629      	mov	r1, r5
 80094d6:	4620      	mov	r0, r4
 80094d8:	f002 f950 	bl	800b77c <_Bfree>
 80094dc:	e5dc      	b.n	8009098 <_strtod_l+0x88>
 80094de:	4b36      	ldr	r3, [pc, #216]	; (80095b8 <_strtod_l+0x5a8>)
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	2300      	movs	r3, #0
 80094e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	4699      	mov	r9, r3
 80094ee:	f1b8 0f01 	cmp.w	r8, #1
 80094f2:	dc21      	bgt.n	8009538 <_strtod_l+0x528>
 80094f4:	b10b      	cbz	r3, 80094fa <_strtod_l+0x4ea>
 80094f6:	4682      	mov	sl, r0
 80094f8:	468b      	mov	fp, r1
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <_strtod_l+0x5a8>)
 80094fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009500:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009504:	4652      	mov	r2, sl
 8009506:	465b      	mov	r3, fp
 8009508:	e9d9 0100 	ldrd	r0, r1, [r9]
 800950c:	f7f7 f894 	bl	8000638 <__aeabi_dmul>
 8009510:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <_strtod_l+0x5ac>)
 8009512:	460a      	mov	r2, r1
 8009514:	400b      	ands	r3, r1
 8009516:	492a      	ldr	r1, [pc, #168]	; (80095c0 <_strtod_l+0x5b0>)
 8009518:	428b      	cmp	r3, r1
 800951a:	4682      	mov	sl, r0
 800951c:	d8bc      	bhi.n	8009498 <_strtod_l+0x488>
 800951e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009522:	428b      	cmp	r3, r1
 8009524:	bf86      	itte	hi
 8009526:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80095c4 <_strtod_l+0x5b4>
 800952a:	f04f 3aff 	movhi.w	sl, #4294967295
 800952e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009532:	2300      	movs	r3, #0
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	e084      	b.n	8009642 <_strtod_l+0x632>
 8009538:	f018 0f01 	tst.w	r8, #1
 800953c:	d005      	beq.n	800954a <_strtod_l+0x53a>
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f7 f878 	bl	8000638 <__aeabi_dmul>
 8009548:	2301      	movs	r3, #1
 800954a:	9a04      	ldr	r2, [sp, #16]
 800954c:	3208      	adds	r2, #8
 800954e:	f109 0901 	add.w	r9, r9, #1
 8009552:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009556:	9204      	str	r2, [sp, #16]
 8009558:	e7c9      	b.n	80094ee <_strtod_l+0x4de>
 800955a:	d0ea      	beq.n	8009532 <_strtod_l+0x522>
 800955c:	f1c8 0800 	rsb	r8, r8, #0
 8009560:	f018 020f 	ands.w	r2, r8, #15
 8009564:	d00a      	beq.n	800957c <_strtod_l+0x56c>
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <_strtod_l+0x5a4>)
 8009568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800956c:	4650      	mov	r0, sl
 800956e:	4659      	mov	r1, fp
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f7 f98a 	bl	800088c <__aeabi_ddiv>
 8009578:	4682      	mov	sl, r0
 800957a:	468b      	mov	fp, r1
 800957c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009580:	d0d7      	beq.n	8009532 <_strtod_l+0x522>
 8009582:	f1b8 0f1f 	cmp.w	r8, #31
 8009586:	dd1f      	ble.n	80095c8 <_strtod_l+0x5b8>
 8009588:	2500      	movs	r5, #0
 800958a:	462e      	mov	r6, r5
 800958c:	9507      	str	r5, [sp, #28]
 800958e:	9505      	str	r5, [sp, #20]
 8009590:	2322      	movs	r3, #34	; 0x22
 8009592:	f04f 0a00 	mov.w	sl, #0
 8009596:	f04f 0b00 	mov.w	fp, #0
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	e786      	b.n	80094ac <_strtod_l+0x49c>
 800959e:	bf00      	nop
 80095a0:	0800db01 	.word	0x0800db01
 80095a4:	0800db44 	.word	0x0800db44
 80095a8:	0800daf9 	.word	0x0800daf9
 80095ac:	0800dc84 	.word	0x0800dc84
 80095b0:	0800df98 	.word	0x0800df98
 80095b4:	0800de78 	.word	0x0800de78
 80095b8:	0800de50 	.word	0x0800de50
 80095bc:	7ff00000 	.word	0x7ff00000
 80095c0:	7ca00000 	.word	0x7ca00000
 80095c4:	7fefffff 	.word	0x7fefffff
 80095c8:	f018 0310 	ands.w	r3, r8, #16
 80095cc:	bf18      	it	ne
 80095ce:	236a      	movne	r3, #106	; 0x6a
 80095d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009980 <_strtod_l+0x970>
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	2300      	movs	r3, #0
 80095dc:	f018 0f01 	tst.w	r8, #1
 80095e0:	d004      	beq.n	80095ec <_strtod_l+0x5dc>
 80095e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80095e6:	f7f7 f827 	bl	8000638 <__aeabi_dmul>
 80095ea:	2301      	movs	r3, #1
 80095ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80095f0:	f109 0908 	add.w	r9, r9, #8
 80095f4:	d1f2      	bne.n	80095dc <_strtod_l+0x5cc>
 80095f6:	b10b      	cbz	r3, 80095fc <_strtod_l+0x5ec>
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	b1c3      	cbz	r3, 8009632 <_strtod_l+0x622>
 8009600:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009604:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009608:	2b00      	cmp	r3, #0
 800960a:	4659      	mov	r1, fp
 800960c:	dd11      	ble.n	8009632 <_strtod_l+0x622>
 800960e:	2b1f      	cmp	r3, #31
 8009610:	f340 8124 	ble.w	800985c <_strtod_l+0x84c>
 8009614:	2b34      	cmp	r3, #52	; 0x34
 8009616:	bfde      	ittt	le
 8009618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800961c:	f04f 33ff 	movle.w	r3, #4294967295
 8009620:	fa03 f202 	lslle.w	r2, r3, r2
 8009624:	f04f 0a00 	mov.w	sl, #0
 8009628:	bfcc      	ite	gt
 800962a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800962e:	ea02 0b01 	andle.w	fp, r2, r1
 8009632:	2200      	movs	r2, #0
 8009634:	2300      	movs	r3, #0
 8009636:	4650      	mov	r0, sl
 8009638:	4659      	mov	r1, fp
 800963a:	f7f7 fa65 	bl	8000b08 <__aeabi_dcmpeq>
 800963e:	2800      	cmp	r0, #0
 8009640:	d1a2      	bne.n	8009588 <_strtod_l+0x578>
 8009642:	9b07      	ldr	r3, [sp, #28]
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	9908      	ldr	r1, [sp, #32]
 8009648:	462b      	mov	r3, r5
 800964a:	463a      	mov	r2, r7
 800964c:	4620      	mov	r0, r4
 800964e:	f002 f8fd 	bl	800b84c <__s2b>
 8009652:	9007      	str	r0, [sp, #28]
 8009654:	2800      	cmp	r0, #0
 8009656:	f43f af1f 	beq.w	8009498 <_strtod_l+0x488>
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	1b9e      	subs	r6, r3, r6
 800965e:	9b06      	ldr	r3, [sp, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfb4      	ite	lt
 8009664:	4633      	movlt	r3, r6
 8009666:	2300      	movge	r3, #0
 8009668:	930c      	str	r3, [sp, #48]	; 0x30
 800966a:	9b06      	ldr	r3, [sp, #24]
 800966c:	2500      	movs	r5, #0
 800966e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009672:	9312      	str	r3, [sp, #72]	; 0x48
 8009674:	462e      	mov	r6, r5
 8009676:	9b07      	ldr	r3, [sp, #28]
 8009678:	4620      	mov	r0, r4
 800967a:	6859      	ldr	r1, [r3, #4]
 800967c:	f002 f83e 	bl	800b6fc <_Balloc>
 8009680:	9005      	str	r0, [sp, #20]
 8009682:	2800      	cmp	r0, #0
 8009684:	f43f af0c 	beq.w	80094a0 <_strtod_l+0x490>
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	691a      	ldr	r2, [r3, #16]
 800968c:	3202      	adds	r2, #2
 800968e:	f103 010c 	add.w	r1, r3, #12
 8009692:	0092      	lsls	r2, r2, #2
 8009694:	300c      	adds	r0, #12
 8009696:	f7fe fd59 	bl	800814c <memcpy>
 800969a:	ec4b ab10 	vmov	d0, sl, fp
 800969e:	aa1a      	add	r2, sp, #104	; 0x68
 80096a0:	a919      	add	r1, sp, #100	; 0x64
 80096a2:	4620      	mov	r0, r4
 80096a4:	f002 fc18 	bl	800bed8 <__d2b>
 80096a8:	ec4b ab18 	vmov	d8, sl, fp
 80096ac:	9018      	str	r0, [sp, #96]	; 0x60
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f aef6 	beq.w	80094a0 <_strtod_l+0x490>
 80096b4:	2101      	movs	r1, #1
 80096b6:	4620      	mov	r0, r4
 80096b8:	f002 f962 	bl	800b980 <__i2b>
 80096bc:	4606      	mov	r6, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	f43f aeee 	beq.w	80094a0 <_strtod_l+0x490>
 80096c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096c6:	9904      	ldr	r1, [sp, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfab      	itete	ge
 80096cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80096ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80096d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80096d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80096d6:	bfac      	ite	ge
 80096d8:	eb03 0902 	addge.w	r9, r3, r2
 80096dc:	1ad7      	sublt	r7, r2, r3
 80096de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096e0:	eba3 0801 	sub.w	r8, r3, r1
 80096e4:	4490      	add	r8, r2
 80096e6:	4ba1      	ldr	r3, [pc, #644]	; (800996c <_strtod_l+0x95c>)
 80096e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80096ec:	4598      	cmp	r8, r3
 80096ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80096f2:	f280 80c7 	bge.w	8009884 <_strtod_l+0x874>
 80096f6:	eba3 0308 	sub.w	r3, r3, r8
 80096fa:	2b1f      	cmp	r3, #31
 80096fc:	eba2 0203 	sub.w	r2, r2, r3
 8009700:	f04f 0101 	mov.w	r1, #1
 8009704:	f300 80b1 	bgt.w	800986a <_strtod_l+0x85a>
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	930d      	str	r3, [sp, #52]	; 0x34
 800970e:	2300      	movs	r3, #0
 8009710:	9308      	str	r3, [sp, #32]
 8009712:	eb09 0802 	add.w	r8, r9, r2
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	45c1      	cmp	r9, r8
 800971a:	4417      	add	r7, r2
 800971c:	441f      	add	r7, r3
 800971e:	464b      	mov	r3, r9
 8009720:	bfa8      	it	ge
 8009722:	4643      	movge	r3, r8
 8009724:	42bb      	cmp	r3, r7
 8009726:	bfa8      	it	ge
 8009728:	463b      	movge	r3, r7
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfc2      	ittt	gt
 800972e:	eba8 0803 	subgt.w	r8, r8, r3
 8009732:	1aff      	subgt	r7, r7, r3
 8009734:	eba9 0903 	subgt.w	r9, r9, r3
 8009738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd17      	ble.n	800976e <_strtod_l+0x75e>
 800973e:	4631      	mov	r1, r6
 8009740:	461a      	mov	r2, r3
 8009742:	4620      	mov	r0, r4
 8009744:	f002 f9dc 	bl	800bb00 <__pow5mult>
 8009748:	4606      	mov	r6, r0
 800974a:	2800      	cmp	r0, #0
 800974c:	f43f aea8 	beq.w	80094a0 <_strtod_l+0x490>
 8009750:	4601      	mov	r1, r0
 8009752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009754:	4620      	mov	r0, r4
 8009756:	f002 f929 	bl	800b9ac <__multiply>
 800975a:	900b      	str	r0, [sp, #44]	; 0x2c
 800975c:	2800      	cmp	r0, #0
 800975e:	f43f ae9f 	beq.w	80094a0 <_strtod_l+0x490>
 8009762:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009764:	4620      	mov	r0, r4
 8009766:	f002 f809 	bl	800b77c <_Bfree>
 800976a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800976c:	9318      	str	r3, [sp, #96]	; 0x60
 800976e:	f1b8 0f00 	cmp.w	r8, #0
 8009772:	f300 808c 	bgt.w	800988e <_strtod_l+0x87e>
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	dd08      	ble.n	800978e <_strtod_l+0x77e>
 800977c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800977e:	9905      	ldr	r1, [sp, #20]
 8009780:	4620      	mov	r0, r4
 8009782:	f002 f9bd 	bl	800bb00 <__pow5mult>
 8009786:	9005      	str	r0, [sp, #20]
 8009788:	2800      	cmp	r0, #0
 800978a:	f43f ae89 	beq.w	80094a0 <_strtod_l+0x490>
 800978e:	2f00      	cmp	r7, #0
 8009790:	dd08      	ble.n	80097a4 <_strtod_l+0x794>
 8009792:	9905      	ldr	r1, [sp, #20]
 8009794:	463a      	mov	r2, r7
 8009796:	4620      	mov	r0, r4
 8009798:	f002 fa0c 	bl	800bbb4 <__lshift>
 800979c:	9005      	str	r0, [sp, #20]
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f ae7e 	beq.w	80094a0 <_strtod_l+0x490>
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	dd08      	ble.n	80097bc <_strtod_l+0x7ac>
 80097aa:	4631      	mov	r1, r6
 80097ac:	464a      	mov	r2, r9
 80097ae:	4620      	mov	r0, r4
 80097b0:	f002 fa00 	bl	800bbb4 <__lshift>
 80097b4:	4606      	mov	r6, r0
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f43f ae72 	beq.w	80094a0 <_strtod_l+0x490>
 80097bc:	9a05      	ldr	r2, [sp, #20]
 80097be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097c0:	4620      	mov	r0, r4
 80097c2:	f002 fa83 	bl	800bccc <__mdiff>
 80097c6:	4605      	mov	r5, r0
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f43f ae69 	beq.w	80094a0 <_strtod_l+0x490>
 80097ce:	68c3      	ldr	r3, [r0, #12]
 80097d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d2:	2300      	movs	r3, #0
 80097d4:	60c3      	str	r3, [r0, #12]
 80097d6:	4631      	mov	r1, r6
 80097d8:	f002 fa5c 	bl	800bc94 <__mcmp>
 80097dc:	2800      	cmp	r0, #0
 80097de:	da60      	bge.n	80098a2 <_strtod_l+0x892>
 80097e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e2:	ea53 030a 	orrs.w	r3, r3, sl
 80097e6:	f040 8082 	bne.w	80098ee <_strtod_l+0x8de>
 80097ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d17d      	bne.n	80098ee <_strtod_l+0x8de>
 80097f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097f6:	0d1b      	lsrs	r3, r3, #20
 80097f8:	051b      	lsls	r3, r3, #20
 80097fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097fe:	d976      	bls.n	80098ee <_strtod_l+0x8de>
 8009800:	696b      	ldr	r3, [r5, #20]
 8009802:	b913      	cbnz	r3, 800980a <_strtod_l+0x7fa>
 8009804:	692b      	ldr	r3, [r5, #16]
 8009806:	2b01      	cmp	r3, #1
 8009808:	dd71      	ble.n	80098ee <_strtod_l+0x8de>
 800980a:	4629      	mov	r1, r5
 800980c:	2201      	movs	r2, #1
 800980e:	4620      	mov	r0, r4
 8009810:	f002 f9d0 	bl	800bbb4 <__lshift>
 8009814:	4631      	mov	r1, r6
 8009816:	4605      	mov	r5, r0
 8009818:	f002 fa3c 	bl	800bc94 <__mcmp>
 800981c:	2800      	cmp	r0, #0
 800981e:	dd66      	ble.n	80098ee <_strtod_l+0x8de>
 8009820:	9904      	ldr	r1, [sp, #16]
 8009822:	4a53      	ldr	r2, [pc, #332]	; (8009970 <_strtod_l+0x960>)
 8009824:	465b      	mov	r3, fp
 8009826:	2900      	cmp	r1, #0
 8009828:	f000 8081 	beq.w	800992e <_strtod_l+0x91e>
 800982c:	ea02 010b 	and.w	r1, r2, fp
 8009830:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009834:	dc7b      	bgt.n	800992e <_strtod_l+0x91e>
 8009836:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800983a:	f77f aea9 	ble.w	8009590 <_strtod_l+0x580>
 800983e:	4b4d      	ldr	r3, [pc, #308]	; (8009974 <_strtod_l+0x964>)
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	2200      	movs	r2, #0
 8009846:	f7f6 fef7 	bl	8000638 <__aeabi_dmul>
 800984a:	460b      	mov	r3, r1
 800984c:	4303      	orrs	r3, r0
 800984e:	bf08      	it	eq
 8009850:	2322      	moveq	r3, #34	; 0x22
 8009852:	4682      	mov	sl, r0
 8009854:	468b      	mov	fp, r1
 8009856:	bf08      	it	eq
 8009858:	6023      	streq	r3, [r4, #0]
 800985a:	e62b      	b.n	80094b4 <_strtod_l+0x4a4>
 800985c:	f04f 32ff 	mov.w	r2, #4294967295
 8009860:	fa02 f303 	lsl.w	r3, r2, r3
 8009864:	ea03 0a0a 	and.w	sl, r3, sl
 8009868:	e6e3      	b.n	8009632 <_strtod_l+0x622>
 800986a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800986e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009872:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009876:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800987a:	fa01 f308 	lsl.w	r3, r1, r8
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	910d      	str	r1, [sp, #52]	; 0x34
 8009882:	e746      	b.n	8009712 <_strtod_l+0x702>
 8009884:	2300      	movs	r3, #0
 8009886:	9308      	str	r3, [sp, #32]
 8009888:	2301      	movs	r3, #1
 800988a:	930d      	str	r3, [sp, #52]	; 0x34
 800988c:	e741      	b.n	8009712 <_strtod_l+0x702>
 800988e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009890:	4642      	mov	r2, r8
 8009892:	4620      	mov	r0, r4
 8009894:	f002 f98e 	bl	800bbb4 <__lshift>
 8009898:	9018      	str	r0, [sp, #96]	; 0x60
 800989a:	2800      	cmp	r0, #0
 800989c:	f47f af6b 	bne.w	8009776 <_strtod_l+0x766>
 80098a0:	e5fe      	b.n	80094a0 <_strtod_l+0x490>
 80098a2:	465f      	mov	r7, fp
 80098a4:	d16e      	bne.n	8009984 <_strtod_l+0x974>
 80098a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098ac:	b342      	cbz	r2, 8009900 <_strtod_l+0x8f0>
 80098ae:	4a32      	ldr	r2, [pc, #200]	; (8009978 <_strtod_l+0x968>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d128      	bne.n	8009906 <_strtod_l+0x8f6>
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	4651      	mov	r1, sl
 80098b8:	b1eb      	cbz	r3, 80098f6 <_strtod_l+0x8e6>
 80098ba:	4b2d      	ldr	r3, [pc, #180]	; (8009970 <_strtod_l+0x960>)
 80098bc:	403b      	ands	r3, r7
 80098be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295
 80098c6:	d819      	bhi.n	80098fc <_strtod_l+0x8ec>
 80098c8:	0d1b      	lsrs	r3, r3, #20
 80098ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d117      	bne.n	8009906 <_strtod_l+0x8f6>
 80098d6:	4b29      	ldr	r3, [pc, #164]	; (800997c <_strtod_l+0x96c>)
 80098d8:	429f      	cmp	r7, r3
 80098da:	d102      	bne.n	80098e2 <_strtod_l+0x8d2>
 80098dc:	3101      	adds	r1, #1
 80098de:	f43f addf 	beq.w	80094a0 <_strtod_l+0x490>
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <_strtod_l+0x960>)
 80098e4:	403b      	ands	r3, r7
 80098e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80098ea:	f04f 0a00 	mov.w	sl, #0
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1a4      	bne.n	800983e <_strtod_l+0x82e>
 80098f4:	e5de      	b.n	80094b4 <_strtod_l+0x4a4>
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	e7ea      	b.n	80098d2 <_strtod_l+0x8c2>
 80098fc:	4613      	mov	r3, r2
 80098fe:	e7e8      	b.n	80098d2 <_strtod_l+0x8c2>
 8009900:	ea53 030a 	orrs.w	r3, r3, sl
 8009904:	d08c      	beq.n	8009820 <_strtod_l+0x810>
 8009906:	9b08      	ldr	r3, [sp, #32]
 8009908:	b1db      	cbz	r3, 8009942 <_strtod_l+0x932>
 800990a:	423b      	tst	r3, r7
 800990c:	d0ef      	beq.n	80098ee <_strtod_l+0x8de>
 800990e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009910:	9a04      	ldr	r2, [sp, #16]
 8009912:	4650      	mov	r0, sl
 8009914:	4659      	mov	r1, fp
 8009916:	b1c3      	cbz	r3, 800994a <_strtod_l+0x93a>
 8009918:	f7ff fb5c 	bl	8008fd4 <sulp>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	ec51 0b18 	vmov	r0, r1, d8
 8009924:	f7f6 fcd2 	bl	80002cc <__adddf3>
 8009928:	4682      	mov	sl, r0
 800992a:	468b      	mov	fp, r1
 800992c:	e7df      	b.n	80098ee <_strtod_l+0x8de>
 800992e:	4013      	ands	r3, r2
 8009930:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009934:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009938:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800993c:	f04f 3aff 	mov.w	sl, #4294967295
 8009940:	e7d5      	b.n	80098ee <_strtod_l+0x8de>
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	ea13 0f0a 	tst.w	r3, sl
 8009948:	e7e0      	b.n	800990c <_strtod_l+0x8fc>
 800994a:	f7ff fb43 	bl	8008fd4 <sulp>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	ec51 0b18 	vmov	r0, r1, d8
 8009956:	f7f6 fcb7 	bl	80002c8 <__aeabi_dsub>
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	4682      	mov	sl, r0
 8009960:	468b      	mov	fp, r1
 8009962:	f7f7 f8d1 	bl	8000b08 <__aeabi_dcmpeq>
 8009966:	2800      	cmp	r0, #0
 8009968:	d0c1      	beq.n	80098ee <_strtod_l+0x8de>
 800996a:	e611      	b.n	8009590 <_strtod_l+0x580>
 800996c:	fffffc02 	.word	0xfffffc02
 8009970:	7ff00000 	.word	0x7ff00000
 8009974:	39500000 	.word	0x39500000
 8009978:	000fffff 	.word	0x000fffff
 800997c:	7fefffff 	.word	0x7fefffff
 8009980:	0800db58 	.word	0x0800db58
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	f002 fb02 	bl	800bf90 <__ratio>
 800998c:	ec59 8b10 	vmov	r8, r9, d0
 8009990:	ee10 0a10 	vmov	r0, s0
 8009994:	2200      	movs	r2, #0
 8009996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800999a:	4649      	mov	r1, r9
 800999c:	f7f7 f8c8 	bl	8000b30 <__aeabi_dcmple>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d07a      	beq.n	8009a9a <_strtod_l+0xa8a>
 80099a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d04a      	beq.n	8009a40 <_strtod_l+0xa30>
 80099aa:	4b95      	ldr	r3, [pc, #596]	; (8009c00 <_strtod_l+0xbf0>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009c00 <_strtod_l+0xbf0>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	4b92      	ldr	r3, [pc, #584]	; (8009c04 <_strtod_l+0xbf4>)
 80099bc:	403b      	ands	r3, r7
 80099be:	930d      	str	r3, [sp, #52]	; 0x34
 80099c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099c2:	4b91      	ldr	r3, [pc, #580]	; (8009c08 <_strtod_l+0xbf8>)
 80099c4:	429a      	cmp	r2, r3
 80099c6:	f040 80b0 	bne.w	8009b2a <_strtod_l+0xb1a>
 80099ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80099d2:	ec4b ab10 	vmov	d0, sl, fp
 80099d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099da:	f002 fa01 	bl	800bde0 <__ulp>
 80099de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099e2:	ec53 2b10 	vmov	r2, r3, d0
 80099e6:	f7f6 fe27 	bl	8000638 <__aeabi_dmul>
 80099ea:	4652      	mov	r2, sl
 80099ec:	465b      	mov	r3, fp
 80099ee:	f7f6 fc6d 	bl	80002cc <__adddf3>
 80099f2:	460b      	mov	r3, r1
 80099f4:	4983      	ldr	r1, [pc, #524]	; (8009c04 <_strtod_l+0xbf4>)
 80099f6:	4a85      	ldr	r2, [pc, #532]	; (8009c0c <_strtod_l+0xbfc>)
 80099f8:	4019      	ands	r1, r3
 80099fa:	4291      	cmp	r1, r2
 80099fc:	4682      	mov	sl, r0
 80099fe:	d960      	bls.n	8009ac2 <_strtod_l+0xab2>
 8009a00:	ee18 3a90 	vmov	r3, s17
 8009a04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d104      	bne.n	8009a16 <_strtod_l+0xa06>
 8009a0c:	ee18 3a10 	vmov	r3, s16
 8009a10:	3301      	adds	r3, #1
 8009a12:	f43f ad45 	beq.w	80094a0 <_strtod_l+0x490>
 8009a16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009c18 <_strtod_l+0xc08>
 8009a1a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 feab 	bl	800b77c <_Bfree>
 8009a26:	9905      	ldr	r1, [sp, #20]
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f001 fea7 	bl	800b77c <_Bfree>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fea3 	bl	800b77c <_Bfree>
 8009a36:	4629      	mov	r1, r5
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f001 fe9f 	bl	800b77c <_Bfree>
 8009a3e:	e61a      	b.n	8009676 <_strtod_l+0x666>
 8009a40:	f1ba 0f00 	cmp.w	sl, #0
 8009a44:	d11b      	bne.n	8009a7e <_strtod_l+0xa6e>
 8009a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a4a:	b9f3      	cbnz	r3, 8009a8a <_strtod_l+0xa7a>
 8009a4c:	4b6c      	ldr	r3, [pc, #432]	; (8009c00 <_strtod_l+0xbf0>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4640      	mov	r0, r8
 8009a52:	4649      	mov	r1, r9
 8009a54:	f7f7 f862 	bl	8000b1c <__aeabi_dcmplt>
 8009a58:	b9d0      	cbnz	r0, 8009a90 <_strtod_l+0xa80>
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4b6c      	ldr	r3, [pc, #432]	; (8009c10 <_strtod_l+0xc00>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	4680      	mov	r8, r0
 8009a68:	4689      	mov	r9, r1
 8009a6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009a72:	9315      	str	r3, [sp, #84]	; 0x54
 8009a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009a78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a7c:	e79d      	b.n	80099ba <_strtod_l+0x9aa>
 8009a7e:	f1ba 0f01 	cmp.w	sl, #1
 8009a82:	d102      	bne.n	8009a8a <_strtod_l+0xa7a>
 8009a84:	2f00      	cmp	r7, #0
 8009a86:	f43f ad83 	beq.w	8009590 <_strtod_l+0x580>
 8009a8a:	4b62      	ldr	r3, [pc, #392]	; (8009c14 <_strtod_l+0xc04>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	e78e      	b.n	80099ae <_strtod_l+0x99e>
 8009a90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009c10 <_strtod_l+0xc00>
 8009a94:	f04f 0800 	mov.w	r8, #0
 8009a98:	e7e7      	b.n	8009a6a <_strtod_l+0xa5a>
 8009a9a:	4b5d      	ldr	r3, [pc, #372]	; (8009c10 <_strtod_l+0xc00>)
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f7f6 fdc9 	bl	8000638 <__aeabi_dmul>
 8009aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4689      	mov	r9, r1
 8009aac:	b933      	cbnz	r3, 8009abc <_strtod_l+0xaac>
 8009aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ab2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ab4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009aba:	e7dd      	b.n	8009a78 <_strtod_l+0xa68>
 8009abc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ac0:	e7f9      	b.n	8009ab6 <_strtod_l+0xaa6>
 8009ac2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1a8      	bne.n	8009a1e <_strtod_l+0xa0e>
 8009acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad2:	0d1b      	lsrs	r3, r3, #20
 8009ad4:	051b      	lsls	r3, r3, #20
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d1a1      	bne.n	8009a1e <_strtod_l+0xa0e>
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f7 f90b 	bl	8000cf8 <__aeabi_d2lz>
 8009ae2:	f7f6 fd7b 	bl	80005dc <__aeabi_l2d>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f6 fbeb 	bl	80002c8 <__aeabi_dsub>
 8009af2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009af8:	ea43 030a 	orr.w	r3, r3, sl
 8009afc:	4313      	orrs	r3, r2
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	d055      	beq.n	8009bb0 <_strtod_l+0xba0>
 8009b04:	a336      	add	r3, pc, #216	; (adr r3, 8009be0 <_strtod_l+0xbd0>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f7f7 f807 	bl	8000b1c <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f47f acd0 	bne.w	80094b4 <_strtod_l+0x4a4>
 8009b14:	a334      	add	r3, pc, #208	; (adr r3, 8009be8 <_strtod_l+0xbd8>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f7 f81b 	bl	8000b58 <__aeabi_dcmpgt>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f43f af7b 	beq.w	8009a1e <_strtod_l+0xa0e>
 8009b28:	e4c4      	b.n	80094b4 <_strtod_l+0x4a4>
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	b333      	cbz	r3, 8009b7c <_strtod_l+0xb6c>
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b34:	d822      	bhi.n	8009b7c <_strtod_l+0xb6c>
 8009b36:	a32e      	add	r3, pc, #184	; (adr r3, 8009bf0 <_strtod_l+0xbe0>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	4649      	mov	r1, r9
 8009b40:	f7f6 fff6 	bl	8000b30 <__aeabi_dcmple>
 8009b44:	b1a0      	cbz	r0, 8009b70 <_strtod_l+0xb60>
 8009b46:	4649      	mov	r1, r9
 8009b48:	4640      	mov	r0, r8
 8009b4a:	f7f7 f84d 	bl	8000be8 <__aeabi_d2uiz>
 8009b4e:	2801      	cmp	r0, #1
 8009b50:	bf38      	it	cc
 8009b52:	2001      	movcc	r0, #1
 8009b54:	f7f6 fcf6 	bl	8000544 <__aeabi_ui2d>
 8009b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	bb23      	cbnz	r3, 8009baa <_strtod_l+0xb9a>
 8009b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b64:	9010      	str	r0, [sp, #64]	; 0x40
 8009b66:	9311      	str	r3, [sp, #68]	; 0x44
 8009b68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b78:	1a9b      	subs	r3, r3, r2
 8009b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b80:	eeb0 0a48 	vmov.f32	s0, s16
 8009b84:	eef0 0a68 	vmov.f32	s1, s17
 8009b88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b8c:	f002 f928 	bl	800bde0 <__ulp>
 8009b90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b94:	ec53 2b10 	vmov	r2, r3, d0
 8009b98:	f7f6 fd4e 	bl	8000638 <__aeabi_dmul>
 8009b9c:	ec53 2b18 	vmov	r2, r3, d8
 8009ba0:	f7f6 fb94 	bl	80002cc <__adddf3>
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	468b      	mov	fp, r1
 8009ba8:	e78d      	b.n	8009ac6 <_strtod_l+0xab6>
 8009baa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009bae:	e7db      	b.n	8009b68 <_strtod_l+0xb58>
 8009bb0:	a311      	add	r3, pc, #68	; (adr r3, 8009bf8 <_strtod_l+0xbe8>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 ffb1 	bl	8000b1c <__aeabi_dcmplt>
 8009bba:	e7b2      	b.n	8009b22 <_strtod_l+0xb12>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	f7ff ba6b 	b.w	80090a0 <_strtod_l+0x90>
 8009bca:	2a65      	cmp	r2, #101	; 0x65
 8009bcc:	f43f ab5f 	beq.w	800928e <_strtod_l+0x27e>
 8009bd0:	2a45      	cmp	r2, #69	; 0x45
 8009bd2:	f43f ab5c 	beq.w	800928e <_strtod_l+0x27e>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f7ff bb94 	b.w	8009304 <_strtod_l+0x2f4>
 8009bdc:	f3af 8000 	nop.w
 8009be0:	94a03595 	.word	0x94a03595
 8009be4:	3fdfffff 	.word	0x3fdfffff
 8009be8:	35afe535 	.word	0x35afe535
 8009bec:	3fe00000 	.word	0x3fe00000
 8009bf0:	ffc00000 	.word	0xffc00000
 8009bf4:	41dfffff 	.word	0x41dfffff
 8009bf8:	94a03595 	.word	0x94a03595
 8009bfc:	3fcfffff 	.word	0x3fcfffff
 8009c00:	3ff00000 	.word	0x3ff00000
 8009c04:	7ff00000 	.word	0x7ff00000
 8009c08:	7fe00000 	.word	0x7fe00000
 8009c0c:	7c9fffff 	.word	0x7c9fffff
 8009c10:	3fe00000 	.word	0x3fe00000
 8009c14:	bff00000 	.word	0xbff00000
 8009c18:	7fefffff 	.word	0x7fefffff

08009c1c <_strtod_r>:
 8009c1c:	4b01      	ldr	r3, [pc, #4]	; (8009c24 <_strtod_r+0x8>)
 8009c1e:	f7ff b9f7 	b.w	8009010 <_strtod_l>
 8009c22:	bf00      	nop
 8009c24:	20000078 	.word	0x20000078

08009c28 <_strtol_l.constprop.0>:
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2e:	d001      	beq.n	8009c34 <_strtol_l.constprop.0+0xc>
 8009c30:	2b24      	cmp	r3, #36	; 0x24
 8009c32:	d906      	bls.n	8009c42 <_strtol_l.constprop.0+0x1a>
 8009c34:	f7fe fa60 	bl	80080f8 <__errno>
 8009c38:	2316      	movs	r3, #22
 8009c3a:	6003      	str	r3, [r0, #0]
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d28 <_strtol_l.constprop.0+0x100>
 8009c46:	460d      	mov	r5, r1
 8009c48:	462e      	mov	r6, r5
 8009c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c52:	f017 0708 	ands.w	r7, r7, #8
 8009c56:	d1f7      	bne.n	8009c48 <_strtol_l.constprop.0+0x20>
 8009c58:	2c2d      	cmp	r4, #45	; 0x2d
 8009c5a:	d132      	bne.n	8009cc2 <_strtol_l.constprop.0+0x9a>
 8009c5c:	782c      	ldrb	r4, [r5, #0]
 8009c5e:	2701      	movs	r7, #1
 8009c60:	1cb5      	adds	r5, r6, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d05b      	beq.n	8009d1e <_strtol_l.constprop.0+0xf6>
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d109      	bne.n	8009c7e <_strtol_l.constprop.0+0x56>
 8009c6a:	2c30      	cmp	r4, #48	; 0x30
 8009c6c:	d107      	bne.n	8009c7e <_strtol_l.constprop.0+0x56>
 8009c6e:	782c      	ldrb	r4, [r5, #0]
 8009c70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c74:	2c58      	cmp	r4, #88	; 0x58
 8009c76:	d14d      	bne.n	8009d14 <_strtol_l.constprop.0+0xec>
 8009c78:	786c      	ldrb	r4, [r5, #1]
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	3502      	adds	r5, #2
 8009c7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c8e:	4666      	mov	r6, ip
 8009c90:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c98:	f1be 0f09 	cmp.w	lr, #9
 8009c9c:	d816      	bhi.n	8009ccc <_strtol_l.constprop.0+0xa4>
 8009c9e:	4674      	mov	r4, lr
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	dd24      	ble.n	8009cee <_strtol_l.constprop.0+0xc6>
 8009ca4:	f1bc 0f00 	cmp.w	ip, #0
 8009ca8:	db1e      	blt.n	8009ce8 <_strtol_l.constprop.0+0xc0>
 8009caa:	45b1      	cmp	r9, r6
 8009cac:	d31c      	bcc.n	8009ce8 <_strtol_l.constprop.0+0xc0>
 8009cae:	d101      	bne.n	8009cb4 <_strtol_l.constprop.0+0x8c>
 8009cb0:	45a2      	cmp	sl, r4
 8009cb2:	db19      	blt.n	8009ce8 <_strtol_l.constprop.0+0xc0>
 8009cb4:	fb06 4603 	mla	r6, r6, r3, r4
 8009cb8:	f04f 0c01 	mov.w	ip, #1
 8009cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cc0:	e7e8      	b.n	8009c94 <_strtol_l.constprop.0+0x6c>
 8009cc2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cc4:	bf04      	itt	eq
 8009cc6:	782c      	ldrbeq	r4, [r5, #0]
 8009cc8:	1cb5      	addeq	r5, r6, #2
 8009cca:	e7ca      	b.n	8009c62 <_strtol_l.constprop.0+0x3a>
 8009ccc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009cd0:	f1be 0f19 	cmp.w	lr, #25
 8009cd4:	d801      	bhi.n	8009cda <_strtol_l.constprop.0+0xb2>
 8009cd6:	3c37      	subs	r4, #55	; 0x37
 8009cd8:	e7e2      	b.n	8009ca0 <_strtol_l.constprop.0+0x78>
 8009cda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cde:	f1be 0f19 	cmp.w	lr, #25
 8009ce2:	d804      	bhi.n	8009cee <_strtol_l.constprop.0+0xc6>
 8009ce4:	3c57      	subs	r4, #87	; 0x57
 8009ce6:	e7db      	b.n	8009ca0 <_strtol_l.constprop.0+0x78>
 8009ce8:	f04f 3cff 	mov.w	ip, #4294967295
 8009cec:	e7e6      	b.n	8009cbc <_strtol_l.constprop.0+0x94>
 8009cee:	f1bc 0f00 	cmp.w	ip, #0
 8009cf2:	da05      	bge.n	8009d00 <_strtol_l.constprop.0+0xd8>
 8009cf4:	2322      	movs	r3, #34	; 0x22
 8009cf6:	6003      	str	r3, [r0, #0]
 8009cf8:	4646      	mov	r6, r8
 8009cfa:	b942      	cbnz	r2, 8009d0e <_strtol_l.constprop.0+0xe6>
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	e79e      	b.n	8009c3e <_strtol_l.constprop.0+0x16>
 8009d00:	b107      	cbz	r7, 8009d04 <_strtol_l.constprop.0+0xdc>
 8009d02:	4276      	negs	r6, r6
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	d0f9      	beq.n	8009cfc <_strtol_l.constprop.0+0xd4>
 8009d08:	f1bc 0f00 	cmp.w	ip, #0
 8009d0c:	d000      	beq.n	8009d10 <_strtol_l.constprop.0+0xe8>
 8009d0e:	1e69      	subs	r1, r5, #1
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	e7f3      	b.n	8009cfc <_strtol_l.constprop.0+0xd4>
 8009d14:	2430      	movs	r4, #48	; 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1b1      	bne.n	8009c7e <_strtol_l.constprop.0+0x56>
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	e7af      	b.n	8009c7e <_strtol_l.constprop.0+0x56>
 8009d1e:	2c30      	cmp	r4, #48	; 0x30
 8009d20:	d0a5      	beq.n	8009c6e <_strtol_l.constprop.0+0x46>
 8009d22:	230a      	movs	r3, #10
 8009d24:	e7ab      	b.n	8009c7e <_strtol_l.constprop.0+0x56>
 8009d26:	bf00      	nop
 8009d28:	0800db81 	.word	0x0800db81

08009d2c <_strtol_r>:
 8009d2c:	f7ff bf7c 	b.w	8009c28 <_strtol_l.constprop.0>

08009d30 <__swbuf_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	460e      	mov	r6, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	4605      	mov	r5, r0
 8009d38:	b118      	cbz	r0, 8009d42 <__swbuf_r+0x12>
 8009d3a:	6983      	ldr	r3, [r0, #24]
 8009d3c:	b90b      	cbnz	r3, 8009d42 <__swbuf_r+0x12>
 8009d3e:	f001 f84b 	bl	800add8 <__sinit>
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <__swbuf_r+0x98>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d12b      	bne.n	8009da0 <__swbuf_r+0x70>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	69a3      	ldr	r3, [r4, #24]
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	071a      	lsls	r2, r3, #28
 8009d52:	d52f      	bpl.n	8009db4 <__swbuf_r+0x84>
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b36b      	cbz	r3, 8009db4 <__swbuf_r+0x84>
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	6820      	ldr	r0, [r4, #0]
 8009d5c:	1ac0      	subs	r0, r0, r3
 8009d5e:	6963      	ldr	r3, [r4, #20]
 8009d60:	b2f6      	uxtb	r6, r6
 8009d62:	4283      	cmp	r3, r0
 8009d64:	4637      	mov	r7, r6
 8009d66:	dc04      	bgt.n	8009d72 <__swbuf_r+0x42>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 ffa0 	bl	800acb0 <_fflush_r>
 8009d70:	bb30      	cbnz	r0, 8009dc0 <__swbuf_r+0x90>
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	60a3      	str	r3, [r4, #8]
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	6022      	str	r2, [r4, #0]
 8009d7e:	701e      	strb	r6, [r3, #0]
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	3001      	adds	r0, #1
 8009d84:	4283      	cmp	r3, r0
 8009d86:	d004      	beq.n	8009d92 <__swbuf_r+0x62>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	07db      	lsls	r3, r3, #31
 8009d8c:	d506      	bpl.n	8009d9c <__swbuf_r+0x6c>
 8009d8e:	2e0a      	cmp	r6, #10
 8009d90:	d104      	bne.n	8009d9c <__swbuf_r+0x6c>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 ff8b 	bl	800acb0 <_fflush_r>
 8009d9a:	b988      	cbnz	r0, 8009dc0 <__swbuf_r+0x90>
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <__swbuf_r+0x9c>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	d101      	bne.n	8009daa <__swbuf_r+0x7a>
 8009da6:	68ac      	ldr	r4, [r5, #8]
 8009da8:	e7cf      	b.n	8009d4a <__swbuf_r+0x1a>
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <__swbuf_r+0xa0>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	bf08      	it	eq
 8009db0:	68ec      	ldreq	r4, [r5, #12]
 8009db2:	e7ca      	b.n	8009d4a <__swbuf_r+0x1a>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f80c 	bl	8009dd4 <__swsetup_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0cb      	beq.n	8009d58 <__swbuf_r+0x28>
 8009dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8009dc4:	e7ea      	b.n	8009d9c <__swbuf_r+0x6c>
 8009dc6:	bf00      	nop
 8009dc8:	0800dd34 	.word	0x0800dd34
 8009dcc:	0800dd54 	.word	0x0800dd54
 8009dd0:	0800dd14 	.word	0x0800dd14

08009dd4 <__swsetup_r>:
 8009dd4:	4b32      	ldr	r3, [pc, #200]	; (8009ea0 <__swsetup_r+0xcc>)
 8009dd6:	b570      	push	{r4, r5, r6, lr}
 8009dd8:	681d      	ldr	r5, [r3, #0]
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	b125      	cbz	r5, 8009dea <__swsetup_r+0x16>
 8009de0:	69ab      	ldr	r3, [r5, #24]
 8009de2:	b913      	cbnz	r3, 8009dea <__swsetup_r+0x16>
 8009de4:	4628      	mov	r0, r5
 8009de6:	f000 fff7 	bl	800add8 <__sinit>
 8009dea:	4b2e      	ldr	r3, [pc, #184]	; (8009ea4 <__swsetup_r+0xd0>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d10f      	bne.n	8009e10 <__swsetup_r+0x3c>
 8009df0:	686c      	ldr	r4, [r5, #4]
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	0719      	lsls	r1, r3, #28
 8009dfa:	d42c      	bmi.n	8009e56 <__swsetup_r+0x82>
 8009dfc:	06dd      	lsls	r5, r3, #27
 8009dfe:	d411      	bmi.n	8009e24 <__swsetup_r+0x50>
 8009e00:	2309      	movs	r3, #9
 8009e02:	6033      	str	r3, [r6, #0]
 8009e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	e03e      	b.n	8009e8e <__swsetup_r+0xba>
 8009e10:	4b25      	ldr	r3, [pc, #148]	; (8009ea8 <__swsetup_r+0xd4>)
 8009e12:	429c      	cmp	r4, r3
 8009e14:	d101      	bne.n	8009e1a <__swsetup_r+0x46>
 8009e16:	68ac      	ldr	r4, [r5, #8]
 8009e18:	e7eb      	b.n	8009df2 <__swsetup_r+0x1e>
 8009e1a:	4b24      	ldr	r3, [pc, #144]	; (8009eac <__swsetup_r+0xd8>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	bf08      	it	eq
 8009e20:	68ec      	ldreq	r4, [r5, #12]
 8009e22:	e7e6      	b.n	8009df2 <__swsetup_r+0x1e>
 8009e24:	0758      	lsls	r0, r3, #29
 8009e26:	d512      	bpl.n	8009e4e <__swsetup_r+0x7a>
 8009e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e2a:	b141      	cbz	r1, 8009e3e <__swsetup_r+0x6a>
 8009e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d002      	beq.n	8009e3a <__swsetup_r+0x66>
 8009e34:	4630      	mov	r0, r6
 8009e36:	f002 f939 	bl	800c0ac <_free_r>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	2300      	movs	r3, #0
 8009e48:	6063      	str	r3, [r4, #4]
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f043 0308 	orr.w	r3, r3, #8
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	b94b      	cbnz	r3, 8009e6e <__swsetup_r+0x9a>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e64:	d003      	beq.n	8009e6e <__swsetup_r+0x9a>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f001 fbed 	bl	800b648 <__smakebuf_r>
 8009e6e:	89a0      	ldrh	r0, [r4, #12]
 8009e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e74:	f010 0301 	ands.w	r3, r0, #1
 8009e78:	d00a      	beq.n	8009e90 <__swsetup_r+0xbc>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	6963      	ldr	r3, [r4, #20]
 8009e80:	425b      	negs	r3, r3
 8009e82:	61a3      	str	r3, [r4, #24]
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	b943      	cbnz	r3, 8009e9a <__swsetup_r+0xc6>
 8009e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e8c:	d1ba      	bne.n	8009e04 <__swsetup_r+0x30>
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	0781      	lsls	r1, r0, #30
 8009e92:	bf58      	it	pl
 8009e94:	6963      	ldrpl	r3, [r4, #20]
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	e7f4      	b.n	8009e84 <__swsetup_r+0xb0>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e7f7      	b.n	8009e8e <__swsetup_r+0xba>
 8009e9e:	bf00      	nop
 8009ea0:	20000010 	.word	0x20000010
 8009ea4:	0800dd34 	.word	0x0800dd34
 8009ea8:	0800dd54 	.word	0x0800dd54
 8009eac:	0800dd14 	.word	0x0800dd14

08009eb0 <quorem>:
 8009eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	6903      	ldr	r3, [r0, #16]
 8009eb6:	690c      	ldr	r4, [r1, #16]
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	4607      	mov	r7, r0
 8009ebc:	f2c0 8081 	blt.w	8009fc2 <quorem+0x112>
 8009ec0:	3c01      	subs	r4, #1
 8009ec2:	f101 0814 	add.w	r8, r1, #20
 8009ec6:	f100 0514 	add.w	r5, r0, #20
 8009eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	429a      	cmp	r2, r3
 8009edc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ee0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ee4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ee8:	d331      	bcc.n	8009f4e <quorem+0x9e>
 8009eea:	f04f 0e00 	mov.w	lr, #0
 8009eee:	4640      	mov	r0, r8
 8009ef0:	46ac      	mov	ip, r5
 8009ef2:	46f2      	mov	sl, lr
 8009ef4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ef8:	b293      	uxth	r3, r2
 8009efa:	fb06 e303 	mla	r3, r6, r3, lr
 8009efe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ebaa 0303 	sub.w	r3, sl, r3
 8009f08:	f8dc a000 	ldr.w	sl, [ip]
 8009f0c:	0c12      	lsrs	r2, r2, #16
 8009f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8009f12:	fb06 e202 	mla	r2, r6, r2, lr
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	9b00      	ldr	r3, [sp, #0]
 8009f1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f28:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f2c:	4581      	cmp	r9, r0
 8009f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f32:	f84c 3b04 	str.w	r3, [ip], #4
 8009f36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f3a:	d2db      	bcs.n	8009ef4 <quorem+0x44>
 8009f3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f40:	b92b      	cbnz	r3, 8009f4e <quorem+0x9e>
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	3b04      	subs	r3, #4
 8009f46:	429d      	cmp	r5, r3
 8009f48:	461a      	mov	r2, r3
 8009f4a:	d32e      	bcc.n	8009faa <quorem+0xfa>
 8009f4c:	613c      	str	r4, [r7, #16]
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f001 fea0 	bl	800bc94 <__mcmp>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	db24      	blt.n	8009fa2 <quorem+0xf2>
 8009f58:	3601      	adds	r6, #1
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f04f 0c00 	mov.w	ip, #0
 8009f60:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f64:	f8d0 e000 	ldr.w	lr, [r0]
 8009f68:	b293      	uxth	r3, r2
 8009f6a:	ebac 0303 	sub.w	r3, ip, r3
 8009f6e:	0c12      	lsrs	r2, r2, #16
 8009f70:	fa13 f38e 	uxtah	r3, r3, lr
 8009f74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f82:	45c1      	cmp	r9, r8
 8009f84:	f840 3b04 	str.w	r3, [r0], #4
 8009f88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f8c:	d2e8      	bcs.n	8009f60 <quorem+0xb0>
 8009f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f96:	b922      	cbnz	r2, 8009fa2 <quorem+0xf2>
 8009f98:	3b04      	subs	r3, #4
 8009f9a:	429d      	cmp	r5, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	d30a      	bcc.n	8009fb6 <quorem+0x106>
 8009fa0:	613c      	str	r4, [r7, #16]
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	b003      	add	sp, #12
 8009fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	d1cc      	bne.n	8009f4c <quorem+0x9c>
 8009fb2:	3c01      	subs	r4, #1
 8009fb4:	e7c7      	b.n	8009f46 <quorem+0x96>
 8009fb6:	6812      	ldr	r2, [r2, #0]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	d1f0      	bne.n	8009fa0 <quorem+0xf0>
 8009fbe:	3c01      	subs	r4, #1
 8009fc0:	e7eb      	b.n	8009f9a <quorem+0xea>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e7ee      	b.n	8009fa4 <quorem+0xf4>
	...

08009fc8 <_dtoa_r>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	ed2d 8b04 	vpush	{d8-d9}
 8009fd0:	ec57 6b10 	vmov	r6, r7, d0
 8009fd4:	b093      	sub	sp, #76	; 0x4c
 8009fd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fdc:	9106      	str	r1, [sp, #24]
 8009fde:	ee10 aa10 	vmov	sl, s0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe8:	46bb      	mov	fp, r7
 8009fea:	b975      	cbnz	r5, 800a00a <_dtoa_r+0x42>
 8009fec:	2010      	movs	r0, #16
 8009fee:	f001 fb6b 	bl	800b6c8 <malloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ff6:	b920      	cbnz	r0, 800a002 <_dtoa_r+0x3a>
 8009ff8:	4ba7      	ldr	r3, [pc, #668]	; (800a298 <_dtoa_r+0x2d0>)
 8009ffa:	21ea      	movs	r1, #234	; 0xea
 8009ffc:	48a7      	ldr	r0, [pc, #668]	; (800a29c <_dtoa_r+0x2d4>)
 8009ffe:	f002 fc79 	bl	800c8f4 <__assert_func>
 800a002:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a006:	6005      	str	r5, [r0, #0]
 800a008:	60c5      	str	r5, [r0, #12]
 800a00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a00c:	6819      	ldr	r1, [r3, #0]
 800a00e:	b151      	cbz	r1, 800a026 <_dtoa_r+0x5e>
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	604a      	str	r2, [r1, #4]
 800a014:	2301      	movs	r3, #1
 800a016:	4093      	lsls	r3, r2
 800a018:	608b      	str	r3, [r1, #8]
 800a01a:	4620      	mov	r0, r4
 800a01c:	f001 fbae 	bl	800b77c <_Bfree>
 800a020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	1e3b      	subs	r3, r7, #0
 800a028:	bfaa      	itet	ge
 800a02a:	2300      	movge	r3, #0
 800a02c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a030:	f8c8 3000 	strge.w	r3, [r8]
 800a034:	4b9a      	ldr	r3, [pc, #616]	; (800a2a0 <_dtoa_r+0x2d8>)
 800a036:	bfbc      	itt	lt
 800a038:	2201      	movlt	r2, #1
 800a03a:	f8c8 2000 	strlt.w	r2, [r8]
 800a03e:	ea33 030b 	bics.w	r3, r3, fp
 800a042:	d11b      	bne.n	800a07c <_dtoa_r+0xb4>
 800a044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a046:	f242 730f 	movw	r3, #9999	; 0x270f
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a050:	4333      	orrs	r3, r6
 800a052:	f000 8592 	beq.w	800ab7a <_dtoa_r+0xbb2>
 800a056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a058:	b963      	cbnz	r3, 800a074 <_dtoa_r+0xac>
 800a05a:	4b92      	ldr	r3, [pc, #584]	; (800a2a4 <_dtoa_r+0x2dc>)
 800a05c:	e022      	b.n	800a0a4 <_dtoa_r+0xdc>
 800a05e:	4b92      	ldr	r3, [pc, #584]	; (800a2a8 <_dtoa_r+0x2e0>)
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	3308      	adds	r3, #8
 800a064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	9801      	ldr	r0, [sp, #4]
 800a06a:	b013      	add	sp, #76	; 0x4c
 800a06c:	ecbd 8b04 	vpop	{d8-d9}
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	4b8b      	ldr	r3, [pc, #556]	; (800a2a4 <_dtoa_r+0x2dc>)
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	3303      	adds	r3, #3
 800a07a:	e7f3      	b.n	800a064 <_dtoa_r+0x9c>
 800a07c:	2200      	movs	r2, #0
 800a07e:	2300      	movs	r3, #0
 800a080:	4650      	mov	r0, sl
 800a082:	4659      	mov	r1, fp
 800a084:	f7f6 fd40 	bl	8000b08 <__aeabi_dcmpeq>
 800a088:	ec4b ab19 	vmov	d9, sl, fp
 800a08c:	4680      	mov	r8, r0
 800a08e:	b158      	cbz	r0, 800a0a8 <_dtoa_r+0xe0>
 800a090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a092:	2301      	movs	r3, #1
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 856b 	beq.w	800ab74 <_dtoa_r+0xbac>
 800a09e:	4883      	ldr	r0, [pc, #524]	; (800a2ac <_dtoa_r+0x2e4>)
 800a0a0:	6018      	str	r0, [r3, #0]
 800a0a2:	1e43      	subs	r3, r0, #1
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	e7df      	b.n	800a068 <_dtoa_r+0xa0>
 800a0a8:	ec4b ab10 	vmov	d0, sl, fp
 800a0ac:	aa10      	add	r2, sp, #64	; 0x40
 800a0ae:	a911      	add	r1, sp, #68	; 0x44
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f001 ff11 	bl	800bed8 <__d2b>
 800a0b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a0ba:	ee08 0a10 	vmov	s16, r0
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	f000 8084 	beq.w	800a1cc <_dtoa_r+0x204>
 800a0c4:	ee19 3a90 	vmov	r3, s19
 800a0c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0d0:	4656      	mov	r6, sl
 800a0d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0de:	4b74      	ldr	r3, [pc, #464]	; (800a2b0 <_dtoa_r+0x2e8>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 f8ef 	bl	80002c8 <__aeabi_dsub>
 800a0ea:	a365      	add	r3, pc, #404	; (adr r3, 800a280 <_dtoa_r+0x2b8>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 faa2 	bl	8000638 <__aeabi_dmul>
 800a0f4:	a364      	add	r3, pc, #400	; (adr r3, 800a288 <_dtoa_r+0x2c0>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7f6 f8e7 	bl	80002cc <__adddf3>
 800a0fe:	4606      	mov	r6, r0
 800a100:	4628      	mov	r0, r5
 800a102:	460f      	mov	r7, r1
 800a104:	f7f6 fa2e 	bl	8000564 <__aeabi_i2d>
 800a108:	a361      	add	r3, pc, #388	; (adr r3, 800a290 <_dtoa_r+0x2c8>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 fa93 	bl	8000638 <__aeabi_dmul>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	f7f6 f8d7 	bl	80002cc <__adddf3>
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	f7f6 fd39 	bl	8000b98 <__aeabi_d2iz>
 800a126:	2200      	movs	r2, #0
 800a128:	9000      	str	r0, [sp, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 800a134:	b150      	cbz	r0, 800a14c <_dtoa_r+0x184>
 800a136:	9800      	ldr	r0, [sp, #0]
 800a138:	f7f6 fa14 	bl	8000564 <__aeabi_i2d>
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	f7f6 fce2 	bl	8000b08 <__aeabi_dcmpeq>
 800a144:	b910      	cbnz	r0, 800a14c <_dtoa_r+0x184>
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	3b01      	subs	r3, #1
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	9b00      	ldr	r3, [sp, #0]
 800a14e:	2b16      	cmp	r3, #22
 800a150:	d85a      	bhi.n	800a208 <_dtoa_r+0x240>
 800a152:	9a00      	ldr	r2, [sp, #0]
 800a154:	4b57      	ldr	r3, [pc, #348]	; (800a2b4 <_dtoa_r+0x2ec>)
 800a156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	ec51 0b19 	vmov	r0, r1, d9
 800a162:	f7f6 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	d050      	beq.n	800a20c <_dtoa_r+0x244>
 800a16a:	9b00      	ldr	r3, [sp, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	2300      	movs	r3, #0
 800a172:	930b      	str	r3, [sp, #44]	; 0x2c
 800a174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a176:	1b5d      	subs	r5, r3, r5
 800a178:	1e6b      	subs	r3, r5, #1
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	bf45      	ittet	mi
 800a17e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a182:	9304      	strmi	r3, [sp, #16]
 800a184:	2300      	movpl	r3, #0
 800a186:	2300      	movmi	r3, #0
 800a188:	bf4c      	ite	mi
 800a18a:	9305      	strmi	r3, [sp, #20]
 800a18c:	9304      	strpl	r3, [sp, #16]
 800a18e:	9b00      	ldr	r3, [sp, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	db3d      	blt.n	800a210 <_dtoa_r+0x248>
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	9a00      	ldr	r2, [sp, #0]
 800a198:	920a      	str	r2, [sp, #40]	; 0x28
 800a19a:	4413      	add	r3, r2
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	9b06      	ldr	r3, [sp, #24]
 800a1a4:	2b09      	cmp	r3, #9
 800a1a6:	f200 8089 	bhi.w	800a2bc <_dtoa_r+0x2f4>
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	bfc4      	itt	gt
 800a1ae:	3b04      	subgt	r3, #4
 800a1b0:	9306      	strgt	r3, [sp, #24]
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a1b8:	bfcc      	ite	gt
 800a1ba:	2500      	movgt	r5, #0
 800a1bc:	2501      	movle	r5, #1
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	f200 8087 	bhi.w	800a2d2 <_dtoa_r+0x30a>
 800a1c4:	e8df f003 	tbb	[pc, r3]
 800a1c8:	59383a2d 	.word	0x59383a2d
 800a1cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1d0:	441d      	add	r5, r3
 800a1d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	bfc1      	itttt	gt
 800a1da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a1e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1ea:	bfda      	itte	le
 800a1ec:	f1c3 0320 	rsble	r3, r3, #32
 800a1f0:	fa06 f003 	lslle.w	r0, r6, r3
 800a1f4:	4318      	orrgt	r0, r3
 800a1f6:	f7f6 f9a5 	bl	8000544 <__aeabi_ui2d>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a202:	3d01      	subs	r5, #1
 800a204:	930e      	str	r3, [sp, #56]	; 0x38
 800a206:	e76a      	b.n	800a0de <_dtoa_r+0x116>
 800a208:	2301      	movs	r3, #1
 800a20a:	e7b2      	b.n	800a172 <_dtoa_r+0x1aa>
 800a20c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a20e:	e7b1      	b.n	800a174 <_dtoa_r+0x1ac>
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	9a00      	ldr	r2, [sp, #0]
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	4253      	negs	r3, r2
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	2300      	movs	r3, #0
 800a21e:	930a      	str	r3, [sp, #40]	; 0x28
 800a220:	e7bf      	b.n	800a1a2 <_dtoa_r+0x1da>
 800a222:	2300      	movs	r3, #0
 800a224:	9308      	str	r3, [sp, #32]
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc55      	bgt.n	800a2d8 <_dtoa_r+0x310>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a232:	461a      	mov	r2, r3
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	e00c      	b.n	800a252 <_dtoa_r+0x28a>
 800a238:	2301      	movs	r3, #1
 800a23a:	e7f3      	b.n	800a224 <_dtoa_r+0x25c>
 800a23c:	2300      	movs	r3, #0
 800a23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	4413      	add	r3, r2
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	3301      	adds	r3, #1
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	9303      	str	r3, [sp, #12]
 800a24e:	bfb8      	it	lt
 800a250:	2301      	movlt	r3, #1
 800a252:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a254:	2200      	movs	r2, #0
 800a256:	6042      	str	r2, [r0, #4]
 800a258:	2204      	movs	r2, #4
 800a25a:	f102 0614 	add.w	r6, r2, #20
 800a25e:	429e      	cmp	r6, r3
 800a260:	6841      	ldr	r1, [r0, #4]
 800a262:	d93d      	bls.n	800a2e0 <_dtoa_r+0x318>
 800a264:	4620      	mov	r0, r4
 800a266:	f001 fa49 	bl	800b6fc <_Balloc>
 800a26a:	9001      	str	r0, [sp, #4]
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d13b      	bne.n	800a2e8 <_dtoa_r+0x320>
 800a270:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <_dtoa_r+0x2f0>)
 800a272:	4602      	mov	r2, r0
 800a274:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a278:	e6c0      	b.n	8009ffc <_dtoa_r+0x34>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e7df      	b.n	800a23e <_dtoa_r+0x276>
 800a27e:	bf00      	nop
 800a280:	636f4361 	.word	0x636f4361
 800a284:	3fd287a7 	.word	0x3fd287a7
 800a288:	8b60c8b3 	.word	0x8b60c8b3
 800a28c:	3fc68a28 	.word	0x3fc68a28
 800a290:	509f79fb 	.word	0x509f79fb
 800a294:	3fd34413 	.word	0x3fd34413
 800a298:	0800dc8e 	.word	0x0800dc8e
 800a29c:	0800dca5 	.word	0x0800dca5
 800a2a0:	7ff00000 	.word	0x7ff00000
 800a2a4:	0800dc8a 	.word	0x0800dc8a
 800a2a8:	0800dc81 	.word	0x0800dc81
 800a2ac:	0800db05 	.word	0x0800db05
 800a2b0:	3ff80000 	.word	0x3ff80000
 800a2b4:	0800de78 	.word	0x0800de78
 800a2b8:	0800dd00 	.word	0x0800dd00
 800a2bc:	2501      	movs	r5, #1
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9306      	str	r3, [sp, #24]
 800a2c2:	9508      	str	r5, [sp, #32]
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2312      	movs	r3, #18
 800a2d0:	e7b0      	b.n	800a234 <_dtoa_r+0x26c>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	9308      	str	r3, [sp, #32]
 800a2d6:	e7f5      	b.n	800a2c4 <_dtoa_r+0x2fc>
 800a2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2de:	e7b8      	b.n	800a252 <_dtoa_r+0x28a>
 800a2e0:	3101      	adds	r1, #1
 800a2e2:	6041      	str	r1, [r0, #4]
 800a2e4:	0052      	lsls	r2, r2, #1
 800a2e6:	e7b8      	b.n	800a25a <_dtoa_r+0x292>
 800a2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ea:	9a01      	ldr	r2, [sp, #4]
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	2b0e      	cmp	r3, #14
 800a2f2:	f200 809d 	bhi.w	800a430 <_dtoa_r+0x468>
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	f000 809a 	beq.w	800a430 <_dtoa_r+0x468>
 800a2fc:	9b00      	ldr	r3, [sp, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dd32      	ble.n	800a368 <_dtoa_r+0x3a0>
 800a302:	4ab7      	ldr	r2, [pc, #732]	; (800a5e0 <_dtoa_r+0x618>)
 800a304:	f003 030f 	and.w	r3, r3, #15
 800a308:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a310:	9b00      	ldr	r3, [sp, #0]
 800a312:	05d8      	lsls	r0, r3, #23
 800a314:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a318:	d516      	bpl.n	800a348 <_dtoa_r+0x380>
 800a31a:	4bb2      	ldr	r3, [pc, #712]	; (800a5e4 <_dtoa_r+0x61c>)
 800a31c:	ec51 0b19 	vmov	r0, r1, d9
 800a320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a324:	f7f6 fab2 	bl	800088c <__aeabi_ddiv>
 800a328:	f007 070f 	and.w	r7, r7, #15
 800a32c:	4682      	mov	sl, r0
 800a32e:	468b      	mov	fp, r1
 800a330:	2503      	movs	r5, #3
 800a332:	4eac      	ldr	r6, [pc, #688]	; (800a5e4 <_dtoa_r+0x61c>)
 800a334:	b957      	cbnz	r7, 800a34c <_dtoa_r+0x384>
 800a336:	4642      	mov	r2, r8
 800a338:	464b      	mov	r3, r9
 800a33a:	4650      	mov	r0, sl
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f6 faa5 	bl	800088c <__aeabi_ddiv>
 800a342:	4682      	mov	sl, r0
 800a344:	468b      	mov	fp, r1
 800a346:	e028      	b.n	800a39a <_dtoa_r+0x3d2>
 800a348:	2502      	movs	r5, #2
 800a34a:	e7f2      	b.n	800a332 <_dtoa_r+0x36a>
 800a34c:	07f9      	lsls	r1, r7, #31
 800a34e:	d508      	bpl.n	800a362 <_dtoa_r+0x39a>
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	3501      	adds	r5, #1
 800a35e:	4680      	mov	r8, r0
 800a360:	4689      	mov	r9, r1
 800a362:	107f      	asrs	r7, r7, #1
 800a364:	3608      	adds	r6, #8
 800a366:	e7e5      	b.n	800a334 <_dtoa_r+0x36c>
 800a368:	f000 809b 	beq.w	800a4a2 <_dtoa_r+0x4da>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	4f9d      	ldr	r7, [pc, #628]	; (800a5e4 <_dtoa_r+0x61c>)
 800a370:	425e      	negs	r6, r3
 800a372:	4b9b      	ldr	r3, [pc, #620]	; (800a5e0 <_dtoa_r+0x618>)
 800a374:	f006 020f 	and.w	r2, r6, #15
 800a378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	ec51 0b19 	vmov	r0, r1, d9
 800a384:	f7f6 f958 	bl	8000638 <__aeabi_dmul>
 800a388:	1136      	asrs	r6, r6, #4
 800a38a:	4682      	mov	sl, r0
 800a38c:	468b      	mov	fp, r1
 800a38e:	2300      	movs	r3, #0
 800a390:	2502      	movs	r5, #2
 800a392:	2e00      	cmp	r6, #0
 800a394:	d17a      	bne.n	800a48c <_dtoa_r+0x4c4>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1d3      	bne.n	800a342 <_dtoa_r+0x37a>
 800a39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 8082 	beq.w	800a4a6 <_dtoa_r+0x4de>
 800a3a2:	4b91      	ldr	r3, [pc, #580]	; (800a5e8 <_dtoa_r+0x620>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	f7f6 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d079      	beq.n	800a4a6 <_dtoa_r+0x4de>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d076      	beq.n	800a4a6 <_dtoa_r+0x4de>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dd36      	ble.n	800a42c <_dtoa_r+0x464>
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	1e5f      	subs	r7, r3, #1
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4b88      	ldr	r3, [pc, #544]	; (800a5ec <_dtoa_r+0x624>)
 800a3ca:	f7f6 f935 	bl	8000638 <__aeabi_dmul>
 800a3ce:	9e02      	ldr	r6, [sp, #8]
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	468b      	mov	fp, r1
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f7f6 f8c4 	bl	8000564 <__aeabi_i2d>
 800a3dc:	4652      	mov	r2, sl
 800a3de:	465b      	mov	r3, fp
 800a3e0:	f7f6 f92a 	bl	8000638 <__aeabi_dmul>
 800a3e4:	4b82      	ldr	r3, [pc, #520]	; (800a5f0 <_dtoa_r+0x628>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f7f5 ff70 	bl	80002cc <__adddf3>
 800a3ec:	46d0      	mov	r8, sl
 800a3ee:	46d9      	mov	r9, fp
 800a3f0:	4682      	mov	sl, r0
 800a3f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	d158      	bne.n	800a4ac <_dtoa_r+0x4e4>
 800a3fa:	4b7e      	ldr	r3, [pc, #504]	; (800a5f4 <_dtoa_r+0x62c>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f5 ff61 	bl	80002c8 <__aeabi_dsub>
 800a406:	4652      	mov	r2, sl
 800a408:	465b      	mov	r3, fp
 800a40a:	4680      	mov	r8, r0
 800a40c:	4689      	mov	r9, r1
 800a40e:	f7f6 fba3 	bl	8000b58 <__aeabi_dcmpgt>
 800a412:	2800      	cmp	r0, #0
 800a414:	f040 8295 	bne.w	800a942 <_dtoa_r+0x97a>
 800a418:	4652      	mov	r2, sl
 800a41a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f6 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	f040 8289 	bne.w	800a93e <_dtoa_r+0x976>
 800a42c:	ec5b ab19 	vmov	sl, fp, d9
 800a430:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a432:	2b00      	cmp	r3, #0
 800a434:	f2c0 8148 	blt.w	800a6c8 <_dtoa_r+0x700>
 800a438:	9a00      	ldr	r2, [sp, #0]
 800a43a:	2a0e      	cmp	r2, #14
 800a43c:	f300 8144 	bgt.w	800a6c8 <_dtoa_r+0x700>
 800a440:	4b67      	ldr	r3, [pc, #412]	; (800a5e0 <_dtoa_r+0x618>)
 800a442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a446:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f280 80d5 	bge.w	800a5fc <_dtoa_r+0x634>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f300 80d1 	bgt.w	800a5fc <_dtoa_r+0x634>
 800a45a:	f040 826f 	bne.w	800a93c <_dtoa_r+0x974>
 800a45e:	4b65      	ldr	r3, [pc, #404]	; (800a5f4 <_dtoa_r+0x62c>)
 800a460:	2200      	movs	r2, #0
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f6 f8e7 	bl	8000638 <__aeabi_dmul>
 800a46a:	4652      	mov	r2, sl
 800a46c:	465b      	mov	r3, fp
 800a46e:	f7f6 fb69 	bl	8000b44 <__aeabi_dcmpge>
 800a472:	9e03      	ldr	r6, [sp, #12]
 800a474:	4637      	mov	r7, r6
 800a476:	2800      	cmp	r0, #0
 800a478:	f040 8245 	bne.w	800a906 <_dtoa_r+0x93e>
 800a47c:	9d01      	ldr	r5, [sp, #4]
 800a47e:	2331      	movs	r3, #49	; 0x31
 800a480:	f805 3b01 	strb.w	r3, [r5], #1
 800a484:	9b00      	ldr	r3, [sp, #0]
 800a486:	3301      	adds	r3, #1
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	e240      	b.n	800a90e <_dtoa_r+0x946>
 800a48c:	07f2      	lsls	r2, r6, #31
 800a48e:	d505      	bpl.n	800a49c <_dtoa_r+0x4d4>
 800a490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a494:	f7f6 f8d0 	bl	8000638 <__aeabi_dmul>
 800a498:	3501      	adds	r5, #1
 800a49a:	2301      	movs	r3, #1
 800a49c:	1076      	asrs	r6, r6, #1
 800a49e:	3708      	adds	r7, #8
 800a4a0:	e777      	b.n	800a392 <_dtoa_r+0x3ca>
 800a4a2:	2502      	movs	r5, #2
 800a4a4:	e779      	b.n	800a39a <_dtoa_r+0x3d2>
 800a4a6:	9f00      	ldr	r7, [sp, #0]
 800a4a8:	9e03      	ldr	r6, [sp, #12]
 800a4aa:	e794      	b.n	800a3d6 <_dtoa_r+0x40e>
 800a4ac:	9901      	ldr	r1, [sp, #4]
 800a4ae:	4b4c      	ldr	r3, [pc, #304]	; (800a5e0 <_dtoa_r+0x618>)
 800a4b0:	4431      	add	r1, r6
 800a4b2:	910d      	str	r1, [sp, #52]	; 0x34
 800a4b4:	9908      	ldr	r1, [sp, #32]
 800a4b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d043      	beq.n	800a54a <_dtoa_r+0x582>
 800a4c2:	494d      	ldr	r1, [pc, #308]	; (800a5f8 <_dtoa_r+0x630>)
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f7f6 f9e1 	bl	800088c <__aeabi_ddiv>
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	f7f5 fefb 	bl	80002c8 <__aeabi_dsub>
 800a4d2:	9d01      	ldr	r5, [sp, #4]
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	468b      	mov	fp, r1
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4640      	mov	r0, r8
 800a4dc:	f7f6 fb5c 	bl	8000b98 <__aeabi_d2iz>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	f7f6 f83f 	bl	8000564 <__aeabi_i2d>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	f7f5 feeb 	bl	80002c8 <__aeabi_dsub>
 800a4f2:	3630      	adds	r6, #48	; 0x30
 800a4f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	465b      	mov	r3, fp
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	4689      	mov	r9, r1
 800a500:	f7f6 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 800a504:	2800      	cmp	r0, #0
 800a506:	d163      	bne.n	800a5d0 <_dtoa_r+0x608>
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	4936      	ldr	r1, [pc, #216]	; (800a5e8 <_dtoa_r+0x620>)
 800a50e:	2000      	movs	r0, #0
 800a510:	f7f5 feda 	bl	80002c8 <__aeabi_dsub>
 800a514:	4652      	mov	r2, sl
 800a516:	465b      	mov	r3, fp
 800a518:	f7f6 fb00 	bl	8000b1c <__aeabi_dcmplt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 80b5 	bne.w	800a68c <_dtoa_r+0x6c4>
 800a522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a524:	429d      	cmp	r5, r3
 800a526:	d081      	beq.n	800a42c <_dtoa_r+0x464>
 800a528:	4b30      	ldr	r3, [pc, #192]	; (800a5ec <_dtoa_r+0x624>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	4650      	mov	r0, sl
 800a52e:	4659      	mov	r1, fp
 800a530:	f7f6 f882 	bl	8000638 <__aeabi_dmul>
 800a534:	4b2d      	ldr	r3, [pc, #180]	; (800a5ec <_dtoa_r+0x624>)
 800a536:	4682      	mov	sl, r0
 800a538:	468b      	mov	fp, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	2200      	movs	r2, #0
 800a540:	f7f6 f87a 	bl	8000638 <__aeabi_dmul>
 800a544:	4680      	mov	r8, r0
 800a546:	4689      	mov	r9, r1
 800a548:	e7c6      	b.n	800a4d8 <_dtoa_r+0x510>
 800a54a:	4650      	mov	r0, sl
 800a54c:	4659      	mov	r1, fp
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a554:	9d01      	ldr	r5, [sp, #4]
 800a556:	930f      	str	r3, [sp, #60]	; 0x3c
 800a558:	4682      	mov	sl, r0
 800a55a:	468b      	mov	fp, r1
 800a55c:	4649      	mov	r1, r9
 800a55e:	4640      	mov	r0, r8
 800a560:	f7f6 fb1a 	bl	8000b98 <__aeabi_d2iz>
 800a564:	4606      	mov	r6, r0
 800a566:	f7f5 fffd 	bl	8000564 <__aeabi_i2d>
 800a56a:	3630      	adds	r6, #48	; 0x30
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f5 fea8 	bl	80002c8 <__aeabi_dsub>
 800a578:	f805 6b01 	strb.w	r6, [r5], #1
 800a57c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a57e:	429d      	cmp	r5, r3
 800a580:	4680      	mov	r8, r0
 800a582:	4689      	mov	r9, r1
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	d124      	bne.n	800a5d4 <_dtoa_r+0x60c>
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <_dtoa_r+0x630>)
 800a58c:	4650      	mov	r0, sl
 800a58e:	4659      	mov	r1, fp
 800a590:	f7f5 fe9c 	bl	80002cc <__adddf3>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 fadc 	bl	8000b58 <__aeabi_dcmpgt>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d173      	bne.n	800a68c <_dtoa_r+0x6c4>
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	465b      	mov	r3, fp
 800a5a8:	4913      	ldr	r1, [pc, #76]	; (800a5f8 <_dtoa_r+0x630>)
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	f7f5 fe8c 	bl	80002c8 <__aeabi_dsub>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f6 fab0 	bl	8000b1c <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f af35 	beq.w	800a42c <_dtoa_r+0x464>
 800a5c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5c4:	1e6b      	subs	r3, r5, #1
 800a5c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5cc:	2b30      	cmp	r3, #48	; 0x30
 800a5ce:	d0f8      	beq.n	800a5c2 <_dtoa_r+0x5fa>
 800a5d0:	9700      	str	r7, [sp, #0]
 800a5d2:	e049      	b.n	800a668 <_dtoa_r+0x6a0>
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <_dtoa_r+0x624>)
 800a5d6:	f7f6 f82f 	bl	8000638 <__aeabi_dmul>
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	e7bd      	b.n	800a55c <_dtoa_r+0x594>
 800a5e0:	0800de78 	.word	0x0800de78
 800a5e4:	0800de50 	.word	0x0800de50
 800a5e8:	3ff00000 	.word	0x3ff00000
 800a5ec:	40240000 	.word	0x40240000
 800a5f0:	401c0000 	.word	0x401c0000
 800a5f4:	40140000 	.word	0x40140000
 800a5f8:	3fe00000 	.word	0x3fe00000
 800a5fc:	9d01      	ldr	r5, [sp, #4]
 800a5fe:	4656      	mov	r6, sl
 800a600:	465f      	mov	r7, fp
 800a602:	4642      	mov	r2, r8
 800a604:	464b      	mov	r3, r9
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f6 f93f 	bl	800088c <__aeabi_ddiv>
 800a60e:	f7f6 fac3 	bl	8000b98 <__aeabi_d2iz>
 800a612:	4682      	mov	sl, r0
 800a614:	f7f5 ffa6 	bl	8000564 <__aeabi_i2d>
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	f7f6 f80c 	bl	8000638 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	f805 6b01 	strb.w	r6, [r5], #1
 800a634:	9e01      	ldr	r6, [sp, #4]
 800a636:	9f03      	ldr	r7, [sp, #12]
 800a638:	1bae      	subs	r6, r5, r6
 800a63a:	42b7      	cmp	r7, r6
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	d135      	bne.n	800a6ae <_dtoa_r+0x6e6>
 800a642:	f7f5 fe43 	bl	80002cc <__adddf3>
 800a646:	4642      	mov	r2, r8
 800a648:	464b      	mov	r3, r9
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	f7f6 fa83 	bl	8000b58 <__aeabi_dcmpgt>
 800a652:	b9d0      	cbnz	r0, 800a68a <_dtoa_r+0x6c2>
 800a654:	4642      	mov	r2, r8
 800a656:	464b      	mov	r3, r9
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f6 fa54 	bl	8000b08 <__aeabi_dcmpeq>
 800a660:	b110      	cbz	r0, 800a668 <_dtoa_r+0x6a0>
 800a662:	f01a 0f01 	tst.w	sl, #1
 800a666:	d110      	bne.n	800a68a <_dtoa_r+0x6c2>
 800a668:	4620      	mov	r0, r4
 800a66a:	ee18 1a10 	vmov	r1, s16
 800a66e:	f001 f885 	bl	800b77c <_Bfree>
 800a672:	2300      	movs	r3, #0
 800a674:	9800      	ldr	r0, [sp, #0]
 800a676:	702b      	strb	r3, [r5, #0]
 800a678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a67a:	3001      	adds	r0, #1
 800a67c:	6018      	str	r0, [r3, #0]
 800a67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a680:	2b00      	cmp	r3, #0
 800a682:	f43f acf1 	beq.w	800a068 <_dtoa_r+0xa0>
 800a686:	601d      	str	r5, [r3, #0]
 800a688:	e4ee      	b.n	800a068 <_dtoa_r+0xa0>
 800a68a:	9f00      	ldr	r7, [sp, #0]
 800a68c:	462b      	mov	r3, r5
 800a68e:	461d      	mov	r5, r3
 800a690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a694:	2a39      	cmp	r2, #57	; 0x39
 800a696:	d106      	bne.n	800a6a6 <_dtoa_r+0x6de>
 800a698:	9a01      	ldr	r2, [sp, #4]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d1f7      	bne.n	800a68e <_dtoa_r+0x6c6>
 800a69e:	9901      	ldr	r1, [sp, #4]
 800a6a0:	2230      	movs	r2, #48	; 0x30
 800a6a2:	3701      	adds	r7, #1
 800a6a4:	700a      	strb	r2, [r1, #0]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e790      	b.n	800a5d0 <_dtoa_r+0x608>
 800a6ae:	4ba6      	ldr	r3, [pc, #664]	; (800a948 <_dtoa_r+0x980>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f7f5 ffc1 	bl	8000638 <__aeabi_dmul>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	f7f6 fa23 	bl	8000b08 <__aeabi_dcmpeq>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d09d      	beq.n	800a602 <_dtoa_r+0x63a>
 800a6c6:	e7cf      	b.n	800a668 <_dtoa_r+0x6a0>
 800a6c8:	9a08      	ldr	r2, [sp, #32]
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	f000 80d7 	beq.w	800a87e <_dtoa_r+0x8b6>
 800a6d0:	9a06      	ldr	r2, [sp, #24]
 800a6d2:	2a01      	cmp	r2, #1
 800a6d4:	f300 80ba 	bgt.w	800a84c <_dtoa_r+0x884>
 800a6d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	f000 80b2 	beq.w	800a844 <_dtoa_r+0x87c>
 800a6e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6e4:	9e07      	ldr	r6, [sp, #28]
 800a6e6:	9d04      	ldr	r5, [sp, #16]
 800a6e8:	9a04      	ldr	r2, [sp, #16]
 800a6ea:	441a      	add	r2, r3
 800a6ec:	9204      	str	r2, [sp, #16]
 800a6ee:	9a05      	ldr	r2, [sp, #20]
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	441a      	add	r2, r3
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	9205      	str	r2, [sp, #20]
 800a6f8:	f001 f942 	bl	800b980 <__i2b>
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	dd0c      	ble.n	800a71c <_dtoa_r+0x754>
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd09      	ble.n	800a71c <_dtoa_r+0x754>
 800a708:	42ab      	cmp	r3, r5
 800a70a:	9a04      	ldr	r2, [sp, #16]
 800a70c:	bfa8      	it	ge
 800a70e:	462b      	movge	r3, r5
 800a710:	1ad2      	subs	r2, r2, r3
 800a712:	9204      	str	r2, [sp, #16]
 800a714:	9a05      	ldr	r2, [sp, #20]
 800a716:	1aed      	subs	r5, r5, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	9b07      	ldr	r3, [sp, #28]
 800a71e:	b31b      	cbz	r3, 800a768 <_dtoa_r+0x7a0>
 800a720:	9b08      	ldr	r3, [sp, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80af 	beq.w	800a886 <_dtoa_r+0x8be>
 800a728:	2e00      	cmp	r6, #0
 800a72a:	dd13      	ble.n	800a754 <_dtoa_r+0x78c>
 800a72c:	4639      	mov	r1, r7
 800a72e:	4632      	mov	r2, r6
 800a730:	4620      	mov	r0, r4
 800a732:	f001 f9e5 	bl	800bb00 <__pow5mult>
 800a736:	ee18 2a10 	vmov	r2, s16
 800a73a:	4601      	mov	r1, r0
 800a73c:	4607      	mov	r7, r0
 800a73e:	4620      	mov	r0, r4
 800a740:	f001 f934 	bl	800b9ac <__multiply>
 800a744:	ee18 1a10 	vmov	r1, s16
 800a748:	4680      	mov	r8, r0
 800a74a:	4620      	mov	r0, r4
 800a74c:	f001 f816 	bl	800b77c <_Bfree>
 800a750:	ee08 8a10 	vmov	s16, r8
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	1b9a      	subs	r2, r3, r6
 800a758:	d006      	beq.n	800a768 <_dtoa_r+0x7a0>
 800a75a:	ee18 1a10 	vmov	r1, s16
 800a75e:	4620      	mov	r0, r4
 800a760:	f001 f9ce 	bl	800bb00 <__pow5mult>
 800a764:	ee08 0a10 	vmov	s16, r0
 800a768:	2101      	movs	r1, #1
 800a76a:	4620      	mov	r0, r4
 800a76c:	f001 f908 	bl	800b980 <__i2b>
 800a770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	4606      	mov	r6, r0
 800a776:	f340 8088 	ble.w	800a88a <_dtoa_r+0x8c2>
 800a77a:	461a      	mov	r2, r3
 800a77c:	4601      	mov	r1, r0
 800a77e:	4620      	mov	r0, r4
 800a780:	f001 f9be 	bl	800bb00 <__pow5mult>
 800a784:	9b06      	ldr	r3, [sp, #24]
 800a786:	2b01      	cmp	r3, #1
 800a788:	4606      	mov	r6, r0
 800a78a:	f340 8081 	ble.w	800a890 <_dtoa_r+0x8c8>
 800a78e:	f04f 0800 	mov.w	r8, #0
 800a792:	6933      	ldr	r3, [r6, #16]
 800a794:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a798:	6918      	ldr	r0, [r3, #16]
 800a79a:	f001 f8a1 	bl	800b8e0 <__hi0bits>
 800a79e:	f1c0 0020 	rsb	r0, r0, #32
 800a7a2:	9b05      	ldr	r3, [sp, #20]
 800a7a4:	4418      	add	r0, r3
 800a7a6:	f010 001f 	ands.w	r0, r0, #31
 800a7aa:	f000 8092 	beq.w	800a8d2 <_dtoa_r+0x90a>
 800a7ae:	f1c0 0320 	rsb	r3, r0, #32
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	f340 808a 	ble.w	800a8cc <_dtoa_r+0x904>
 800a7b8:	f1c0 001c 	rsb	r0, r0, #28
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	4403      	add	r3, r0
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	4403      	add	r3, r0
 800a7c6:	4405      	add	r5, r0
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dd07      	ble.n	800a7e0 <_dtoa_r+0x818>
 800a7d0:	ee18 1a10 	vmov	r1, s16
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f001 f9ec 	bl	800bbb4 <__lshift>
 800a7dc:	ee08 0a10 	vmov	s16, r0
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dd05      	ble.n	800a7f2 <_dtoa_r+0x82a>
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f001 f9e2 	bl	800bbb4 <__lshift>
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d06e      	beq.n	800a8d6 <_dtoa_r+0x90e>
 800a7f8:	ee18 0a10 	vmov	r0, s16
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	f001 fa49 	bl	800bc94 <__mcmp>
 800a802:	2800      	cmp	r0, #0
 800a804:	da67      	bge.n	800a8d6 <_dtoa_r+0x90e>
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	3b01      	subs	r3, #1
 800a80a:	ee18 1a10 	vmov	r1, s16
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	220a      	movs	r2, #10
 800a812:	2300      	movs	r3, #0
 800a814:	4620      	mov	r0, r4
 800a816:	f000 ffd3 	bl	800b7c0 <__multadd>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	ee08 0a10 	vmov	s16, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 81b1 	beq.w	800ab88 <_dtoa_r+0xbc0>
 800a826:	2300      	movs	r3, #0
 800a828:	4639      	mov	r1, r7
 800a82a:	220a      	movs	r2, #10
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 ffc7 	bl	800b7c0 <__multadd>
 800a832:	9b02      	ldr	r3, [sp, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	4607      	mov	r7, r0
 800a838:	f300 808e 	bgt.w	800a958 <_dtoa_r+0x990>
 800a83c:	9b06      	ldr	r3, [sp, #24]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	dc51      	bgt.n	800a8e6 <_dtoa_r+0x91e>
 800a842:	e089      	b.n	800a958 <_dtoa_r+0x990>
 800a844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a84a:	e74b      	b.n	800a6e4 <_dtoa_r+0x71c>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	1e5e      	subs	r6, r3, #1
 800a850:	9b07      	ldr	r3, [sp, #28]
 800a852:	42b3      	cmp	r3, r6
 800a854:	bfbf      	itttt	lt
 800a856:	9b07      	ldrlt	r3, [sp, #28]
 800a858:	9607      	strlt	r6, [sp, #28]
 800a85a:	1af2      	sublt	r2, r6, r3
 800a85c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a85e:	bfb6      	itet	lt
 800a860:	189b      	addlt	r3, r3, r2
 800a862:	1b9e      	subge	r6, r3, r6
 800a864:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	bfb8      	it	lt
 800a86a:	2600      	movlt	r6, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bfb7      	itett	lt
 800a870:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a874:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a878:	1a9d      	sublt	r5, r3, r2
 800a87a:	2300      	movlt	r3, #0
 800a87c:	e734      	b.n	800a6e8 <_dtoa_r+0x720>
 800a87e:	9e07      	ldr	r6, [sp, #28]
 800a880:	9d04      	ldr	r5, [sp, #16]
 800a882:	9f08      	ldr	r7, [sp, #32]
 800a884:	e73b      	b.n	800a6fe <_dtoa_r+0x736>
 800a886:	9a07      	ldr	r2, [sp, #28]
 800a888:	e767      	b.n	800a75a <_dtoa_r+0x792>
 800a88a:	9b06      	ldr	r3, [sp, #24]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	dc18      	bgt.n	800a8c2 <_dtoa_r+0x8fa>
 800a890:	f1ba 0f00 	cmp.w	sl, #0
 800a894:	d115      	bne.n	800a8c2 <_dtoa_r+0x8fa>
 800a896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a89a:	b993      	cbnz	r3, 800a8c2 <_dtoa_r+0x8fa>
 800a89c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8a0:	0d1b      	lsrs	r3, r3, #20
 800a8a2:	051b      	lsls	r3, r3, #20
 800a8a4:	b183      	cbz	r3, 800a8c8 <_dtoa_r+0x900>
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	9b05      	ldr	r3, [sp, #20]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	9305      	str	r3, [sp, #20]
 800a8b2:	f04f 0801 	mov.w	r8, #1
 800a8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f47f af6a 	bne.w	800a792 <_dtoa_r+0x7ca>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e76f      	b.n	800a7a2 <_dtoa_r+0x7da>
 800a8c2:	f04f 0800 	mov.w	r8, #0
 800a8c6:	e7f6      	b.n	800a8b6 <_dtoa_r+0x8ee>
 800a8c8:	4698      	mov	r8, r3
 800a8ca:	e7f4      	b.n	800a8b6 <_dtoa_r+0x8ee>
 800a8cc:	f43f af7d 	beq.w	800a7ca <_dtoa_r+0x802>
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	301c      	adds	r0, #28
 800a8d4:	e772      	b.n	800a7bc <_dtoa_r+0x7f4>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc37      	bgt.n	800a94c <_dtoa_r+0x984>
 800a8dc:	9b06      	ldr	r3, [sp, #24]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	dd34      	ble.n	800a94c <_dtoa_r+0x984>
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	9302      	str	r3, [sp, #8]
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	b96b      	cbnz	r3, 800a906 <_dtoa_r+0x93e>
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 ff66 	bl	800b7c0 <__multadd>
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	ee18 0a10 	vmov	r0, s16
 800a8fc:	f001 f9ca 	bl	800bc94 <__mcmp>
 800a900:	2800      	cmp	r0, #0
 800a902:	f73f adbb 	bgt.w	800a47c <_dtoa_r+0x4b4>
 800a906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a908:	9d01      	ldr	r5, [sp, #4]
 800a90a:	43db      	mvns	r3, r3
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	f04f 0800 	mov.w	r8, #0
 800a912:	4631      	mov	r1, r6
 800a914:	4620      	mov	r0, r4
 800a916:	f000 ff31 	bl	800b77c <_Bfree>
 800a91a:	2f00      	cmp	r7, #0
 800a91c:	f43f aea4 	beq.w	800a668 <_dtoa_r+0x6a0>
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d005      	beq.n	800a932 <_dtoa_r+0x96a>
 800a926:	45b8      	cmp	r8, r7
 800a928:	d003      	beq.n	800a932 <_dtoa_r+0x96a>
 800a92a:	4641      	mov	r1, r8
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 ff25 	bl	800b77c <_Bfree>
 800a932:	4639      	mov	r1, r7
 800a934:	4620      	mov	r0, r4
 800a936:	f000 ff21 	bl	800b77c <_Bfree>
 800a93a:	e695      	b.n	800a668 <_dtoa_r+0x6a0>
 800a93c:	2600      	movs	r6, #0
 800a93e:	4637      	mov	r7, r6
 800a940:	e7e1      	b.n	800a906 <_dtoa_r+0x93e>
 800a942:	9700      	str	r7, [sp, #0]
 800a944:	4637      	mov	r7, r6
 800a946:	e599      	b.n	800a47c <_dtoa_r+0x4b4>
 800a948:	40240000 	.word	0x40240000
 800a94c:	9b08      	ldr	r3, [sp, #32]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 80ca 	beq.w	800aae8 <_dtoa_r+0xb20>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	9302      	str	r3, [sp, #8]
 800a958:	2d00      	cmp	r5, #0
 800a95a:	dd05      	ble.n	800a968 <_dtoa_r+0x9a0>
 800a95c:	4639      	mov	r1, r7
 800a95e:	462a      	mov	r2, r5
 800a960:	4620      	mov	r0, r4
 800a962:	f001 f927 	bl	800bbb4 <__lshift>
 800a966:	4607      	mov	r7, r0
 800a968:	f1b8 0f00 	cmp.w	r8, #0
 800a96c:	d05b      	beq.n	800aa26 <_dtoa_r+0xa5e>
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fec3 	bl	800b6fc <_Balloc>
 800a976:	4605      	mov	r5, r0
 800a978:	b928      	cbnz	r0, 800a986 <_dtoa_r+0x9be>
 800a97a:	4b87      	ldr	r3, [pc, #540]	; (800ab98 <_dtoa_r+0xbd0>)
 800a97c:	4602      	mov	r2, r0
 800a97e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a982:	f7ff bb3b 	b.w	8009ffc <_dtoa_r+0x34>
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	3202      	adds	r2, #2
 800a98a:	0092      	lsls	r2, r2, #2
 800a98c:	f107 010c 	add.w	r1, r7, #12
 800a990:	300c      	adds	r0, #12
 800a992:	f7fd fbdb 	bl	800814c <memcpy>
 800a996:	2201      	movs	r2, #1
 800a998:	4629      	mov	r1, r5
 800a99a:	4620      	mov	r0, r4
 800a99c:	f001 f90a 	bl	800bbb4 <__lshift>
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	f103 0901 	add.w	r9, r3, #1
 800a9a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	9305      	str	r3, [sp, #20]
 800a9ae:	f00a 0301 	and.w	r3, sl, #1
 800a9b2:	46b8      	mov	r8, r7
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	ee18 0a10 	vmov	r0, s16
 800a9be:	f7ff fa77 	bl	8009eb0 <quorem>
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	9002      	str	r0, [sp, #8]
 800a9c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9ca:	ee18 0a10 	vmov	r0, s16
 800a9ce:	f001 f961 	bl	800bc94 <__mcmp>
 800a9d2:	463a      	mov	r2, r7
 800a9d4:	9003      	str	r0, [sp, #12]
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f001 f977 	bl	800bccc <__mdiff>
 800a9de:	68c2      	ldr	r2, [r0, #12]
 800a9e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	bb02      	cbnz	r2, 800aa2a <_dtoa_r+0xa62>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	ee18 0a10 	vmov	r0, s16
 800a9ee:	f001 f951 	bl	800bc94 <__mcmp>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	9207      	str	r2, [sp, #28]
 800a9fa:	f000 febf 	bl	800b77c <_Bfree>
 800a9fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa02:	ea43 0102 	orr.w	r1, r3, r2
 800aa06:	9b04      	ldr	r3, [sp, #16]
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	464d      	mov	r5, r9
 800aa0c:	d10f      	bne.n	800aa2e <_dtoa_r+0xa66>
 800aa0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa12:	d02a      	beq.n	800aa6a <_dtoa_r+0xaa2>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	dd02      	ble.n	800aa20 <_dtoa_r+0xa58>
 800aa1a:	9b02      	ldr	r3, [sp, #8]
 800aa1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa20:	f88b a000 	strb.w	sl, [fp]
 800aa24:	e775      	b.n	800a912 <_dtoa_r+0x94a>
 800aa26:	4638      	mov	r0, r7
 800aa28:	e7ba      	b.n	800a9a0 <_dtoa_r+0x9d8>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	e7e2      	b.n	800a9f4 <_dtoa_r+0xa2c>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	db04      	blt.n	800aa3e <_dtoa_r+0xa76>
 800aa34:	9906      	ldr	r1, [sp, #24]
 800aa36:	430b      	orrs	r3, r1
 800aa38:	9904      	ldr	r1, [sp, #16]
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	d122      	bne.n	800aa84 <_dtoa_r+0xabc>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	ddee      	ble.n	800aa20 <_dtoa_r+0xa58>
 800aa42:	ee18 1a10 	vmov	r1, s16
 800aa46:	2201      	movs	r2, #1
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f001 f8b3 	bl	800bbb4 <__lshift>
 800aa4e:	4631      	mov	r1, r6
 800aa50:	ee08 0a10 	vmov	s16, r0
 800aa54:	f001 f91e 	bl	800bc94 <__mcmp>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	dc03      	bgt.n	800aa64 <_dtoa_r+0xa9c>
 800aa5c:	d1e0      	bne.n	800aa20 <_dtoa_r+0xa58>
 800aa5e:	f01a 0f01 	tst.w	sl, #1
 800aa62:	d0dd      	beq.n	800aa20 <_dtoa_r+0xa58>
 800aa64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa68:	d1d7      	bne.n	800aa1a <_dtoa_r+0xa52>
 800aa6a:	2339      	movs	r3, #57	; 0x39
 800aa6c:	f88b 3000 	strb.w	r3, [fp]
 800aa70:	462b      	mov	r3, r5
 800aa72:	461d      	mov	r5, r3
 800aa74:	3b01      	subs	r3, #1
 800aa76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa7a:	2a39      	cmp	r2, #57	; 0x39
 800aa7c:	d071      	beq.n	800ab62 <_dtoa_r+0xb9a>
 800aa7e:	3201      	adds	r2, #1
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	e746      	b.n	800a912 <_dtoa_r+0x94a>
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	dd07      	ble.n	800aa98 <_dtoa_r+0xad0>
 800aa88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa8c:	d0ed      	beq.n	800aa6a <_dtoa_r+0xaa2>
 800aa8e:	f10a 0301 	add.w	r3, sl, #1
 800aa92:	f88b 3000 	strb.w	r3, [fp]
 800aa96:	e73c      	b.n	800a912 <_dtoa_r+0x94a>
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa9e:	4599      	cmp	r9, r3
 800aaa0:	d047      	beq.n	800ab32 <_dtoa_r+0xb6a>
 800aaa2:	ee18 1a10 	vmov	r1, s16
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fe88 	bl	800b7c0 <__multadd>
 800aab0:	45b8      	cmp	r8, r7
 800aab2:	ee08 0a10 	vmov	s16, r0
 800aab6:	f04f 0300 	mov.w	r3, #0
 800aaba:	f04f 020a 	mov.w	r2, #10
 800aabe:	4641      	mov	r1, r8
 800aac0:	4620      	mov	r0, r4
 800aac2:	d106      	bne.n	800aad2 <_dtoa_r+0xb0a>
 800aac4:	f000 fe7c 	bl	800b7c0 <__multadd>
 800aac8:	4680      	mov	r8, r0
 800aaca:	4607      	mov	r7, r0
 800aacc:	f109 0901 	add.w	r9, r9, #1
 800aad0:	e772      	b.n	800a9b8 <_dtoa_r+0x9f0>
 800aad2:	f000 fe75 	bl	800b7c0 <__multadd>
 800aad6:	4639      	mov	r1, r7
 800aad8:	4680      	mov	r8, r0
 800aada:	2300      	movs	r3, #0
 800aadc:	220a      	movs	r2, #10
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 fe6e 	bl	800b7c0 <__multadd>
 800aae4:	4607      	mov	r7, r0
 800aae6:	e7f1      	b.n	800aacc <_dtoa_r+0xb04>
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	9302      	str	r3, [sp, #8]
 800aaec:	9d01      	ldr	r5, [sp, #4]
 800aaee:	ee18 0a10 	vmov	r0, s16
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	f7ff f9dc 	bl	8009eb0 <quorem>
 800aaf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	f805 ab01 	strb.w	sl, [r5], #1
 800ab02:	1aea      	subs	r2, r5, r3
 800ab04:	9b02      	ldr	r3, [sp, #8]
 800ab06:	4293      	cmp	r3, r2
 800ab08:	dd09      	ble.n	800ab1e <_dtoa_r+0xb56>
 800ab0a:	ee18 1a10 	vmov	r1, s16
 800ab0e:	2300      	movs	r3, #0
 800ab10:	220a      	movs	r2, #10
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fe54 	bl	800b7c0 <__multadd>
 800ab18:	ee08 0a10 	vmov	s16, r0
 800ab1c:	e7e7      	b.n	800aaee <_dtoa_r+0xb26>
 800ab1e:	9b02      	ldr	r3, [sp, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bfc8      	it	gt
 800ab24:	461d      	movgt	r5, r3
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	bfd8      	it	le
 800ab2a:	2501      	movle	r5, #1
 800ab2c:	441d      	add	r5, r3
 800ab2e:	f04f 0800 	mov.w	r8, #0
 800ab32:	ee18 1a10 	vmov	r1, s16
 800ab36:	2201      	movs	r2, #1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f001 f83b 	bl	800bbb4 <__lshift>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	ee08 0a10 	vmov	s16, r0
 800ab44:	f001 f8a6 	bl	800bc94 <__mcmp>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	dc91      	bgt.n	800aa70 <_dtoa_r+0xaa8>
 800ab4c:	d102      	bne.n	800ab54 <_dtoa_r+0xb8c>
 800ab4e:	f01a 0f01 	tst.w	sl, #1
 800ab52:	d18d      	bne.n	800aa70 <_dtoa_r+0xaa8>
 800ab54:	462b      	mov	r3, r5
 800ab56:	461d      	mov	r5, r3
 800ab58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab5c:	2a30      	cmp	r2, #48	; 0x30
 800ab5e:	d0fa      	beq.n	800ab56 <_dtoa_r+0xb8e>
 800ab60:	e6d7      	b.n	800a912 <_dtoa_r+0x94a>
 800ab62:	9a01      	ldr	r2, [sp, #4]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d184      	bne.n	800aa72 <_dtoa_r+0xaaa>
 800ab68:	9b00      	ldr	r3, [sp, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	2331      	movs	r3, #49	; 0x31
 800ab70:	7013      	strb	r3, [r2, #0]
 800ab72:	e6ce      	b.n	800a912 <_dtoa_r+0x94a>
 800ab74:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <_dtoa_r+0xbd4>)
 800ab76:	f7ff ba95 	b.w	800a0a4 <_dtoa_r+0xdc>
 800ab7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f47f aa6e 	bne.w	800a05e <_dtoa_r+0x96>
 800ab82:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <_dtoa_r+0xbd8>)
 800ab84:	f7ff ba8e 	b.w	800a0a4 <_dtoa_r+0xdc>
 800ab88:	9b02      	ldr	r3, [sp, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dcae      	bgt.n	800aaec <_dtoa_r+0xb24>
 800ab8e:	9b06      	ldr	r3, [sp, #24]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	f73f aea8 	bgt.w	800a8e6 <_dtoa_r+0x91e>
 800ab96:	e7a9      	b.n	800aaec <_dtoa_r+0xb24>
 800ab98:	0800dd00 	.word	0x0800dd00
 800ab9c:	0800db04 	.word	0x0800db04
 800aba0:	0800dc81 	.word	0x0800dc81

0800aba4 <__sflush_r>:
 800aba4:	898a      	ldrh	r2, [r1, #12]
 800aba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abaa:	4605      	mov	r5, r0
 800abac:	0710      	lsls	r0, r2, #28
 800abae:	460c      	mov	r4, r1
 800abb0:	d458      	bmi.n	800ac64 <__sflush_r+0xc0>
 800abb2:	684b      	ldr	r3, [r1, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dc05      	bgt.n	800abc4 <__sflush_r+0x20>
 800abb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	dc02      	bgt.n	800abc4 <__sflush_r+0x20>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc6:	2e00      	cmp	r6, #0
 800abc8:	d0f9      	beq.n	800abbe <__sflush_r+0x1a>
 800abca:	2300      	movs	r3, #0
 800abcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abd0:	682f      	ldr	r7, [r5, #0]
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	d032      	beq.n	800ac3c <__sflush_r+0x98>
 800abd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	075a      	lsls	r2, r3, #29
 800abdc:	d505      	bpl.n	800abea <__sflush_r+0x46>
 800abde:	6863      	ldr	r3, [r4, #4]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abe4:	b10b      	cbz	r3, 800abea <__sflush_r+0x46>
 800abe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abe8:	1ac0      	subs	r0, r0, r3
 800abea:	2300      	movs	r3, #0
 800abec:	4602      	mov	r2, r0
 800abee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abf0:	6a21      	ldr	r1, [r4, #32]
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b0      	blx	r6
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	d106      	bne.n	800ac0a <__sflush_r+0x66>
 800abfc:	6829      	ldr	r1, [r5, #0]
 800abfe:	291d      	cmp	r1, #29
 800ac00:	d82c      	bhi.n	800ac5c <__sflush_r+0xb8>
 800ac02:	4a2a      	ldr	r2, [pc, #168]	; (800acac <__sflush_r+0x108>)
 800ac04:	40ca      	lsrs	r2, r1
 800ac06:	07d6      	lsls	r6, r2, #31
 800ac08:	d528      	bpl.n	800ac5c <__sflush_r+0xb8>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6062      	str	r2, [r4, #4]
 800ac0e:	04d9      	lsls	r1, r3, #19
 800ac10:	6922      	ldr	r2, [r4, #16]
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	d504      	bpl.n	800ac20 <__sflush_r+0x7c>
 800ac16:	1c42      	adds	r2, r0, #1
 800ac18:	d101      	bne.n	800ac1e <__sflush_r+0x7a>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b903      	cbnz	r3, 800ac20 <__sflush_r+0x7c>
 800ac1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac22:	602f      	str	r7, [r5, #0]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d0ca      	beq.n	800abbe <__sflush_r+0x1a>
 800ac28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	d002      	beq.n	800ac36 <__sflush_r+0x92>
 800ac30:	4628      	mov	r0, r5
 800ac32:	f001 fa3b 	bl	800c0ac <_free_r>
 800ac36:	2000      	movs	r0, #0
 800ac38:	6360      	str	r0, [r4, #52]	; 0x34
 800ac3a:	e7c1      	b.n	800abc0 <__sflush_r+0x1c>
 800ac3c:	6a21      	ldr	r1, [r4, #32]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b0      	blx	r6
 800ac44:	1c41      	adds	r1, r0, #1
 800ac46:	d1c7      	bne.n	800abd8 <__sflush_r+0x34>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0c4      	beq.n	800abd8 <__sflush_r+0x34>
 800ac4e:	2b1d      	cmp	r3, #29
 800ac50:	d001      	beq.n	800ac56 <__sflush_r+0xb2>
 800ac52:	2b16      	cmp	r3, #22
 800ac54:	d101      	bne.n	800ac5a <__sflush_r+0xb6>
 800ac56:	602f      	str	r7, [r5, #0]
 800ac58:	e7b1      	b.n	800abbe <__sflush_r+0x1a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	e7ad      	b.n	800abc0 <__sflush_r+0x1c>
 800ac64:	690f      	ldr	r7, [r1, #16]
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	d0a9      	beq.n	800abbe <__sflush_r+0x1a>
 800ac6a:	0793      	lsls	r3, r2, #30
 800ac6c:	680e      	ldr	r6, [r1, #0]
 800ac6e:	bf08      	it	eq
 800ac70:	694b      	ldreq	r3, [r1, #20]
 800ac72:	600f      	str	r7, [r1, #0]
 800ac74:	bf18      	it	ne
 800ac76:	2300      	movne	r3, #0
 800ac78:	eba6 0807 	sub.w	r8, r6, r7
 800ac7c:	608b      	str	r3, [r1, #8]
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	dd9c      	ble.n	800abbe <__sflush_r+0x1a>
 800ac84:	6a21      	ldr	r1, [r4, #32]
 800ac86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac88:	4643      	mov	r3, r8
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b0      	blx	r6
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dc06      	bgt.n	800aca2 <__sflush_r+0xfe>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	e78e      	b.n	800abc0 <__sflush_r+0x1c>
 800aca2:	4407      	add	r7, r0
 800aca4:	eba8 0800 	sub.w	r8, r8, r0
 800aca8:	e7e9      	b.n	800ac7e <__sflush_r+0xda>
 800acaa:	bf00      	nop
 800acac:	20400001 	.word	0x20400001

0800acb0 <_fflush_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	690b      	ldr	r3, [r1, #16]
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b913      	cbnz	r3, 800acc0 <_fflush_r+0x10>
 800acba:	2500      	movs	r5, #0
 800acbc:	4628      	mov	r0, r5
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	b118      	cbz	r0, 800acca <_fflush_r+0x1a>
 800acc2:	6983      	ldr	r3, [r0, #24]
 800acc4:	b90b      	cbnz	r3, 800acca <_fflush_r+0x1a>
 800acc6:	f000 f887 	bl	800add8 <__sinit>
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <_fflush_r+0x6c>)
 800accc:	429c      	cmp	r4, r3
 800acce:	d11b      	bne.n	800ad08 <_fflush_r+0x58>
 800acd0:	686c      	ldr	r4, [r5, #4]
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ef      	beq.n	800acba <_fflush_r+0xa>
 800acda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acdc:	07d0      	lsls	r0, r2, #31
 800acde:	d404      	bmi.n	800acea <_fflush_r+0x3a>
 800ace0:	0599      	lsls	r1, r3, #22
 800ace2:	d402      	bmi.n	800acea <_fflush_r+0x3a>
 800ace4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ace6:	f000 fc88 	bl	800b5fa <__retarget_lock_acquire_recursive>
 800acea:	4628      	mov	r0, r5
 800acec:	4621      	mov	r1, r4
 800acee:	f7ff ff59 	bl	800aba4 <__sflush_r>
 800acf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acf4:	07da      	lsls	r2, r3, #31
 800acf6:	4605      	mov	r5, r0
 800acf8:	d4e0      	bmi.n	800acbc <_fflush_r+0xc>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	059b      	lsls	r3, r3, #22
 800acfe:	d4dd      	bmi.n	800acbc <_fflush_r+0xc>
 800ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad02:	f000 fc7b 	bl	800b5fc <__retarget_lock_release_recursive>
 800ad06:	e7d9      	b.n	800acbc <_fflush_r+0xc>
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <_fflush_r+0x70>)
 800ad0a:	429c      	cmp	r4, r3
 800ad0c:	d101      	bne.n	800ad12 <_fflush_r+0x62>
 800ad0e:	68ac      	ldr	r4, [r5, #8]
 800ad10:	e7df      	b.n	800acd2 <_fflush_r+0x22>
 800ad12:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <_fflush_r+0x74>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	bf08      	it	eq
 800ad18:	68ec      	ldreq	r4, [r5, #12]
 800ad1a:	e7da      	b.n	800acd2 <_fflush_r+0x22>
 800ad1c:	0800dd34 	.word	0x0800dd34
 800ad20:	0800dd54 	.word	0x0800dd54
 800ad24:	0800dd14 	.word	0x0800dd14

0800ad28 <std>:
 800ad28:	2300      	movs	r3, #0
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad36:	6083      	str	r3, [r0, #8]
 800ad38:	8181      	strh	r1, [r0, #12]
 800ad3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad3c:	81c2      	strh	r2, [r0, #14]
 800ad3e:	6183      	str	r3, [r0, #24]
 800ad40:	4619      	mov	r1, r3
 800ad42:	2208      	movs	r2, #8
 800ad44:	305c      	adds	r0, #92	; 0x5c
 800ad46:	f7fd fa0f 	bl	8008168 <memset>
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <std+0x38>)
 800ad4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <std+0x3c>)
 800ad50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <std+0x40>)
 800ad54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <std+0x44>)
 800ad58:	6224      	str	r4, [r4, #32]
 800ad5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800c809 	.word	0x0800c809
 800ad64:	0800c82b 	.word	0x0800c82b
 800ad68:	0800c863 	.word	0x0800c863
 800ad6c:	0800c887 	.word	0x0800c887

0800ad70 <_cleanup_r>:
 800ad70:	4901      	ldr	r1, [pc, #4]	; (800ad78 <_cleanup_r+0x8>)
 800ad72:	f000 b8af 	b.w	800aed4 <_fwalk_reent>
 800ad76:	bf00      	nop
 800ad78:	0800acb1 	.word	0x0800acb1

0800ad7c <__sfmoreglue>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	2268      	movs	r2, #104	; 0x68
 800ad80:	1e4d      	subs	r5, r1, #1
 800ad82:	4355      	muls	r5, r2
 800ad84:	460e      	mov	r6, r1
 800ad86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad8a:	f001 f9fb 	bl	800c184 <_malloc_r>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	b140      	cbz	r0, 800ada4 <__sfmoreglue+0x28>
 800ad92:	2100      	movs	r1, #0
 800ad94:	e9c0 1600 	strd	r1, r6, [r0]
 800ad98:	300c      	adds	r0, #12
 800ad9a:	60a0      	str	r0, [r4, #8]
 800ad9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ada0:	f7fd f9e2 	bl	8008168 <memset>
 800ada4:	4620      	mov	r0, r4
 800ada6:	bd70      	pop	{r4, r5, r6, pc}

0800ada8 <__sfp_lock_acquire>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__sfp_lock_acquire+0x8>)
 800adaa:	f000 bc26 	b.w	800b5fa <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	200027b9 	.word	0x200027b9

0800adb4 <__sfp_lock_release>:
 800adb4:	4801      	ldr	r0, [pc, #4]	; (800adbc <__sfp_lock_release+0x8>)
 800adb6:	f000 bc21 	b.w	800b5fc <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	200027b9 	.word	0x200027b9

0800adc0 <__sinit_lock_acquire>:
 800adc0:	4801      	ldr	r0, [pc, #4]	; (800adc8 <__sinit_lock_acquire+0x8>)
 800adc2:	f000 bc1a 	b.w	800b5fa <__retarget_lock_acquire_recursive>
 800adc6:	bf00      	nop
 800adc8:	200027ba 	.word	0x200027ba

0800adcc <__sinit_lock_release>:
 800adcc:	4801      	ldr	r0, [pc, #4]	; (800add4 <__sinit_lock_release+0x8>)
 800adce:	f000 bc15 	b.w	800b5fc <__retarget_lock_release_recursive>
 800add2:	bf00      	nop
 800add4:	200027ba 	.word	0x200027ba

0800add8 <__sinit>:
 800add8:	b510      	push	{r4, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	f7ff fff0 	bl	800adc0 <__sinit_lock_acquire>
 800ade0:	69a3      	ldr	r3, [r4, #24]
 800ade2:	b11b      	cbz	r3, 800adec <__sinit+0x14>
 800ade4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ade8:	f7ff bff0 	b.w	800adcc <__sinit_lock_release>
 800adec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adf0:	6523      	str	r3, [r4, #80]	; 0x50
 800adf2:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <__sinit+0x68>)
 800adf4:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <__sinit+0x6c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	bf04      	itt	eq
 800adfe:	2301      	moveq	r3, #1
 800ae00:	61a3      	streq	r3, [r4, #24]
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f820 	bl	800ae48 <__sfp>
 800ae08:	6060      	str	r0, [r4, #4]
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 f81c 	bl	800ae48 <__sfp>
 800ae10:	60a0      	str	r0, [r4, #8]
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f818 	bl	800ae48 <__sfp>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	60e0      	str	r0, [r4, #12]
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	6860      	ldr	r0, [r4, #4]
 800ae20:	f7ff ff82 	bl	800ad28 <std>
 800ae24:	68a0      	ldr	r0, [r4, #8]
 800ae26:	2201      	movs	r2, #1
 800ae28:	2109      	movs	r1, #9
 800ae2a:	f7ff ff7d 	bl	800ad28 <std>
 800ae2e:	68e0      	ldr	r0, [r4, #12]
 800ae30:	2202      	movs	r2, #2
 800ae32:	2112      	movs	r1, #18
 800ae34:	f7ff ff78 	bl	800ad28 <std>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	61a3      	str	r3, [r4, #24]
 800ae3c:	e7d2      	b.n	800ade4 <__sinit+0xc>
 800ae3e:	bf00      	nop
 800ae40:	0800daf0 	.word	0x0800daf0
 800ae44:	0800ad71 	.word	0x0800ad71

0800ae48 <__sfp>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	f7ff ffac 	bl	800ada8 <__sfp_lock_acquire>
 800ae50:	4b1e      	ldr	r3, [pc, #120]	; (800aecc <__sfp+0x84>)
 800ae52:	681e      	ldr	r6, [r3, #0]
 800ae54:	69b3      	ldr	r3, [r6, #24]
 800ae56:	b913      	cbnz	r3, 800ae5e <__sfp+0x16>
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ffbd 	bl	800add8 <__sinit>
 800ae5e:	3648      	adds	r6, #72	; 0x48
 800ae60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	d503      	bpl.n	800ae70 <__sfp+0x28>
 800ae68:	6833      	ldr	r3, [r6, #0]
 800ae6a:	b30b      	cbz	r3, 800aeb0 <__sfp+0x68>
 800ae6c:	6836      	ldr	r6, [r6, #0]
 800ae6e:	e7f7      	b.n	800ae60 <__sfp+0x18>
 800ae70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae74:	b9d5      	cbnz	r5, 800aeac <__sfp+0x64>
 800ae76:	4b16      	ldr	r3, [pc, #88]	; (800aed0 <__sfp+0x88>)
 800ae78:	60e3      	str	r3, [r4, #12]
 800ae7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae80:	f000 fbba 	bl	800b5f8 <__retarget_lock_init_recursive>
 800ae84:	f7ff ff96 	bl	800adb4 <__sfp_lock_release>
 800ae88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae90:	6025      	str	r5, [r4, #0]
 800ae92:	61a5      	str	r5, [r4, #24]
 800ae94:	2208      	movs	r2, #8
 800ae96:	4629      	mov	r1, r5
 800ae98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae9c:	f7fd f964 	bl	8008168 <memset>
 800aea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aea8:	4620      	mov	r0, r4
 800aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeac:	3468      	adds	r4, #104	; 0x68
 800aeae:	e7d9      	b.n	800ae64 <__sfp+0x1c>
 800aeb0:	2104      	movs	r1, #4
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	f7ff ff62 	bl	800ad7c <__sfmoreglue>
 800aeb8:	4604      	mov	r4, r0
 800aeba:	6030      	str	r0, [r6, #0]
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d1d5      	bne.n	800ae6c <__sfp+0x24>
 800aec0:	f7ff ff78 	bl	800adb4 <__sfp_lock_release>
 800aec4:	230c      	movs	r3, #12
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	e7ee      	b.n	800aea8 <__sfp+0x60>
 800aeca:	bf00      	nop
 800aecc:	0800daf0 	.word	0x0800daf0
 800aed0:	ffff0001 	.word	0xffff0001

0800aed4 <_fwalk_reent>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	4606      	mov	r6, r0
 800aeda:	4688      	mov	r8, r1
 800aedc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aee0:	2700      	movs	r7, #0
 800aee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aee6:	f1b9 0901 	subs.w	r9, r9, #1
 800aeea:	d505      	bpl.n	800aef8 <_fwalk_reent+0x24>
 800aeec:	6824      	ldr	r4, [r4, #0]
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	d1f7      	bne.n	800aee2 <_fwalk_reent+0xe>
 800aef2:	4638      	mov	r0, r7
 800aef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef8:	89ab      	ldrh	r3, [r5, #12]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d907      	bls.n	800af0e <_fwalk_reent+0x3a>
 800aefe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af02:	3301      	adds	r3, #1
 800af04:	d003      	beq.n	800af0e <_fwalk_reent+0x3a>
 800af06:	4629      	mov	r1, r5
 800af08:	4630      	mov	r0, r6
 800af0a:	47c0      	blx	r8
 800af0c:	4307      	orrs	r7, r0
 800af0e:	3568      	adds	r5, #104	; 0x68
 800af10:	e7e9      	b.n	800aee6 <_fwalk_reent+0x12>

0800af12 <rshift>:
 800af12:	6903      	ldr	r3, [r0, #16]
 800af14:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af1c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af20:	f100 0414 	add.w	r4, r0, #20
 800af24:	dd45      	ble.n	800afb2 <rshift+0xa0>
 800af26:	f011 011f 	ands.w	r1, r1, #31
 800af2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af2e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af32:	d10c      	bne.n	800af4e <rshift+0x3c>
 800af34:	f100 0710 	add.w	r7, r0, #16
 800af38:	4629      	mov	r1, r5
 800af3a:	42b1      	cmp	r1, r6
 800af3c:	d334      	bcc.n	800afa8 <rshift+0x96>
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	1eea      	subs	r2, r5, #3
 800af44:	4296      	cmp	r6, r2
 800af46:	bf38      	it	cc
 800af48:	2300      	movcc	r3, #0
 800af4a:	4423      	add	r3, r4
 800af4c:	e015      	b.n	800af7a <rshift+0x68>
 800af4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af52:	f1c1 0820 	rsb	r8, r1, #32
 800af56:	40cf      	lsrs	r7, r1
 800af58:	f105 0e04 	add.w	lr, r5, #4
 800af5c:	46a1      	mov	r9, r4
 800af5e:	4576      	cmp	r6, lr
 800af60:	46f4      	mov	ip, lr
 800af62:	d815      	bhi.n	800af90 <rshift+0x7e>
 800af64:	1a9a      	subs	r2, r3, r2
 800af66:	0092      	lsls	r2, r2, #2
 800af68:	3a04      	subs	r2, #4
 800af6a:	3501      	adds	r5, #1
 800af6c:	42ae      	cmp	r6, r5
 800af6e:	bf38      	it	cc
 800af70:	2200      	movcc	r2, #0
 800af72:	18a3      	adds	r3, r4, r2
 800af74:	50a7      	str	r7, [r4, r2]
 800af76:	b107      	cbz	r7, 800af7a <rshift+0x68>
 800af78:	3304      	adds	r3, #4
 800af7a:	1b1a      	subs	r2, r3, r4
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af82:	bf08      	it	eq
 800af84:	2300      	moveq	r3, #0
 800af86:	6102      	str	r2, [r0, #16]
 800af88:	bf08      	it	eq
 800af8a:	6143      	streq	r3, [r0, #20]
 800af8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af90:	f8dc c000 	ldr.w	ip, [ip]
 800af94:	fa0c fc08 	lsl.w	ip, ip, r8
 800af98:	ea4c 0707 	orr.w	r7, ip, r7
 800af9c:	f849 7b04 	str.w	r7, [r9], #4
 800afa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afa4:	40cf      	lsrs	r7, r1
 800afa6:	e7da      	b.n	800af5e <rshift+0x4c>
 800afa8:	f851 cb04 	ldr.w	ip, [r1], #4
 800afac:	f847 cf04 	str.w	ip, [r7, #4]!
 800afb0:	e7c3      	b.n	800af3a <rshift+0x28>
 800afb2:	4623      	mov	r3, r4
 800afb4:	e7e1      	b.n	800af7a <rshift+0x68>

0800afb6 <__hexdig_fun>:
 800afb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afba:	2b09      	cmp	r3, #9
 800afbc:	d802      	bhi.n	800afc4 <__hexdig_fun+0xe>
 800afbe:	3820      	subs	r0, #32
 800afc0:	b2c0      	uxtb	r0, r0
 800afc2:	4770      	bx	lr
 800afc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afc8:	2b05      	cmp	r3, #5
 800afca:	d801      	bhi.n	800afd0 <__hexdig_fun+0x1a>
 800afcc:	3847      	subs	r0, #71	; 0x47
 800afce:	e7f7      	b.n	800afc0 <__hexdig_fun+0xa>
 800afd0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afd4:	2b05      	cmp	r3, #5
 800afd6:	d801      	bhi.n	800afdc <__hexdig_fun+0x26>
 800afd8:	3827      	subs	r0, #39	; 0x27
 800afda:	e7f1      	b.n	800afc0 <__hexdig_fun+0xa>
 800afdc:	2000      	movs	r0, #0
 800afde:	4770      	bx	lr

0800afe0 <__gethex>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ed2d 8b02 	vpush	{d8}
 800afe8:	b089      	sub	sp, #36	; 0x24
 800afea:	ee08 0a10 	vmov	s16, r0
 800afee:	9304      	str	r3, [sp, #16]
 800aff0:	4bb4      	ldr	r3, [pc, #720]	; (800b2c4 <__gethex+0x2e4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	468b      	mov	fp, r1
 800affa:	4690      	mov	r8, r2
 800affc:	f7f5 f908 	bl	8000210 <strlen>
 800b000:	9b01      	ldr	r3, [sp, #4]
 800b002:	f8db 2000 	ldr.w	r2, [fp]
 800b006:	4403      	add	r3, r0
 800b008:	4682      	mov	sl, r0
 800b00a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	1c93      	adds	r3, r2, #2
 800b012:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b016:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b01a:	32fe      	adds	r2, #254	; 0xfe
 800b01c:	18d1      	adds	r1, r2, r3
 800b01e:	461f      	mov	r7, r3
 800b020:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b024:	9100      	str	r1, [sp, #0]
 800b026:	2830      	cmp	r0, #48	; 0x30
 800b028:	d0f8      	beq.n	800b01c <__gethex+0x3c>
 800b02a:	f7ff ffc4 	bl	800afb6 <__hexdig_fun>
 800b02e:	4604      	mov	r4, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	d13a      	bne.n	800b0aa <__gethex+0xca>
 800b034:	9901      	ldr	r1, [sp, #4]
 800b036:	4652      	mov	r2, sl
 800b038:	4638      	mov	r0, r7
 800b03a:	f001 fc28 	bl	800c88e <strncmp>
 800b03e:	4605      	mov	r5, r0
 800b040:	2800      	cmp	r0, #0
 800b042:	d168      	bne.n	800b116 <__gethex+0x136>
 800b044:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b048:	eb07 060a 	add.w	r6, r7, sl
 800b04c:	f7ff ffb3 	bl	800afb6 <__hexdig_fun>
 800b050:	2800      	cmp	r0, #0
 800b052:	d062      	beq.n	800b11a <__gethex+0x13a>
 800b054:	4633      	mov	r3, r6
 800b056:	7818      	ldrb	r0, [r3, #0]
 800b058:	2830      	cmp	r0, #48	; 0x30
 800b05a:	461f      	mov	r7, r3
 800b05c:	f103 0301 	add.w	r3, r3, #1
 800b060:	d0f9      	beq.n	800b056 <__gethex+0x76>
 800b062:	f7ff ffa8 	bl	800afb6 <__hexdig_fun>
 800b066:	2301      	movs	r3, #1
 800b068:	fab0 f480 	clz	r4, r0
 800b06c:	0964      	lsrs	r4, r4, #5
 800b06e:	4635      	mov	r5, r6
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	463a      	mov	r2, r7
 800b074:	4616      	mov	r6, r2
 800b076:	3201      	adds	r2, #1
 800b078:	7830      	ldrb	r0, [r6, #0]
 800b07a:	f7ff ff9c 	bl	800afb6 <__hexdig_fun>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d1f8      	bne.n	800b074 <__gethex+0x94>
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	4652      	mov	r2, sl
 800b086:	4630      	mov	r0, r6
 800b088:	f001 fc01 	bl	800c88e <strncmp>
 800b08c:	b980      	cbnz	r0, 800b0b0 <__gethex+0xd0>
 800b08e:	b94d      	cbnz	r5, 800b0a4 <__gethex+0xc4>
 800b090:	eb06 050a 	add.w	r5, r6, sl
 800b094:	462a      	mov	r2, r5
 800b096:	4616      	mov	r6, r2
 800b098:	3201      	adds	r2, #1
 800b09a:	7830      	ldrb	r0, [r6, #0]
 800b09c:	f7ff ff8b 	bl	800afb6 <__hexdig_fun>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1f8      	bne.n	800b096 <__gethex+0xb6>
 800b0a4:	1bad      	subs	r5, r5, r6
 800b0a6:	00ad      	lsls	r5, r5, #2
 800b0a8:	e004      	b.n	800b0b4 <__gethex+0xd4>
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	e7e0      	b.n	800b072 <__gethex+0x92>
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	d1f7      	bne.n	800b0a4 <__gethex+0xc4>
 800b0b4:	7833      	ldrb	r3, [r6, #0]
 800b0b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0ba:	2b50      	cmp	r3, #80	; 0x50
 800b0bc:	d13b      	bne.n	800b136 <__gethex+0x156>
 800b0be:	7873      	ldrb	r3, [r6, #1]
 800b0c0:	2b2b      	cmp	r3, #43	; 0x2b
 800b0c2:	d02c      	beq.n	800b11e <__gethex+0x13e>
 800b0c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b0c6:	d02e      	beq.n	800b126 <__gethex+0x146>
 800b0c8:	1c71      	adds	r1, r6, #1
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	7808      	ldrb	r0, [r1, #0]
 800b0d0:	f7ff ff71 	bl	800afb6 <__hexdig_fun>
 800b0d4:	1e43      	subs	r3, r0, #1
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b18      	cmp	r3, #24
 800b0da:	d82c      	bhi.n	800b136 <__gethex+0x156>
 800b0dc:	f1a0 0210 	sub.w	r2, r0, #16
 800b0e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0e4:	f7ff ff67 	bl	800afb6 <__hexdig_fun>
 800b0e8:	1e43      	subs	r3, r0, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b18      	cmp	r3, #24
 800b0ee:	d91d      	bls.n	800b12c <__gethex+0x14c>
 800b0f0:	f1b9 0f00 	cmp.w	r9, #0
 800b0f4:	d000      	beq.n	800b0f8 <__gethex+0x118>
 800b0f6:	4252      	negs	r2, r2
 800b0f8:	4415      	add	r5, r2
 800b0fa:	f8cb 1000 	str.w	r1, [fp]
 800b0fe:	b1e4      	cbz	r4, 800b13a <__gethex+0x15a>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bf14      	ite	ne
 800b106:	2700      	movne	r7, #0
 800b108:	2706      	moveq	r7, #6
 800b10a:	4638      	mov	r0, r7
 800b10c:	b009      	add	sp, #36	; 0x24
 800b10e:	ecbd 8b02 	vpop	{d8}
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	463e      	mov	r6, r7
 800b118:	4625      	mov	r5, r4
 800b11a:	2401      	movs	r4, #1
 800b11c:	e7ca      	b.n	800b0b4 <__gethex+0xd4>
 800b11e:	f04f 0900 	mov.w	r9, #0
 800b122:	1cb1      	adds	r1, r6, #2
 800b124:	e7d3      	b.n	800b0ce <__gethex+0xee>
 800b126:	f04f 0901 	mov.w	r9, #1
 800b12a:	e7fa      	b.n	800b122 <__gethex+0x142>
 800b12c:	230a      	movs	r3, #10
 800b12e:	fb03 0202 	mla	r2, r3, r2, r0
 800b132:	3a10      	subs	r2, #16
 800b134:	e7d4      	b.n	800b0e0 <__gethex+0x100>
 800b136:	4631      	mov	r1, r6
 800b138:	e7df      	b.n	800b0fa <__gethex+0x11a>
 800b13a:	1bf3      	subs	r3, r6, r7
 800b13c:	3b01      	subs	r3, #1
 800b13e:	4621      	mov	r1, r4
 800b140:	2b07      	cmp	r3, #7
 800b142:	dc0b      	bgt.n	800b15c <__gethex+0x17c>
 800b144:	ee18 0a10 	vmov	r0, s16
 800b148:	f000 fad8 	bl	800b6fc <_Balloc>
 800b14c:	4604      	mov	r4, r0
 800b14e:	b940      	cbnz	r0, 800b162 <__gethex+0x182>
 800b150:	4b5d      	ldr	r3, [pc, #372]	; (800b2c8 <__gethex+0x2e8>)
 800b152:	4602      	mov	r2, r0
 800b154:	21de      	movs	r1, #222	; 0xde
 800b156:	485d      	ldr	r0, [pc, #372]	; (800b2cc <__gethex+0x2ec>)
 800b158:	f001 fbcc 	bl	800c8f4 <__assert_func>
 800b15c:	3101      	adds	r1, #1
 800b15e:	105b      	asrs	r3, r3, #1
 800b160:	e7ee      	b.n	800b140 <__gethex+0x160>
 800b162:	f100 0914 	add.w	r9, r0, #20
 800b166:	f04f 0b00 	mov.w	fp, #0
 800b16a:	f1ca 0301 	rsb	r3, sl, #1
 800b16e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b172:	f8cd b000 	str.w	fp, [sp]
 800b176:	9306      	str	r3, [sp, #24]
 800b178:	42b7      	cmp	r7, r6
 800b17a:	d340      	bcc.n	800b1fe <__gethex+0x21e>
 800b17c:	9802      	ldr	r0, [sp, #8]
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	f840 3b04 	str.w	r3, [r0], #4
 800b184:	eba0 0009 	sub.w	r0, r0, r9
 800b188:	1080      	asrs	r0, r0, #2
 800b18a:	0146      	lsls	r6, r0, #5
 800b18c:	6120      	str	r0, [r4, #16]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fba6 	bl	800b8e0 <__hi0bits>
 800b194:	1a30      	subs	r0, r6, r0
 800b196:	f8d8 6000 	ldr.w	r6, [r8]
 800b19a:	42b0      	cmp	r0, r6
 800b19c:	dd63      	ble.n	800b266 <__gethex+0x286>
 800b19e:	1b87      	subs	r7, r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 ff4a 	bl	800c03c <__any_on>
 800b1a8:	4682      	mov	sl, r0
 800b1aa:	b1a8      	cbz	r0, 800b1d8 <__gethex+0x1f8>
 800b1ac:	1e7b      	subs	r3, r7, #1
 800b1ae:	1159      	asrs	r1, r3, #5
 800b1b0:	f003 021f 	and.w	r2, r3, #31
 800b1b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1b8:	f04f 0a01 	mov.w	sl, #1
 800b1bc:	fa0a f202 	lsl.w	r2, sl, r2
 800b1c0:	420a      	tst	r2, r1
 800b1c2:	d009      	beq.n	800b1d8 <__gethex+0x1f8>
 800b1c4:	4553      	cmp	r3, sl
 800b1c6:	dd05      	ble.n	800b1d4 <__gethex+0x1f4>
 800b1c8:	1eb9      	subs	r1, r7, #2
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 ff36 	bl	800c03c <__any_on>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d145      	bne.n	800b260 <__gethex+0x280>
 800b1d4:	f04f 0a02 	mov.w	sl, #2
 800b1d8:	4639      	mov	r1, r7
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7ff fe99 	bl	800af12 <rshift>
 800b1e0:	443d      	add	r5, r7
 800b1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1e6:	42ab      	cmp	r3, r5
 800b1e8:	da4c      	bge.n	800b284 <__gethex+0x2a4>
 800b1ea:	ee18 0a10 	vmov	r0, s16
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f000 fac4 	bl	800b77c <_Bfree>
 800b1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	27a3      	movs	r7, #163	; 0xa3
 800b1fc:	e785      	b.n	800b10a <__gethex+0x12a>
 800b1fe:	1e73      	subs	r3, r6, #1
 800b200:	9a05      	ldr	r2, [sp, #20]
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b208:	4293      	cmp	r3, r2
 800b20a:	d019      	beq.n	800b240 <__gethex+0x260>
 800b20c:	f1bb 0f20 	cmp.w	fp, #32
 800b210:	d107      	bne.n	800b222 <__gethex+0x242>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	9a00      	ldr	r2, [sp, #0]
 800b216:	f843 2b04 	str.w	r2, [r3], #4
 800b21a:	9302      	str	r3, [sp, #8]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	469b      	mov	fp, r3
 800b222:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b226:	f7ff fec6 	bl	800afb6 <__hexdig_fun>
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	f000 000f 	and.w	r0, r0, #15
 800b230:	fa00 f00b 	lsl.w	r0, r0, fp
 800b234:	4303      	orrs	r3, r0
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	f10b 0b04 	add.w	fp, fp, #4
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	e00d      	b.n	800b25c <__gethex+0x27c>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	9a06      	ldr	r2, [sp, #24]
 800b244:	4413      	add	r3, r2
 800b246:	42bb      	cmp	r3, r7
 800b248:	d3e0      	bcc.n	800b20c <__gethex+0x22c>
 800b24a:	4618      	mov	r0, r3
 800b24c:	9901      	ldr	r1, [sp, #4]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	4652      	mov	r2, sl
 800b252:	f001 fb1c 	bl	800c88e <strncmp>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1d7      	bne.n	800b20c <__gethex+0x22c>
 800b25c:	461e      	mov	r6, r3
 800b25e:	e78b      	b.n	800b178 <__gethex+0x198>
 800b260:	f04f 0a03 	mov.w	sl, #3
 800b264:	e7b8      	b.n	800b1d8 <__gethex+0x1f8>
 800b266:	da0a      	bge.n	800b27e <__gethex+0x29e>
 800b268:	1a37      	subs	r7, r6, r0
 800b26a:	4621      	mov	r1, r4
 800b26c:	ee18 0a10 	vmov	r0, s16
 800b270:	463a      	mov	r2, r7
 800b272:	f000 fc9f 	bl	800bbb4 <__lshift>
 800b276:	1bed      	subs	r5, r5, r7
 800b278:	4604      	mov	r4, r0
 800b27a:	f100 0914 	add.w	r9, r0, #20
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	e7ae      	b.n	800b1e2 <__gethex+0x202>
 800b284:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b288:	42a8      	cmp	r0, r5
 800b28a:	dd72      	ble.n	800b372 <__gethex+0x392>
 800b28c:	1b45      	subs	r5, r0, r5
 800b28e:	42ae      	cmp	r6, r5
 800b290:	dc36      	bgt.n	800b300 <__gethex+0x320>
 800b292:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d02a      	beq.n	800b2f0 <__gethex+0x310>
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d02c      	beq.n	800b2f8 <__gethex+0x318>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d11c      	bne.n	800b2dc <__gethex+0x2fc>
 800b2a2:	42ae      	cmp	r6, r5
 800b2a4:	d11a      	bne.n	800b2dc <__gethex+0x2fc>
 800b2a6:	2e01      	cmp	r6, #1
 800b2a8:	d112      	bne.n	800b2d0 <__gethex+0x2f0>
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	f8c9 3000 	str.w	r3, [r9]
 800b2ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2bc:	2762      	movs	r7, #98	; 0x62
 800b2be:	601c      	str	r4, [r3, #0]
 800b2c0:	e723      	b.n	800b10a <__gethex+0x12a>
 800b2c2:	bf00      	nop
 800b2c4:	0800dddc 	.word	0x0800dddc
 800b2c8:	0800dd00 	.word	0x0800dd00
 800b2cc:	0800dd74 	.word	0x0800dd74
 800b2d0:	1e71      	subs	r1, r6, #1
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 feb2 	bl	800c03c <__any_on>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d1e6      	bne.n	800b2aa <__gethex+0x2ca>
 800b2dc:	ee18 0a10 	vmov	r0, s16
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	f000 fa4b 	bl	800b77c <_Bfree>
 800b2e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	2750      	movs	r7, #80	; 0x50
 800b2ee:	e70c      	b.n	800b10a <__gethex+0x12a>
 800b2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f2      	bne.n	800b2dc <__gethex+0x2fc>
 800b2f6:	e7d8      	b.n	800b2aa <__gethex+0x2ca>
 800b2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1d5      	bne.n	800b2aa <__gethex+0x2ca>
 800b2fe:	e7ed      	b.n	800b2dc <__gethex+0x2fc>
 800b300:	1e6f      	subs	r7, r5, #1
 800b302:	f1ba 0f00 	cmp.w	sl, #0
 800b306:	d131      	bne.n	800b36c <__gethex+0x38c>
 800b308:	b127      	cbz	r7, 800b314 <__gethex+0x334>
 800b30a:	4639      	mov	r1, r7
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fe95 	bl	800c03c <__any_on>
 800b312:	4682      	mov	sl, r0
 800b314:	117b      	asrs	r3, r7, #5
 800b316:	2101      	movs	r1, #1
 800b318:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b31c:	f007 071f 	and.w	r7, r7, #31
 800b320:	fa01 f707 	lsl.w	r7, r1, r7
 800b324:	421f      	tst	r7, r3
 800b326:	4629      	mov	r1, r5
 800b328:	4620      	mov	r0, r4
 800b32a:	bf18      	it	ne
 800b32c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b330:	1b76      	subs	r6, r6, r5
 800b332:	f7ff fdee 	bl	800af12 <rshift>
 800b336:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b33a:	2702      	movs	r7, #2
 800b33c:	f1ba 0f00 	cmp.w	sl, #0
 800b340:	d048      	beq.n	800b3d4 <__gethex+0x3f4>
 800b342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d015      	beq.n	800b376 <__gethex+0x396>
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d017      	beq.n	800b37e <__gethex+0x39e>
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d109      	bne.n	800b366 <__gethex+0x386>
 800b352:	f01a 0f02 	tst.w	sl, #2
 800b356:	d006      	beq.n	800b366 <__gethex+0x386>
 800b358:	f8d9 0000 	ldr.w	r0, [r9]
 800b35c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b360:	f01a 0f01 	tst.w	sl, #1
 800b364:	d10e      	bne.n	800b384 <__gethex+0x3a4>
 800b366:	f047 0710 	orr.w	r7, r7, #16
 800b36a:	e033      	b.n	800b3d4 <__gethex+0x3f4>
 800b36c:	f04f 0a01 	mov.w	sl, #1
 800b370:	e7d0      	b.n	800b314 <__gethex+0x334>
 800b372:	2701      	movs	r7, #1
 800b374:	e7e2      	b.n	800b33c <__gethex+0x35c>
 800b376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b378:	f1c3 0301 	rsb	r3, r3, #1
 800b37c:	9315      	str	r3, [sp, #84]	; 0x54
 800b37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f0      	beq.n	800b366 <__gethex+0x386>
 800b384:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b388:	f104 0314 	add.w	r3, r4, #20
 800b38c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b390:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b394:	f04f 0c00 	mov.w	ip, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3a2:	d01c      	beq.n	800b3de <__gethex+0x3fe>
 800b3a4:	3201      	adds	r2, #1
 800b3a6:	6002      	str	r2, [r0, #0]
 800b3a8:	2f02      	cmp	r7, #2
 800b3aa:	f104 0314 	add.w	r3, r4, #20
 800b3ae:	d13f      	bne.n	800b430 <__gethex+0x450>
 800b3b0:	f8d8 2000 	ldr.w	r2, [r8]
 800b3b4:	3a01      	subs	r2, #1
 800b3b6:	42b2      	cmp	r2, r6
 800b3b8:	d10a      	bne.n	800b3d0 <__gethex+0x3f0>
 800b3ba:	1171      	asrs	r1, r6, #5
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3c2:	f006 061f 	and.w	r6, r6, #31
 800b3c6:	fa02 f606 	lsl.w	r6, r2, r6
 800b3ca:	421e      	tst	r6, r3
 800b3cc:	bf18      	it	ne
 800b3ce:	4617      	movne	r7, r2
 800b3d0:	f047 0720 	orr.w	r7, r7, #32
 800b3d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3d6:	601c      	str	r4, [r3, #0]
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	601d      	str	r5, [r3, #0]
 800b3dc:	e695      	b.n	800b10a <__gethex+0x12a>
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3e4:	d8d8      	bhi.n	800b398 <__gethex+0x3b8>
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	459b      	cmp	fp, r3
 800b3ea:	db19      	blt.n	800b420 <__gethex+0x440>
 800b3ec:	6861      	ldr	r1, [r4, #4]
 800b3ee:	ee18 0a10 	vmov	r0, s16
 800b3f2:	3101      	adds	r1, #1
 800b3f4:	f000 f982 	bl	800b6fc <_Balloc>
 800b3f8:	4681      	mov	r9, r0
 800b3fa:	b918      	cbnz	r0, 800b404 <__gethex+0x424>
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	; (800b468 <__gethex+0x488>)
 800b3fe:	4602      	mov	r2, r0
 800b400:	2184      	movs	r1, #132	; 0x84
 800b402:	e6a8      	b.n	800b156 <__gethex+0x176>
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	3202      	adds	r2, #2
 800b408:	f104 010c 	add.w	r1, r4, #12
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	300c      	adds	r0, #12
 800b410:	f7fc fe9c 	bl	800814c <memcpy>
 800b414:	4621      	mov	r1, r4
 800b416:	ee18 0a10 	vmov	r0, s16
 800b41a:	f000 f9af 	bl	800b77c <_Bfree>
 800b41e:	464c      	mov	r4, r9
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b428:	6122      	str	r2, [r4, #16]
 800b42a:	2201      	movs	r2, #1
 800b42c:	615a      	str	r2, [r3, #20]
 800b42e:	e7bb      	b.n	800b3a8 <__gethex+0x3c8>
 800b430:	6922      	ldr	r2, [r4, #16]
 800b432:	455a      	cmp	r2, fp
 800b434:	dd0b      	ble.n	800b44e <__gethex+0x46e>
 800b436:	2101      	movs	r1, #1
 800b438:	4620      	mov	r0, r4
 800b43a:	f7ff fd6a 	bl	800af12 <rshift>
 800b43e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b442:	3501      	adds	r5, #1
 800b444:	42ab      	cmp	r3, r5
 800b446:	f6ff aed0 	blt.w	800b1ea <__gethex+0x20a>
 800b44a:	2701      	movs	r7, #1
 800b44c:	e7c0      	b.n	800b3d0 <__gethex+0x3f0>
 800b44e:	f016 061f 	ands.w	r6, r6, #31
 800b452:	d0fa      	beq.n	800b44a <__gethex+0x46a>
 800b454:	4453      	add	r3, sl
 800b456:	f1c6 0620 	rsb	r6, r6, #32
 800b45a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b45e:	f000 fa3f 	bl	800b8e0 <__hi0bits>
 800b462:	42b0      	cmp	r0, r6
 800b464:	dbe7      	blt.n	800b436 <__gethex+0x456>
 800b466:	e7f0      	b.n	800b44a <__gethex+0x46a>
 800b468:	0800dd00 	.word	0x0800dd00

0800b46c <L_shift>:
 800b46c:	f1c2 0208 	rsb	r2, r2, #8
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	b570      	push	{r4, r5, r6, lr}
 800b474:	f1c2 0620 	rsb	r6, r2, #32
 800b478:	6843      	ldr	r3, [r0, #4]
 800b47a:	6804      	ldr	r4, [r0, #0]
 800b47c:	fa03 f506 	lsl.w	r5, r3, r6
 800b480:	432c      	orrs	r4, r5
 800b482:	40d3      	lsrs	r3, r2
 800b484:	6004      	str	r4, [r0, #0]
 800b486:	f840 3f04 	str.w	r3, [r0, #4]!
 800b48a:	4288      	cmp	r0, r1
 800b48c:	d3f4      	bcc.n	800b478 <L_shift+0xc>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}

0800b490 <__match>:
 800b490:	b530      	push	{r4, r5, lr}
 800b492:	6803      	ldr	r3, [r0, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b49a:	b914      	cbnz	r4, 800b4a2 <__match+0x12>
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	2001      	movs	r0, #1
 800b4a0:	bd30      	pop	{r4, r5, pc}
 800b4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4aa:	2d19      	cmp	r5, #25
 800b4ac:	bf98      	it	ls
 800b4ae:	3220      	addls	r2, #32
 800b4b0:	42a2      	cmp	r2, r4
 800b4b2:	d0f0      	beq.n	800b496 <__match+0x6>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e7f3      	b.n	800b4a0 <__match+0x10>

0800b4b8 <__hexnan>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	680b      	ldr	r3, [r1, #0]
 800b4be:	115e      	asrs	r6, r3, #5
 800b4c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4c4:	f013 031f 	ands.w	r3, r3, #31
 800b4c8:	b087      	sub	sp, #28
 800b4ca:	bf18      	it	ne
 800b4cc:	3604      	addne	r6, #4
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	1f37      	subs	r7, r6, #4
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	6802      	ldr	r2, [r0, #0]
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	4682      	mov	sl, r0
 800b4da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4de:	46b9      	mov	r9, r7
 800b4e0:	463c      	mov	r4, r7
 800b4e2:	9502      	str	r5, [sp, #8]
 800b4e4:	46ab      	mov	fp, r5
 800b4e6:	7851      	ldrb	r1, [r2, #1]
 800b4e8:	1c53      	adds	r3, r2, #1
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	b341      	cbz	r1, 800b540 <__hexnan+0x88>
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	9205      	str	r2, [sp, #20]
 800b4f2:	9104      	str	r1, [sp, #16]
 800b4f4:	f7ff fd5f 	bl	800afb6 <__hexdig_fun>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d14f      	bne.n	800b59c <__hexnan+0xe4>
 800b4fc:	9904      	ldr	r1, [sp, #16]
 800b4fe:	9a05      	ldr	r2, [sp, #20]
 800b500:	2920      	cmp	r1, #32
 800b502:	d818      	bhi.n	800b536 <__hexnan+0x7e>
 800b504:	9b02      	ldr	r3, [sp, #8]
 800b506:	459b      	cmp	fp, r3
 800b508:	dd13      	ble.n	800b532 <__hexnan+0x7a>
 800b50a:	454c      	cmp	r4, r9
 800b50c:	d206      	bcs.n	800b51c <__hexnan+0x64>
 800b50e:	2d07      	cmp	r5, #7
 800b510:	dc04      	bgt.n	800b51c <__hexnan+0x64>
 800b512:	462a      	mov	r2, r5
 800b514:	4649      	mov	r1, r9
 800b516:	4620      	mov	r0, r4
 800b518:	f7ff ffa8 	bl	800b46c <L_shift>
 800b51c:	4544      	cmp	r4, r8
 800b51e:	d950      	bls.n	800b5c2 <__hexnan+0x10a>
 800b520:	2300      	movs	r3, #0
 800b522:	f1a4 0904 	sub.w	r9, r4, #4
 800b526:	f844 3c04 	str.w	r3, [r4, #-4]
 800b52a:	f8cd b008 	str.w	fp, [sp, #8]
 800b52e:	464c      	mov	r4, r9
 800b530:	461d      	mov	r5, r3
 800b532:	9a03      	ldr	r2, [sp, #12]
 800b534:	e7d7      	b.n	800b4e6 <__hexnan+0x2e>
 800b536:	2929      	cmp	r1, #41	; 0x29
 800b538:	d156      	bne.n	800b5e8 <__hexnan+0x130>
 800b53a:	3202      	adds	r2, #2
 800b53c:	f8ca 2000 	str.w	r2, [sl]
 800b540:	f1bb 0f00 	cmp.w	fp, #0
 800b544:	d050      	beq.n	800b5e8 <__hexnan+0x130>
 800b546:	454c      	cmp	r4, r9
 800b548:	d206      	bcs.n	800b558 <__hexnan+0xa0>
 800b54a:	2d07      	cmp	r5, #7
 800b54c:	dc04      	bgt.n	800b558 <__hexnan+0xa0>
 800b54e:	462a      	mov	r2, r5
 800b550:	4649      	mov	r1, r9
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff ff8a 	bl	800b46c <L_shift>
 800b558:	4544      	cmp	r4, r8
 800b55a:	d934      	bls.n	800b5c6 <__hexnan+0x10e>
 800b55c:	f1a8 0204 	sub.w	r2, r8, #4
 800b560:	4623      	mov	r3, r4
 800b562:	f853 1b04 	ldr.w	r1, [r3], #4
 800b566:	f842 1f04 	str.w	r1, [r2, #4]!
 800b56a:	429f      	cmp	r7, r3
 800b56c:	d2f9      	bcs.n	800b562 <__hexnan+0xaa>
 800b56e:	1b3b      	subs	r3, r7, r4
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	3304      	adds	r3, #4
 800b576:	3401      	adds	r4, #1
 800b578:	3e03      	subs	r6, #3
 800b57a:	42b4      	cmp	r4, r6
 800b57c:	bf88      	it	hi
 800b57e:	2304      	movhi	r3, #4
 800b580:	4443      	add	r3, r8
 800b582:	2200      	movs	r2, #0
 800b584:	f843 2b04 	str.w	r2, [r3], #4
 800b588:	429f      	cmp	r7, r3
 800b58a:	d2fb      	bcs.n	800b584 <__hexnan+0xcc>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	b91b      	cbnz	r3, 800b598 <__hexnan+0xe0>
 800b590:	4547      	cmp	r7, r8
 800b592:	d127      	bne.n	800b5e4 <__hexnan+0x12c>
 800b594:	2301      	movs	r3, #1
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	2005      	movs	r0, #5
 800b59a:	e026      	b.n	800b5ea <__hexnan+0x132>
 800b59c:	3501      	adds	r5, #1
 800b59e:	2d08      	cmp	r5, #8
 800b5a0:	f10b 0b01 	add.w	fp, fp, #1
 800b5a4:	dd06      	ble.n	800b5b4 <__hexnan+0xfc>
 800b5a6:	4544      	cmp	r4, r8
 800b5a8:	d9c3      	bls.n	800b532 <__hexnan+0x7a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5b0:	2501      	movs	r5, #1
 800b5b2:	3c04      	subs	r4, #4
 800b5b4:	6822      	ldr	r2, [r4, #0]
 800b5b6:	f000 000f 	and.w	r0, r0, #15
 800b5ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	e7b7      	b.n	800b532 <__hexnan+0x7a>
 800b5c2:	2508      	movs	r5, #8
 800b5c4:	e7b5      	b.n	800b532 <__hexnan+0x7a>
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0df      	beq.n	800b58c <__hexnan+0xd4>
 800b5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d0:	f1c3 0320 	rsb	r3, r3, #32
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5dc:	401a      	ands	r2, r3
 800b5de:	f846 2c04 	str.w	r2, [r6, #-4]
 800b5e2:	e7d3      	b.n	800b58c <__hexnan+0xd4>
 800b5e4:	3f04      	subs	r7, #4
 800b5e6:	e7d1      	b.n	800b58c <__hexnan+0xd4>
 800b5e8:	2004      	movs	r0, #4
 800b5ea:	b007      	add	sp, #28
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5f0 <_localeconv_r>:
 800b5f0:	4800      	ldr	r0, [pc, #0]	; (800b5f4 <_localeconv_r+0x4>)
 800b5f2:	4770      	bx	lr
 800b5f4:	20000168 	.word	0x20000168

0800b5f8 <__retarget_lock_init_recursive>:
 800b5f8:	4770      	bx	lr

0800b5fa <__retarget_lock_acquire_recursive>:
 800b5fa:	4770      	bx	lr

0800b5fc <__retarget_lock_release_recursive>:
 800b5fc:	4770      	bx	lr

0800b5fe <__swhatbuf_r>:
 800b5fe:	b570      	push	{r4, r5, r6, lr}
 800b600:	460e      	mov	r6, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	2900      	cmp	r1, #0
 800b608:	b096      	sub	sp, #88	; 0x58
 800b60a:	4614      	mov	r4, r2
 800b60c:	461d      	mov	r5, r3
 800b60e:	da08      	bge.n	800b622 <__swhatbuf_r+0x24>
 800b610:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	602a      	str	r2, [r5, #0]
 800b618:	061a      	lsls	r2, r3, #24
 800b61a:	d410      	bmi.n	800b63e <__swhatbuf_r+0x40>
 800b61c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b620:	e00e      	b.n	800b640 <__swhatbuf_r+0x42>
 800b622:	466a      	mov	r2, sp
 800b624:	f001 f9a6 	bl	800c974 <_fstat_r>
 800b628:	2800      	cmp	r0, #0
 800b62a:	dbf1      	blt.n	800b610 <__swhatbuf_r+0x12>
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b636:	425a      	negs	r2, r3
 800b638:	415a      	adcs	r2, r3
 800b63a:	602a      	str	r2, [r5, #0]
 800b63c:	e7ee      	b.n	800b61c <__swhatbuf_r+0x1e>
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	2000      	movs	r0, #0
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	b016      	add	sp, #88	; 0x58
 800b646:	bd70      	pop	{r4, r5, r6, pc}

0800b648 <__smakebuf_r>:
 800b648:	898b      	ldrh	r3, [r1, #12]
 800b64a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b64c:	079d      	lsls	r5, r3, #30
 800b64e:	4606      	mov	r6, r0
 800b650:	460c      	mov	r4, r1
 800b652:	d507      	bpl.n	800b664 <__smakebuf_r+0x1c>
 800b654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	2301      	movs	r3, #1
 800b65e:	6163      	str	r3, [r4, #20]
 800b660:	b002      	add	sp, #8
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	ab01      	add	r3, sp, #4
 800b666:	466a      	mov	r2, sp
 800b668:	f7ff ffc9 	bl	800b5fe <__swhatbuf_r>
 800b66c:	9900      	ldr	r1, [sp, #0]
 800b66e:	4605      	mov	r5, r0
 800b670:	4630      	mov	r0, r6
 800b672:	f000 fd87 	bl	800c184 <_malloc_r>
 800b676:	b948      	cbnz	r0, 800b68c <__smakebuf_r+0x44>
 800b678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67c:	059a      	lsls	r2, r3, #22
 800b67e:	d4ef      	bmi.n	800b660 <__smakebuf_r+0x18>
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	f043 0302 	orr.w	r3, r3, #2
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	e7e3      	b.n	800b654 <__smakebuf_r+0xc>
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <__smakebuf_r+0x7c>)
 800b68e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	6020      	str	r0, [r4, #0]
 800b694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	6163      	str	r3, [r4, #20]
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	6120      	str	r0, [r4, #16]
 800b6a2:	b15b      	cbz	r3, 800b6bc <__smakebuf_r+0x74>
 800b6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f001 f975 	bl	800c998 <_isatty_r>
 800b6ae:	b128      	cbz	r0, 800b6bc <__smakebuf_r+0x74>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	f043 0301 	orr.w	r3, r3, #1
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	89a0      	ldrh	r0, [r4, #12]
 800b6be:	4305      	orrs	r5, r0
 800b6c0:	81a5      	strh	r5, [r4, #12]
 800b6c2:	e7cd      	b.n	800b660 <__smakebuf_r+0x18>
 800b6c4:	0800ad71 	.word	0x0800ad71

0800b6c8 <malloc>:
 800b6c8:	4b02      	ldr	r3, [pc, #8]	; (800b6d4 <malloc+0xc>)
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f000 bd59 	b.w	800c184 <_malloc_r>
 800b6d2:	bf00      	nop
 800b6d4:	20000010 	.word	0x20000010

0800b6d8 <__ascii_mbtowc>:
 800b6d8:	b082      	sub	sp, #8
 800b6da:	b901      	cbnz	r1, 800b6de <__ascii_mbtowc+0x6>
 800b6dc:	a901      	add	r1, sp, #4
 800b6de:	b142      	cbz	r2, 800b6f2 <__ascii_mbtowc+0x1a>
 800b6e0:	b14b      	cbz	r3, 800b6f6 <__ascii_mbtowc+0x1e>
 800b6e2:	7813      	ldrb	r3, [r2, #0]
 800b6e4:	600b      	str	r3, [r1, #0]
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	1e10      	subs	r0, r2, #0
 800b6ea:	bf18      	it	ne
 800b6ec:	2001      	movne	r0, #1
 800b6ee:	b002      	add	sp, #8
 800b6f0:	4770      	bx	lr
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	e7fb      	b.n	800b6ee <__ascii_mbtowc+0x16>
 800b6f6:	f06f 0001 	mvn.w	r0, #1
 800b6fa:	e7f8      	b.n	800b6ee <__ascii_mbtowc+0x16>

0800b6fc <_Balloc>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	b976      	cbnz	r6, 800b724 <_Balloc+0x28>
 800b706:	2010      	movs	r0, #16
 800b708:	f7ff ffde 	bl	800b6c8 <malloc>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6260      	str	r0, [r4, #36]	; 0x24
 800b710:	b920      	cbnz	r0, 800b71c <_Balloc+0x20>
 800b712:	4b18      	ldr	r3, [pc, #96]	; (800b774 <_Balloc+0x78>)
 800b714:	4818      	ldr	r0, [pc, #96]	; (800b778 <_Balloc+0x7c>)
 800b716:	2166      	movs	r1, #102	; 0x66
 800b718:	f001 f8ec 	bl	800c8f4 <__assert_func>
 800b71c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b720:	6006      	str	r6, [r0, #0]
 800b722:	60c6      	str	r6, [r0, #12]
 800b724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b726:	68f3      	ldr	r3, [r6, #12]
 800b728:	b183      	cbz	r3, 800b74c <_Balloc+0x50>
 800b72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b732:	b9b8      	cbnz	r0, 800b764 <_Balloc+0x68>
 800b734:	2101      	movs	r1, #1
 800b736:	fa01 f605 	lsl.w	r6, r1, r5
 800b73a:	1d72      	adds	r2, r6, #5
 800b73c:	0092      	lsls	r2, r2, #2
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 fc9d 	bl	800c07e <_calloc_r>
 800b744:	b160      	cbz	r0, 800b760 <_Balloc+0x64>
 800b746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b74a:	e00e      	b.n	800b76a <_Balloc+0x6e>
 800b74c:	2221      	movs	r2, #33	; 0x21
 800b74e:	2104      	movs	r1, #4
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fc94 	bl	800c07e <_calloc_r>
 800b756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b758:	60f0      	str	r0, [r6, #12]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1e4      	bne.n	800b72a <_Balloc+0x2e>
 800b760:	2000      	movs	r0, #0
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	6802      	ldr	r2, [r0, #0]
 800b766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b76a:	2300      	movs	r3, #0
 800b76c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b770:	e7f7      	b.n	800b762 <_Balloc+0x66>
 800b772:	bf00      	nop
 800b774:	0800dc8e 	.word	0x0800dc8e
 800b778:	0800ddf0 	.word	0x0800ddf0

0800b77c <_Bfree>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b780:	4605      	mov	r5, r0
 800b782:	460c      	mov	r4, r1
 800b784:	b976      	cbnz	r6, 800b7a4 <_Bfree+0x28>
 800b786:	2010      	movs	r0, #16
 800b788:	f7ff ff9e 	bl	800b6c8 <malloc>
 800b78c:	4602      	mov	r2, r0
 800b78e:	6268      	str	r0, [r5, #36]	; 0x24
 800b790:	b920      	cbnz	r0, 800b79c <_Bfree+0x20>
 800b792:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <_Bfree+0x3c>)
 800b794:	4809      	ldr	r0, [pc, #36]	; (800b7bc <_Bfree+0x40>)
 800b796:	218a      	movs	r1, #138	; 0x8a
 800b798:	f001 f8ac 	bl	800c8f4 <__assert_func>
 800b79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a0:	6006      	str	r6, [r0, #0]
 800b7a2:	60c6      	str	r6, [r0, #12]
 800b7a4:	b13c      	cbz	r4, 800b7b6 <_Bfree+0x3a>
 800b7a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7a8:	6862      	ldr	r2, [r4, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7b0:	6021      	str	r1, [r4, #0]
 800b7b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	0800dc8e 	.word	0x0800dc8e
 800b7bc:	0800ddf0 	.word	0x0800ddf0

0800b7c0 <__multadd>:
 800b7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c4:	690d      	ldr	r5, [r1, #16]
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	461e      	mov	r6, r3
 800b7cc:	f101 0c14 	add.w	ip, r1, #20
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b7d6:	b299      	uxth	r1, r3
 800b7d8:	fb02 6101 	mla	r1, r2, r1, r6
 800b7dc:	0c1e      	lsrs	r6, r3, #16
 800b7de:	0c0b      	lsrs	r3, r1, #16
 800b7e0:	fb02 3306 	mla	r3, r2, r6, r3
 800b7e4:	b289      	uxth	r1, r1
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7ec:	4285      	cmp	r5, r0
 800b7ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b7f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7f6:	dcec      	bgt.n	800b7d2 <__multadd+0x12>
 800b7f8:	b30e      	cbz	r6, 800b83e <__multadd+0x7e>
 800b7fa:	68a3      	ldr	r3, [r4, #8]
 800b7fc:	42ab      	cmp	r3, r5
 800b7fe:	dc19      	bgt.n	800b834 <__multadd+0x74>
 800b800:	6861      	ldr	r1, [r4, #4]
 800b802:	4638      	mov	r0, r7
 800b804:	3101      	adds	r1, #1
 800b806:	f7ff ff79 	bl	800b6fc <_Balloc>
 800b80a:	4680      	mov	r8, r0
 800b80c:	b928      	cbnz	r0, 800b81a <__multadd+0x5a>
 800b80e:	4602      	mov	r2, r0
 800b810:	4b0c      	ldr	r3, [pc, #48]	; (800b844 <__multadd+0x84>)
 800b812:	480d      	ldr	r0, [pc, #52]	; (800b848 <__multadd+0x88>)
 800b814:	21b5      	movs	r1, #181	; 0xb5
 800b816:	f001 f86d 	bl	800c8f4 <__assert_func>
 800b81a:	6922      	ldr	r2, [r4, #16]
 800b81c:	3202      	adds	r2, #2
 800b81e:	f104 010c 	add.w	r1, r4, #12
 800b822:	0092      	lsls	r2, r2, #2
 800b824:	300c      	adds	r0, #12
 800b826:	f7fc fc91 	bl	800814c <memcpy>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4638      	mov	r0, r7
 800b82e:	f7ff ffa5 	bl	800b77c <_Bfree>
 800b832:	4644      	mov	r4, r8
 800b834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b838:	3501      	adds	r5, #1
 800b83a:	615e      	str	r6, [r3, #20]
 800b83c:	6125      	str	r5, [r4, #16]
 800b83e:	4620      	mov	r0, r4
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	0800dd00 	.word	0x0800dd00
 800b848:	0800ddf0 	.word	0x0800ddf0

0800b84c <__s2b>:
 800b84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b850:	460c      	mov	r4, r1
 800b852:	4615      	mov	r5, r2
 800b854:	461f      	mov	r7, r3
 800b856:	2209      	movs	r2, #9
 800b858:	3308      	adds	r3, #8
 800b85a:	4606      	mov	r6, r0
 800b85c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b860:	2100      	movs	r1, #0
 800b862:	2201      	movs	r2, #1
 800b864:	429a      	cmp	r2, r3
 800b866:	db09      	blt.n	800b87c <__s2b+0x30>
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff ff47 	bl	800b6fc <_Balloc>
 800b86e:	b940      	cbnz	r0, 800b882 <__s2b+0x36>
 800b870:	4602      	mov	r2, r0
 800b872:	4b19      	ldr	r3, [pc, #100]	; (800b8d8 <__s2b+0x8c>)
 800b874:	4819      	ldr	r0, [pc, #100]	; (800b8dc <__s2b+0x90>)
 800b876:	21ce      	movs	r1, #206	; 0xce
 800b878:	f001 f83c 	bl	800c8f4 <__assert_func>
 800b87c:	0052      	lsls	r2, r2, #1
 800b87e:	3101      	adds	r1, #1
 800b880:	e7f0      	b.n	800b864 <__s2b+0x18>
 800b882:	9b08      	ldr	r3, [sp, #32]
 800b884:	6143      	str	r3, [r0, #20]
 800b886:	2d09      	cmp	r5, #9
 800b888:	f04f 0301 	mov.w	r3, #1
 800b88c:	6103      	str	r3, [r0, #16]
 800b88e:	dd16      	ble.n	800b8be <__s2b+0x72>
 800b890:	f104 0909 	add.w	r9, r4, #9
 800b894:	46c8      	mov	r8, r9
 800b896:	442c      	add	r4, r5
 800b898:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b89c:	4601      	mov	r1, r0
 800b89e:	3b30      	subs	r3, #48	; 0x30
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff ff8c 	bl	800b7c0 <__multadd>
 800b8a8:	45a0      	cmp	r8, r4
 800b8aa:	d1f5      	bne.n	800b898 <__s2b+0x4c>
 800b8ac:	f1a5 0408 	sub.w	r4, r5, #8
 800b8b0:	444c      	add	r4, r9
 800b8b2:	1b2d      	subs	r5, r5, r4
 800b8b4:	1963      	adds	r3, r4, r5
 800b8b6:	42bb      	cmp	r3, r7
 800b8b8:	db04      	blt.n	800b8c4 <__s2b+0x78>
 800b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8be:	340a      	adds	r4, #10
 800b8c0:	2509      	movs	r5, #9
 800b8c2:	e7f6      	b.n	800b8b2 <__s2b+0x66>
 800b8c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	3b30      	subs	r3, #48	; 0x30
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7ff ff76 	bl	800b7c0 <__multadd>
 800b8d4:	e7ee      	b.n	800b8b4 <__s2b+0x68>
 800b8d6:	bf00      	nop
 800b8d8:	0800dd00 	.word	0x0800dd00
 800b8dc:	0800ddf0 	.word	0x0800ddf0

0800b8e0 <__hi0bits>:
 800b8e0:	0c03      	lsrs	r3, r0, #16
 800b8e2:	041b      	lsls	r3, r3, #16
 800b8e4:	b9d3      	cbnz	r3, 800b91c <__hi0bits+0x3c>
 800b8e6:	0400      	lsls	r0, r0, #16
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8ee:	bf04      	itt	eq
 800b8f0:	0200      	lsleq	r0, r0, #8
 800b8f2:	3308      	addeq	r3, #8
 800b8f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8f8:	bf04      	itt	eq
 800b8fa:	0100      	lsleq	r0, r0, #4
 800b8fc:	3304      	addeq	r3, #4
 800b8fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b902:	bf04      	itt	eq
 800b904:	0080      	lsleq	r0, r0, #2
 800b906:	3302      	addeq	r3, #2
 800b908:	2800      	cmp	r0, #0
 800b90a:	db05      	blt.n	800b918 <__hi0bits+0x38>
 800b90c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b910:	f103 0301 	add.w	r3, r3, #1
 800b914:	bf08      	it	eq
 800b916:	2320      	moveq	r3, #32
 800b918:	4618      	mov	r0, r3
 800b91a:	4770      	bx	lr
 800b91c:	2300      	movs	r3, #0
 800b91e:	e7e4      	b.n	800b8ea <__hi0bits+0xa>

0800b920 <__lo0bits>:
 800b920:	6803      	ldr	r3, [r0, #0]
 800b922:	f013 0207 	ands.w	r2, r3, #7
 800b926:	4601      	mov	r1, r0
 800b928:	d00b      	beq.n	800b942 <__lo0bits+0x22>
 800b92a:	07da      	lsls	r2, r3, #31
 800b92c:	d423      	bmi.n	800b976 <__lo0bits+0x56>
 800b92e:	0798      	lsls	r0, r3, #30
 800b930:	bf49      	itett	mi
 800b932:	085b      	lsrmi	r3, r3, #1
 800b934:	089b      	lsrpl	r3, r3, #2
 800b936:	2001      	movmi	r0, #1
 800b938:	600b      	strmi	r3, [r1, #0]
 800b93a:	bf5c      	itt	pl
 800b93c:	600b      	strpl	r3, [r1, #0]
 800b93e:	2002      	movpl	r0, #2
 800b940:	4770      	bx	lr
 800b942:	b298      	uxth	r0, r3
 800b944:	b9a8      	cbnz	r0, 800b972 <__lo0bits+0x52>
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	2010      	movs	r0, #16
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	b90a      	cbnz	r2, 800b952 <__lo0bits+0x32>
 800b94e:	3008      	adds	r0, #8
 800b950:	0a1b      	lsrs	r3, r3, #8
 800b952:	071a      	lsls	r2, r3, #28
 800b954:	bf04      	itt	eq
 800b956:	091b      	lsreq	r3, r3, #4
 800b958:	3004      	addeq	r0, #4
 800b95a:	079a      	lsls	r2, r3, #30
 800b95c:	bf04      	itt	eq
 800b95e:	089b      	lsreq	r3, r3, #2
 800b960:	3002      	addeq	r0, #2
 800b962:	07da      	lsls	r2, r3, #31
 800b964:	d403      	bmi.n	800b96e <__lo0bits+0x4e>
 800b966:	085b      	lsrs	r3, r3, #1
 800b968:	f100 0001 	add.w	r0, r0, #1
 800b96c:	d005      	beq.n	800b97a <__lo0bits+0x5a>
 800b96e:	600b      	str	r3, [r1, #0]
 800b970:	4770      	bx	lr
 800b972:	4610      	mov	r0, r2
 800b974:	e7e9      	b.n	800b94a <__lo0bits+0x2a>
 800b976:	2000      	movs	r0, #0
 800b978:	4770      	bx	lr
 800b97a:	2020      	movs	r0, #32
 800b97c:	4770      	bx	lr
	...

0800b980 <__i2b>:
 800b980:	b510      	push	{r4, lr}
 800b982:	460c      	mov	r4, r1
 800b984:	2101      	movs	r1, #1
 800b986:	f7ff feb9 	bl	800b6fc <_Balloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	b928      	cbnz	r0, 800b99a <__i2b+0x1a>
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <__i2b+0x24>)
 800b990:	4805      	ldr	r0, [pc, #20]	; (800b9a8 <__i2b+0x28>)
 800b992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b996:	f000 ffad 	bl	800c8f4 <__assert_func>
 800b99a:	2301      	movs	r3, #1
 800b99c:	6144      	str	r4, [r0, #20]
 800b99e:	6103      	str	r3, [r0, #16]
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0800dd00 	.word	0x0800dd00
 800b9a8:	0800ddf0 	.word	0x0800ddf0

0800b9ac <__multiply>:
 800b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	4691      	mov	r9, r2
 800b9b2:	690a      	ldr	r2, [r1, #16]
 800b9b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	bfb8      	it	lt
 800b9bc:	460b      	movlt	r3, r1
 800b9be:	460c      	mov	r4, r1
 800b9c0:	bfbc      	itt	lt
 800b9c2:	464c      	movlt	r4, r9
 800b9c4:	4699      	movlt	r9, r3
 800b9c6:	6927      	ldr	r7, [r4, #16]
 800b9c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9cc:	68a3      	ldr	r3, [r4, #8]
 800b9ce:	6861      	ldr	r1, [r4, #4]
 800b9d0:	eb07 060a 	add.w	r6, r7, sl
 800b9d4:	42b3      	cmp	r3, r6
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	bfb8      	it	lt
 800b9da:	3101      	addlt	r1, #1
 800b9dc:	f7ff fe8e 	bl	800b6fc <_Balloc>
 800b9e0:	b930      	cbnz	r0, 800b9f0 <__multiply+0x44>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	4b44      	ldr	r3, [pc, #272]	; (800baf8 <__multiply+0x14c>)
 800b9e6:	4845      	ldr	r0, [pc, #276]	; (800bafc <__multiply+0x150>)
 800b9e8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9ec:	f000 ff82 	bl	800c8f4 <__assert_func>
 800b9f0:	f100 0514 	add.w	r5, r0, #20
 800b9f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9f8:	462b      	mov	r3, r5
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4543      	cmp	r3, r8
 800b9fe:	d321      	bcc.n	800ba44 <__multiply+0x98>
 800ba00:	f104 0314 	add.w	r3, r4, #20
 800ba04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba08:	f109 0314 	add.w	r3, r9, #20
 800ba0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba10:	9202      	str	r2, [sp, #8]
 800ba12:	1b3a      	subs	r2, r7, r4
 800ba14:	3a15      	subs	r2, #21
 800ba16:	f022 0203 	bic.w	r2, r2, #3
 800ba1a:	3204      	adds	r2, #4
 800ba1c:	f104 0115 	add.w	r1, r4, #21
 800ba20:	428f      	cmp	r7, r1
 800ba22:	bf38      	it	cc
 800ba24:	2204      	movcc	r2, #4
 800ba26:	9201      	str	r2, [sp, #4]
 800ba28:	9a02      	ldr	r2, [sp, #8]
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d80c      	bhi.n	800ba4a <__multiply+0x9e>
 800ba30:	2e00      	cmp	r6, #0
 800ba32:	dd03      	ble.n	800ba3c <__multiply+0x90>
 800ba34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d05a      	beq.n	800baf2 <__multiply+0x146>
 800ba3c:	6106      	str	r6, [r0, #16]
 800ba3e:	b005      	add	sp, #20
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	f843 2b04 	str.w	r2, [r3], #4
 800ba48:	e7d8      	b.n	800b9fc <__multiply+0x50>
 800ba4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba4e:	f1ba 0f00 	cmp.w	sl, #0
 800ba52:	d024      	beq.n	800ba9e <__multiply+0xf2>
 800ba54:	f104 0e14 	add.w	lr, r4, #20
 800ba58:	46a9      	mov	r9, r5
 800ba5a:	f04f 0c00 	mov.w	ip, #0
 800ba5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba62:	f8d9 1000 	ldr.w	r1, [r9]
 800ba66:	fa1f fb82 	uxth.w	fp, r2
 800ba6a:	b289      	uxth	r1, r1
 800ba6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba74:	f8d9 2000 	ldr.w	r2, [r9]
 800ba78:	4461      	add	r1, ip
 800ba7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba86:	b289      	uxth	r1, r1
 800ba88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba8c:	4577      	cmp	r7, lr
 800ba8e:	f849 1b04 	str.w	r1, [r9], #4
 800ba92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba96:	d8e2      	bhi.n	800ba5e <__multiply+0xb2>
 800ba98:	9a01      	ldr	r2, [sp, #4]
 800ba9a:	f845 c002 	str.w	ip, [r5, r2]
 800ba9e:	9a03      	ldr	r2, [sp, #12]
 800baa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800baa4:	3304      	adds	r3, #4
 800baa6:	f1b9 0f00 	cmp.w	r9, #0
 800baaa:	d020      	beq.n	800baee <__multiply+0x142>
 800baac:	6829      	ldr	r1, [r5, #0]
 800baae:	f104 0c14 	add.w	ip, r4, #20
 800bab2:	46ae      	mov	lr, r5
 800bab4:	f04f 0a00 	mov.w	sl, #0
 800bab8:	f8bc b000 	ldrh.w	fp, [ip]
 800babc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bac0:	fb09 220b 	mla	r2, r9, fp, r2
 800bac4:	4492      	add	sl, r2
 800bac6:	b289      	uxth	r1, r1
 800bac8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bacc:	f84e 1b04 	str.w	r1, [lr], #4
 800bad0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bad4:	f8be 1000 	ldrh.w	r1, [lr]
 800bad8:	0c12      	lsrs	r2, r2, #16
 800bada:	fb09 1102 	mla	r1, r9, r2, r1
 800bade:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bae2:	4567      	cmp	r7, ip
 800bae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bae8:	d8e6      	bhi.n	800bab8 <__multiply+0x10c>
 800baea:	9a01      	ldr	r2, [sp, #4]
 800baec:	50a9      	str	r1, [r5, r2]
 800baee:	3504      	adds	r5, #4
 800baf0:	e79a      	b.n	800ba28 <__multiply+0x7c>
 800baf2:	3e01      	subs	r6, #1
 800baf4:	e79c      	b.n	800ba30 <__multiply+0x84>
 800baf6:	bf00      	nop
 800baf8:	0800dd00 	.word	0x0800dd00
 800bafc:	0800ddf0 	.word	0x0800ddf0

0800bb00 <__pow5mult>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4615      	mov	r5, r2
 800bb06:	f012 0203 	ands.w	r2, r2, #3
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	d007      	beq.n	800bb20 <__pow5mult+0x20>
 800bb10:	4c25      	ldr	r4, [pc, #148]	; (800bba8 <__pow5mult+0xa8>)
 800bb12:	3a01      	subs	r2, #1
 800bb14:	2300      	movs	r3, #0
 800bb16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb1a:	f7ff fe51 	bl	800b7c0 <__multadd>
 800bb1e:	4607      	mov	r7, r0
 800bb20:	10ad      	asrs	r5, r5, #2
 800bb22:	d03d      	beq.n	800bba0 <__pow5mult+0xa0>
 800bb24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb26:	b97c      	cbnz	r4, 800bb48 <__pow5mult+0x48>
 800bb28:	2010      	movs	r0, #16
 800bb2a:	f7ff fdcd 	bl	800b6c8 <malloc>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	6270      	str	r0, [r6, #36]	; 0x24
 800bb32:	b928      	cbnz	r0, 800bb40 <__pow5mult+0x40>
 800bb34:	4b1d      	ldr	r3, [pc, #116]	; (800bbac <__pow5mult+0xac>)
 800bb36:	481e      	ldr	r0, [pc, #120]	; (800bbb0 <__pow5mult+0xb0>)
 800bb38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb3c:	f000 feda 	bl	800c8f4 <__assert_func>
 800bb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb44:	6004      	str	r4, [r0, #0]
 800bb46:	60c4      	str	r4, [r0, #12]
 800bb48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb50:	b94c      	cbnz	r4, 800bb66 <__pow5mult+0x66>
 800bb52:	f240 2171 	movw	r1, #625	; 0x271
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7ff ff12 	bl	800b980 <__i2b>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb62:	4604      	mov	r4, r0
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	f04f 0900 	mov.w	r9, #0
 800bb6a:	07eb      	lsls	r3, r5, #31
 800bb6c:	d50a      	bpl.n	800bb84 <__pow5mult+0x84>
 800bb6e:	4639      	mov	r1, r7
 800bb70:	4622      	mov	r2, r4
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff ff1a 	bl	800b9ac <__multiply>
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff fdfd 	bl	800b77c <_Bfree>
 800bb82:	4647      	mov	r7, r8
 800bb84:	106d      	asrs	r5, r5, #1
 800bb86:	d00b      	beq.n	800bba0 <__pow5mult+0xa0>
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	b938      	cbnz	r0, 800bb9c <__pow5mult+0x9c>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7ff ff0b 	bl	800b9ac <__multiply>
 800bb96:	6020      	str	r0, [r4, #0]
 800bb98:	f8c0 9000 	str.w	r9, [r0]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	e7e4      	b.n	800bb6a <__pow5mult+0x6a>
 800bba0:	4638      	mov	r0, r7
 800bba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba6:	bf00      	nop
 800bba8:	0800df40 	.word	0x0800df40
 800bbac:	0800dc8e 	.word	0x0800dc8e
 800bbb0:	0800ddf0 	.word	0x0800ddf0

0800bbb4 <__lshift>:
 800bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	6849      	ldr	r1, [r1, #4]
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	4691      	mov	r9, r2
 800bbc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbcc:	f108 0601 	add.w	r6, r8, #1
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	db0b      	blt.n	800bbec <__lshift+0x38>
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff fd91 	bl	800b6fc <_Balloc>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	b948      	cbnz	r0, 800bbf2 <__lshift+0x3e>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b2a      	ldr	r3, [pc, #168]	; (800bc8c <__lshift+0xd8>)
 800bbe2:	482b      	ldr	r0, [pc, #172]	; (800bc90 <__lshift+0xdc>)
 800bbe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbe8:	f000 fe84 	bl	800c8f4 <__assert_func>
 800bbec:	3101      	adds	r1, #1
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__lshift+0x1c>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f100 0114 	add.w	r1, r0, #20
 800bbf8:	f100 0210 	add.w	r2, r0, #16
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	4553      	cmp	r3, sl
 800bc00:	db37      	blt.n	800bc72 <__lshift+0xbe>
 800bc02:	6920      	ldr	r0, [r4, #16]
 800bc04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc08:	f104 0314 	add.w	r3, r4, #20
 800bc0c:	f019 091f 	ands.w	r9, r9, #31
 800bc10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc18:	d02f      	beq.n	800bc7a <__lshift+0xc6>
 800bc1a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc1e:	468a      	mov	sl, r1
 800bc20:	f04f 0c00 	mov.w	ip, #0
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	fa02 f209 	lsl.w	r2, r2, r9
 800bc2a:	ea42 020c 	orr.w	r2, r2, ip
 800bc2e:	f84a 2b04 	str.w	r2, [sl], #4
 800bc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc36:	4298      	cmp	r0, r3
 800bc38:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc3c:	d8f2      	bhi.n	800bc24 <__lshift+0x70>
 800bc3e:	1b03      	subs	r3, r0, r4
 800bc40:	3b15      	subs	r3, #21
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	3304      	adds	r3, #4
 800bc48:	f104 0215 	add.w	r2, r4, #21
 800bc4c:	4290      	cmp	r0, r2
 800bc4e:	bf38      	it	cc
 800bc50:	2304      	movcc	r3, #4
 800bc52:	f841 c003 	str.w	ip, [r1, r3]
 800bc56:	f1bc 0f00 	cmp.w	ip, #0
 800bc5a:	d001      	beq.n	800bc60 <__lshift+0xac>
 800bc5c:	f108 0602 	add.w	r6, r8, #2
 800bc60:	3e01      	subs	r6, #1
 800bc62:	4638      	mov	r0, r7
 800bc64:	612e      	str	r6, [r5, #16]
 800bc66:	4621      	mov	r1, r4
 800bc68:	f7ff fd88 	bl	800b77c <_Bfree>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc76:	3301      	adds	r3, #1
 800bc78:	e7c1      	b.n	800bbfe <__lshift+0x4a>
 800bc7a:	3904      	subs	r1, #4
 800bc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc84:	4298      	cmp	r0, r3
 800bc86:	d8f9      	bhi.n	800bc7c <__lshift+0xc8>
 800bc88:	e7ea      	b.n	800bc60 <__lshift+0xac>
 800bc8a:	bf00      	nop
 800bc8c:	0800dd00 	.word	0x0800dd00
 800bc90:	0800ddf0 	.word	0x0800ddf0

0800bc94 <__mcmp>:
 800bc94:	b530      	push	{r4, r5, lr}
 800bc96:	6902      	ldr	r2, [r0, #16]
 800bc98:	690c      	ldr	r4, [r1, #16]
 800bc9a:	1b12      	subs	r2, r2, r4
 800bc9c:	d10e      	bne.n	800bcbc <__mcmp+0x28>
 800bc9e:	f100 0314 	add.w	r3, r0, #20
 800bca2:	3114      	adds	r1, #20
 800bca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bcac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcb4:	42a5      	cmp	r5, r4
 800bcb6:	d003      	beq.n	800bcc0 <__mcmp+0x2c>
 800bcb8:	d305      	bcc.n	800bcc6 <__mcmp+0x32>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	bd30      	pop	{r4, r5, pc}
 800bcc0:	4283      	cmp	r3, r0
 800bcc2:	d3f3      	bcc.n	800bcac <__mcmp+0x18>
 800bcc4:	e7fa      	b.n	800bcbc <__mcmp+0x28>
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	e7f7      	b.n	800bcbc <__mcmp+0x28>

0800bccc <__mdiff>:
 800bccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4690      	mov	r8, r2
 800bcda:	f7ff ffdb 	bl	800bc94 <__mcmp>
 800bcde:	1e05      	subs	r5, r0, #0
 800bce0:	d110      	bne.n	800bd04 <__mdiff+0x38>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff fd09 	bl	800b6fc <_Balloc>
 800bcea:	b930      	cbnz	r0, 800bcfa <__mdiff+0x2e>
 800bcec:	4b3a      	ldr	r3, [pc, #232]	; (800bdd8 <__mdiff+0x10c>)
 800bcee:	4602      	mov	r2, r0
 800bcf0:	f240 2132 	movw	r1, #562	; 0x232
 800bcf4:	4839      	ldr	r0, [pc, #228]	; (800bddc <__mdiff+0x110>)
 800bcf6:	f000 fdfd 	bl	800c8f4 <__assert_func>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	bfa4      	itt	ge
 800bd06:	4643      	movge	r3, r8
 800bd08:	46a0      	movge	r8, r4
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd10:	bfa6      	itte	ge
 800bd12:	461c      	movge	r4, r3
 800bd14:	2500      	movge	r5, #0
 800bd16:	2501      	movlt	r5, #1
 800bd18:	f7ff fcf0 	bl	800b6fc <_Balloc>
 800bd1c:	b920      	cbnz	r0, 800bd28 <__mdiff+0x5c>
 800bd1e:	4b2e      	ldr	r3, [pc, #184]	; (800bdd8 <__mdiff+0x10c>)
 800bd20:	4602      	mov	r2, r0
 800bd22:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd26:	e7e5      	b.n	800bcf4 <__mdiff+0x28>
 800bd28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd2c:	6926      	ldr	r6, [r4, #16]
 800bd2e:	60c5      	str	r5, [r0, #12]
 800bd30:	f104 0914 	add.w	r9, r4, #20
 800bd34:	f108 0514 	add.w	r5, r8, #20
 800bd38:	f100 0e14 	add.w	lr, r0, #20
 800bd3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd44:	f108 0210 	add.w	r2, r8, #16
 800bd48:	46f2      	mov	sl, lr
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd54:	fa1f f883 	uxth.w	r8, r3
 800bd58:	fa11 f18b 	uxtah	r1, r1, fp
 800bd5c:	0c1b      	lsrs	r3, r3, #16
 800bd5e:	eba1 0808 	sub.w	r8, r1, r8
 800bd62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd6a:	fa1f f888 	uxth.w	r8, r8
 800bd6e:	1419      	asrs	r1, r3, #16
 800bd70:	454e      	cmp	r6, r9
 800bd72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd76:	f84a 3b04 	str.w	r3, [sl], #4
 800bd7a:	d8e7      	bhi.n	800bd4c <__mdiff+0x80>
 800bd7c:	1b33      	subs	r3, r6, r4
 800bd7e:	3b15      	subs	r3, #21
 800bd80:	f023 0303 	bic.w	r3, r3, #3
 800bd84:	3304      	adds	r3, #4
 800bd86:	3415      	adds	r4, #21
 800bd88:	42a6      	cmp	r6, r4
 800bd8a:	bf38      	it	cc
 800bd8c:	2304      	movcc	r3, #4
 800bd8e:	441d      	add	r5, r3
 800bd90:	4473      	add	r3, lr
 800bd92:	469e      	mov	lr, r3
 800bd94:	462e      	mov	r6, r5
 800bd96:	4566      	cmp	r6, ip
 800bd98:	d30e      	bcc.n	800bdb8 <__mdiff+0xec>
 800bd9a:	f10c 0203 	add.w	r2, ip, #3
 800bd9e:	1b52      	subs	r2, r2, r5
 800bda0:	f022 0203 	bic.w	r2, r2, #3
 800bda4:	3d03      	subs	r5, #3
 800bda6:	45ac      	cmp	ip, r5
 800bda8:	bf38      	it	cc
 800bdaa:	2200      	movcc	r2, #0
 800bdac:	441a      	add	r2, r3
 800bdae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bdb2:	b17b      	cbz	r3, 800bdd4 <__mdiff+0x108>
 800bdb4:	6107      	str	r7, [r0, #16]
 800bdb6:	e7a3      	b.n	800bd00 <__mdiff+0x34>
 800bdb8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdbc:	fa11 f288 	uxtah	r2, r1, r8
 800bdc0:	1414      	asrs	r4, r2, #16
 800bdc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdc6:	b292      	uxth	r2, r2
 800bdc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdcc:	f84e 2b04 	str.w	r2, [lr], #4
 800bdd0:	1421      	asrs	r1, r4, #16
 800bdd2:	e7e0      	b.n	800bd96 <__mdiff+0xca>
 800bdd4:	3f01      	subs	r7, #1
 800bdd6:	e7ea      	b.n	800bdae <__mdiff+0xe2>
 800bdd8:	0800dd00 	.word	0x0800dd00
 800bddc:	0800ddf0 	.word	0x0800ddf0

0800bde0 <__ulp>:
 800bde0:	b082      	sub	sp, #8
 800bde2:	ed8d 0b00 	vstr	d0, [sp]
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	4912      	ldr	r1, [pc, #72]	; (800be34 <__ulp+0x54>)
 800bdea:	4019      	ands	r1, r3
 800bdec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	dd05      	ble.n	800be00 <__ulp+0x20>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	ec43 2b10 	vmov	d0, r2, r3
 800bdfc:	b002      	add	sp, #8
 800bdfe:	4770      	bx	lr
 800be00:	4249      	negs	r1, r1
 800be02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be06:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be0a:	f04f 0200 	mov.w	r2, #0
 800be0e:	f04f 0300 	mov.w	r3, #0
 800be12:	da04      	bge.n	800be1e <__ulp+0x3e>
 800be14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be18:	fa41 f300 	asr.w	r3, r1, r0
 800be1c:	e7ec      	b.n	800bdf8 <__ulp+0x18>
 800be1e:	f1a0 0114 	sub.w	r1, r0, #20
 800be22:	291e      	cmp	r1, #30
 800be24:	bfda      	itte	le
 800be26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be2a:	fa20 f101 	lsrle.w	r1, r0, r1
 800be2e:	2101      	movgt	r1, #1
 800be30:	460a      	mov	r2, r1
 800be32:	e7e1      	b.n	800bdf8 <__ulp+0x18>
 800be34:	7ff00000 	.word	0x7ff00000

0800be38 <__b2d>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	6905      	ldr	r5, [r0, #16]
 800be3c:	f100 0714 	add.w	r7, r0, #20
 800be40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be44:	1f2e      	subs	r6, r5, #4
 800be46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be4a:	4620      	mov	r0, r4
 800be4c:	f7ff fd48 	bl	800b8e0 <__hi0bits>
 800be50:	f1c0 0320 	rsb	r3, r0, #32
 800be54:	280a      	cmp	r0, #10
 800be56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bed4 <__b2d+0x9c>
 800be5a:	600b      	str	r3, [r1, #0]
 800be5c:	dc14      	bgt.n	800be88 <__b2d+0x50>
 800be5e:	f1c0 0e0b 	rsb	lr, r0, #11
 800be62:	fa24 f10e 	lsr.w	r1, r4, lr
 800be66:	42b7      	cmp	r7, r6
 800be68:	ea41 030c 	orr.w	r3, r1, ip
 800be6c:	bf34      	ite	cc
 800be6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be72:	2100      	movcs	r1, #0
 800be74:	3015      	adds	r0, #21
 800be76:	fa04 f000 	lsl.w	r0, r4, r0
 800be7a:	fa21 f10e 	lsr.w	r1, r1, lr
 800be7e:	ea40 0201 	orr.w	r2, r0, r1
 800be82:	ec43 2b10 	vmov	d0, r2, r3
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	42b7      	cmp	r7, r6
 800be8a:	bf3a      	itte	cc
 800be8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be90:	f1a5 0608 	subcc.w	r6, r5, #8
 800be94:	2100      	movcs	r1, #0
 800be96:	380b      	subs	r0, #11
 800be98:	d017      	beq.n	800beca <__b2d+0x92>
 800be9a:	f1c0 0c20 	rsb	ip, r0, #32
 800be9e:	fa04 f500 	lsl.w	r5, r4, r0
 800bea2:	42be      	cmp	r6, r7
 800bea4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bea8:	ea45 0504 	orr.w	r5, r5, r4
 800beac:	bf8c      	ite	hi
 800beae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800beb2:	2400      	movls	r4, #0
 800beb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800beb8:	fa01 f000 	lsl.w	r0, r1, r0
 800bebc:	fa24 f40c 	lsr.w	r4, r4, ip
 800bec0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bec4:	ea40 0204 	orr.w	r2, r0, r4
 800bec8:	e7db      	b.n	800be82 <__b2d+0x4a>
 800beca:	ea44 030c 	orr.w	r3, r4, ip
 800bece:	460a      	mov	r2, r1
 800bed0:	e7d7      	b.n	800be82 <__b2d+0x4a>
 800bed2:	bf00      	nop
 800bed4:	3ff00000 	.word	0x3ff00000

0800bed8 <__d2b>:
 800bed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	4689      	mov	r9, r1
 800bede:	2101      	movs	r1, #1
 800bee0:	ec57 6b10 	vmov	r6, r7, d0
 800bee4:	4690      	mov	r8, r2
 800bee6:	f7ff fc09 	bl	800b6fc <_Balloc>
 800beea:	4604      	mov	r4, r0
 800beec:	b930      	cbnz	r0, 800befc <__d2b+0x24>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b25      	ldr	r3, [pc, #148]	; (800bf88 <__d2b+0xb0>)
 800bef2:	4826      	ldr	r0, [pc, #152]	; (800bf8c <__d2b+0xb4>)
 800bef4:	f240 310a 	movw	r1, #778	; 0x30a
 800bef8:	f000 fcfc 	bl	800c8f4 <__assert_func>
 800befc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf04:	bb35      	cbnz	r5, 800bf54 <__d2b+0x7c>
 800bf06:	2e00      	cmp	r6, #0
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	d028      	beq.n	800bf5e <__d2b+0x86>
 800bf0c:	4668      	mov	r0, sp
 800bf0e:	9600      	str	r6, [sp, #0]
 800bf10:	f7ff fd06 	bl	800b920 <__lo0bits>
 800bf14:	9900      	ldr	r1, [sp, #0]
 800bf16:	b300      	cbz	r0, 800bf5a <__d2b+0x82>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	f1c0 0320 	rsb	r3, r0, #32
 800bf1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf22:	430b      	orrs	r3, r1
 800bf24:	40c2      	lsrs	r2, r0
 800bf26:	6163      	str	r3, [r4, #20]
 800bf28:	9201      	str	r2, [sp, #4]
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	61a3      	str	r3, [r4, #24]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bf14      	ite	ne
 800bf32:	2202      	movne	r2, #2
 800bf34:	2201      	moveq	r2, #1
 800bf36:	6122      	str	r2, [r4, #16]
 800bf38:	b1d5      	cbz	r5, 800bf70 <__d2b+0x98>
 800bf3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf3e:	4405      	add	r5, r0
 800bf40:	f8c9 5000 	str.w	r5, [r9]
 800bf44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf48:	f8c8 0000 	str.w	r0, [r8]
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	b003      	add	sp, #12
 800bf50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf58:	e7d5      	b.n	800bf06 <__d2b+0x2e>
 800bf5a:	6161      	str	r1, [r4, #20]
 800bf5c:	e7e5      	b.n	800bf2a <__d2b+0x52>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fcde 	bl	800b920 <__lo0bits>
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	6163      	str	r3, [r4, #20]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	3020      	adds	r0, #32
 800bf6e:	e7e3      	b.n	800bf38 <__d2b+0x60>
 800bf70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf78:	f8c9 0000 	str.w	r0, [r9]
 800bf7c:	6918      	ldr	r0, [r3, #16]
 800bf7e:	f7ff fcaf 	bl	800b8e0 <__hi0bits>
 800bf82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf86:	e7df      	b.n	800bf48 <__d2b+0x70>
 800bf88:	0800dd00 	.word	0x0800dd00
 800bf8c:	0800ddf0 	.word	0x0800ddf0

0800bf90 <__ratio>:
 800bf90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4688      	mov	r8, r1
 800bf96:	4669      	mov	r1, sp
 800bf98:	4681      	mov	r9, r0
 800bf9a:	f7ff ff4d 	bl	800be38 <__b2d>
 800bf9e:	a901      	add	r1, sp, #4
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	ec55 4b10 	vmov	r4, r5, d0
 800bfa6:	f7ff ff47 	bl	800be38 <__b2d>
 800bfaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfb2:	eba3 0c02 	sub.w	ip, r3, r2
 800bfb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfc0:	ec51 0b10 	vmov	r0, r1, d0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfd6      	itet	le
 800bfc8:	460a      	movle	r2, r1
 800bfca:	462a      	movgt	r2, r5
 800bfcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfd0:	468b      	mov	fp, r1
 800bfd2:	462f      	mov	r7, r5
 800bfd4:	bfd4      	ite	le
 800bfd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfde:	4620      	mov	r0, r4
 800bfe0:	ee10 2a10 	vmov	r2, s0
 800bfe4:	465b      	mov	r3, fp
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 fc50 	bl	800088c <__aeabi_ddiv>
 800bfec:	ec41 0b10 	vmov	d0, r0, r1
 800bff0:	b003      	add	sp, #12
 800bff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bff6 <__copybits>:
 800bff6:	3901      	subs	r1, #1
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	1149      	asrs	r1, r1, #5
 800bffc:	6914      	ldr	r4, [r2, #16]
 800bffe:	3101      	adds	r1, #1
 800c000:	f102 0314 	add.w	r3, r2, #20
 800c004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c00c:	1f05      	subs	r5, r0, #4
 800c00e:	42a3      	cmp	r3, r4
 800c010:	d30c      	bcc.n	800c02c <__copybits+0x36>
 800c012:	1aa3      	subs	r3, r4, r2
 800c014:	3b11      	subs	r3, #17
 800c016:	f023 0303 	bic.w	r3, r3, #3
 800c01a:	3211      	adds	r2, #17
 800c01c:	42a2      	cmp	r2, r4
 800c01e:	bf88      	it	hi
 800c020:	2300      	movhi	r3, #0
 800c022:	4418      	add	r0, r3
 800c024:	2300      	movs	r3, #0
 800c026:	4288      	cmp	r0, r1
 800c028:	d305      	bcc.n	800c036 <__copybits+0x40>
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c030:	f845 6f04 	str.w	r6, [r5, #4]!
 800c034:	e7eb      	b.n	800c00e <__copybits+0x18>
 800c036:	f840 3b04 	str.w	r3, [r0], #4
 800c03a:	e7f4      	b.n	800c026 <__copybits+0x30>

0800c03c <__any_on>:
 800c03c:	f100 0214 	add.w	r2, r0, #20
 800c040:	6900      	ldr	r0, [r0, #16]
 800c042:	114b      	asrs	r3, r1, #5
 800c044:	4298      	cmp	r0, r3
 800c046:	b510      	push	{r4, lr}
 800c048:	db11      	blt.n	800c06e <__any_on+0x32>
 800c04a:	dd0a      	ble.n	800c062 <__any_on+0x26>
 800c04c:	f011 011f 	ands.w	r1, r1, #31
 800c050:	d007      	beq.n	800c062 <__any_on+0x26>
 800c052:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c056:	fa24 f001 	lsr.w	r0, r4, r1
 800c05a:	fa00 f101 	lsl.w	r1, r0, r1
 800c05e:	428c      	cmp	r4, r1
 800c060:	d10b      	bne.n	800c07a <__any_on+0x3e>
 800c062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c066:	4293      	cmp	r3, r2
 800c068:	d803      	bhi.n	800c072 <__any_on+0x36>
 800c06a:	2000      	movs	r0, #0
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	4603      	mov	r3, r0
 800c070:	e7f7      	b.n	800c062 <__any_on+0x26>
 800c072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c076:	2900      	cmp	r1, #0
 800c078:	d0f5      	beq.n	800c066 <__any_on+0x2a>
 800c07a:	2001      	movs	r0, #1
 800c07c:	e7f6      	b.n	800c06c <__any_on+0x30>

0800c07e <_calloc_r>:
 800c07e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c080:	fba1 2402 	umull	r2, r4, r1, r2
 800c084:	b94c      	cbnz	r4, 800c09a <_calloc_r+0x1c>
 800c086:	4611      	mov	r1, r2
 800c088:	9201      	str	r2, [sp, #4]
 800c08a:	f000 f87b 	bl	800c184 <_malloc_r>
 800c08e:	9a01      	ldr	r2, [sp, #4]
 800c090:	4605      	mov	r5, r0
 800c092:	b930      	cbnz	r0, 800c0a2 <_calloc_r+0x24>
 800c094:	4628      	mov	r0, r5
 800c096:	b003      	add	sp, #12
 800c098:	bd30      	pop	{r4, r5, pc}
 800c09a:	220c      	movs	r2, #12
 800c09c:	6002      	str	r2, [r0, #0]
 800c09e:	2500      	movs	r5, #0
 800c0a0:	e7f8      	b.n	800c094 <_calloc_r+0x16>
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	f7fc f860 	bl	8008168 <memset>
 800c0a8:	e7f4      	b.n	800c094 <_calloc_r+0x16>
	...

0800c0ac <_free_r>:
 800c0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	d044      	beq.n	800c13c <_free_r+0x90>
 800c0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b6:	9001      	str	r0, [sp, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c0be:	bfb8      	it	lt
 800c0c0:	18e4      	addlt	r4, r4, r3
 800c0c2:	f000 fca5 	bl	800ca10 <__malloc_lock>
 800c0c6:	4a1e      	ldr	r2, [pc, #120]	; (800c140 <_free_r+0x94>)
 800c0c8:	9801      	ldr	r0, [sp, #4]
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	b933      	cbnz	r3, 800c0dc <_free_r+0x30>
 800c0ce:	6063      	str	r3, [r4, #4]
 800c0d0:	6014      	str	r4, [r2, #0]
 800c0d2:	b003      	add	sp, #12
 800c0d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0d8:	f000 bca0 	b.w	800ca1c <__malloc_unlock>
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	d908      	bls.n	800c0f2 <_free_r+0x46>
 800c0e0:	6825      	ldr	r5, [r4, #0]
 800c0e2:	1961      	adds	r1, r4, r5
 800c0e4:	428b      	cmp	r3, r1
 800c0e6:	bf01      	itttt	eq
 800c0e8:	6819      	ldreq	r1, [r3, #0]
 800c0ea:	685b      	ldreq	r3, [r3, #4]
 800c0ec:	1949      	addeq	r1, r1, r5
 800c0ee:	6021      	streq	r1, [r4, #0]
 800c0f0:	e7ed      	b.n	800c0ce <_free_r+0x22>
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	b10b      	cbz	r3, 800c0fc <_free_r+0x50>
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	d9fa      	bls.n	800c0f2 <_free_r+0x46>
 800c0fc:	6811      	ldr	r1, [r2, #0]
 800c0fe:	1855      	adds	r5, r2, r1
 800c100:	42a5      	cmp	r5, r4
 800c102:	d10b      	bne.n	800c11c <_free_r+0x70>
 800c104:	6824      	ldr	r4, [r4, #0]
 800c106:	4421      	add	r1, r4
 800c108:	1854      	adds	r4, r2, r1
 800c10a:	42a3      	cmp	r3, r4
 800c10c:	6011      	str	r1, [r2, #0]
 800c10e:	d1e0      	bne.n	800c0d2 <_free_r+0x26>
 800c110:	681c      	ldr	r4, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	6053      	str	r3, [r2, #4]
 800c116:	4421      	add	r1, r4
 800c118:	6011      	str	r1, [r2, #0]
 800c11a:	e7da      	b.n	800c0d2 <_free_r+0x26>
 800c11c:	d902      	bls.n	800c124 <_free_r+0x78>
 800c11e:	230c      	movs	r3, #12
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	e7d6      	b.n	800c0d2 <_free_r+0x26>
 800c124:	6825      	ldr	r5, [r4, #0]
 800c126:	1961      	adds	r1, r4, r5
 800c128:	428b      	cmp	r3, r1
 800c12a:	bf04      	itt	eq
 800c12c:	6819      	ldreq	r1, [r3, #0]
 800c12e:	685b      	ldreq	r3, [r3, #4]
 800c130:	6063      	str	r3, [r4, #4]
 800c132:	bf04      	itt	eq
 800c134:	1949      	addeq	r1, r1, r5
 800c136:	6021      	streq	r1, [r4, #0]
 800c138:	6054      	str	r4, [r2, #4]
 800c13a:	e7ca      	b.n	800c0d2 <_free_r+0x26>
 800c13c:	b003      	add	sp, #12
 800c13e:	bd30      	pop	{r4, r5, pc}
 800c140:	200027bc 	.word	0x200027bc

0800c144 <sbrk_aligned>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	4e0e      	ldr	r6, [pc, #56]	; (800c180 <sbrk_aligned+0x3c>)
 800c148:	460c      	mov	r4, r1
 800c14a:	6831      	ldr	r1, [r6, #0]
 800c14c:	4605      	mov	r5, r0
 800c14e:	b911      	cbnz	r1, 800c156 <sbrk_aligned+0x12>
 800c150:	f000 fb4a 	bl	800c7e8 <_sbrk_r>
 800c154:	6030      	str	r0, [r6, #0]
 800c156:	4621      	mov	r1, r4
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 fb45 	bl	800c7e8 <_sbrk_r>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	d00a      	beq.n	800c178 <sbrk_aligned+0x34>
 800c162:	1cc4      	adds	r4, r0, #3
 800c164:	f024 0403 	bic.w	r4, r4, #3
 800c168:	42a0      	cmp	r0, r4
 800c16a:	d007      	beq.n	800c17c <sbrk_aligned+0x38>
 800c16c:	1a21      	subs	r1, r4, r0
 800c16e:	4628      	mov	r0, r5
 800c170:	f000 fb3a 	bl	800c7e8 <_sbrk_r>
 800c174:	3001      	adds	r0, #1
 800c176:	d101      	bne.n	800c17c <sbrk_aligned+0x38>
 800c178:	f04f 34ff 	mov.w	r4, #4294967295
 800c17c:	4620      	mov	r0, r4
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	200027c0 	.word	0x200027c0

0800c184 <_malloc_r>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	1ccd      	adds	r5, r1, #3
 800c18a:	f025 0503 	bic.w	r5, r5, #3
 800c18e:	3508      	adds	r5, #8
 800c190:	2d0c      	cmp	r5, #12
 800c192:	bf38      	it	cc
 800c194:	250c      	movcc	r5, #12
 800c196:	2d00      	cmp	r5, #0
 800c198:	4607      	mov	r7, r0
 800c19a:	db01      	blt.n	800c1a0 <_malloc_r+0x1c>
 800c19c:	42a9      	cmp	r1, r5
 800c19e:	d905      	bls.n	800c1ac <_malloc_r+0x28>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ac:	4e2e      	ldr	r6, [pc, #184]	; (800c268 <_malloc_r+0xe4>)
 800c1ae:	f000 fc2f 	bl	800ca10 <__malloc_lock>
 800c1b2:	6833      	ldr	r3, [r6, #0]
 800c1b4:	461c      	mov	r4, r3
 800c1b6:	bb34      	cbnz	r4, 800c206 <_malloc_r+0x82>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	f7ff ffc2 	bl	800c144 <sbrk_aligned>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	d14d      	bne.n	800c262 <_malloc_r+0xde>
 800c1c6:	6834      	ldr	r4, [r6, #0]
 800c1c8:	4626      	mov	r6, r4
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	d140      	bne.n	800c250 <_malloc_r+0xcc>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	eb04 0803 	add.w	r8, r4, r3
 800c1d8:	f000 fb06 	bl	800c7e8 <_sbrk_r>
 800c1dc:	4580      	cmp	r8, r0
 800c1de:	d13a      	bne.n	800c256 <_malloc_r+0xd2>
 800c1e0:	6821      	ldr	r1, [r4, #0]
 800c1e2:	3503      	adds	r5, #3
 800c1e4:	1a6d      	subs	r5, r5, r1
 800c1e6:	f025 0503 	bic.w	r5, r5, #3
 800c1ea:	3508      	adds	r5, #8
 800c1ec:	2d0c      	cmp	r5, #12
 800c1ee:	bf38      	it	cc
 800c1f0:	250c      	movcc	r5, #12
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff ffa5 	bl	800c144 <sbrk_aligned>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d02b      	beq.n	800c256 <_malloc_r+0xd2>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	442b      	add	r3, r5
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	e00e      	b.n	800c224 <_malloc_r+0xa0>
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	1b52      	subs	r2, r2, r5
 800c20a:	d41e      	bmi.n	800c24a <_malloc_r+0xc6>
 800c20c:	2a0b      	cmp	r2, #11
 800c20e:	d916      	bls.n	800c23e <_malloc_r+0xba>
 800c210:	1961      	adds	r1, r4, r5
 800c212:	42a3      	cmp	r3, r4
 800c214:	6025      	str	r5, [r4, #0]
 800c216:	bf18      	it	ne
 800c218:	6059      	strne	r1, [r3, #4]
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	bf08      	it	eq
 800c21e:	6031      	streq	r1, [r6, #0]
 800c220:	5162      	str	r2, [r4, r5]
 800c222:	604b      	str	r3, [r1, #4]
 800c224:	4638      	mov	r0, r7
 800c226:	f104 060b 	add.w	r6, r4, #11
 800c22a:	f000 fbf7 	bl	800ca1c <__malloc_unlock>
 800c22e:	f026 0607 	bic.w	r6, r6, #7
 800c232:	1d23      	adds	r3, r4, #4
 800c234:	1af2      	subs	r2, r6, r3
 800c236:	d0b6      	beq.n	800c1a6 <_malloc_r+0x22>
 800c238:	1b9b      	subs	r3, r3, r6
 800c23a:	50a3      	str	r3, [r4, r2]
 800c23c:	e7b3      	b.n	800c1a6 <_malloc_r+0x22>
 800c23e:	6862      	ldr	r2, [r4, #4]
 800c240:	42a3      	cmp	r3, r4
 800c242:	bf0c      	ite	eq
 800c244:	6032      	streq	r2, [r6, #0]
 800c246:	605a      	strne	r2, [r3, #4]
 800c248:	e7ec      	b.n	800c224 <_malloc_r+0xa0>
 800c24a:	4623      	mov	r3, r4
 800c24c:	6864      	ldr	r4, [r4, #4]
 800c24e:	e7b2      	b.n	800c1b6 <_malloc_r+0x32>
 800c250:	4634      	mov	r4, r6
 800c252:	6876      	ldr	r6, [r6, #4]
 800c254:	e7b9      	b.n	800c1ca <_malloc_r+0x46>
 800c256:	230c      	movs	r3, #12
 800c258:	603b      	str	r3, [r7, #0]
 800c25a:	4638      	mov	r0, r7
 800c25c:	f000 fbde 	bl	800ca1c <__malloc_unlock>
 800c260:	e7a1      	b.n	800c1a6 <_malloc_r+0x22>
 800c262:	6025      	str	r5, [r4, #0]
 800c264:	e7de      	b.n	800c224 <_malloc_r+0xa0>
 800c266:	bf00      	nop
 800c268:	200027bc 	.word	0x200027bc

0800c26c <__ssputs_r>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	688e      	ldr	r6, [r1, #8]
 800c272:	429e      	cmp	r6, r3
 800c274:	4682      	mov	sl, r0
 800c276:	460c      	mov	r4, r1
 800c278:	4690      	mov	r8, r2
 800c27a:	461f      	mov	r7, r3
 800c27c:	d838      	bhi.n	800c2f0 <__ssputs_r+0x84>
 800c27e:	898a      	ldrh	r2, [r1, #12]
 800c280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c284:	d032      	beq.n	800c2ec <__ssputs_r+0x80>
 800c286:	6825      	ldr	r5, [r4, #0]
 800c288:	6909      	ldr	r1, [r1, #16]
 800c28a:	eba5 0901 	sub.w	r9, r5, r1
 800c28e:	6965      	ldr	r5, [r4, #20]
 800c290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c298:	3301      	adds	r3, #1
 800c29a:	444b      	add	r3, r9
 800c29c:	106d      	asrs	r5, r5, #1
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	bf38      	it	cc
 800c2a2:	461d      	movcc	r5, r3
 800c2a4:	0553      	lsls	r3, r2, #21
 800c2a6:	d531      	bpl.n	800c30c <__ssputs_r+0xa0>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7ff ff6b 	bl	800c184 <_malloc_r>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	b950      	cbnz	r0, 800c2c8 <__ssputs_r+0x5c>
 800c2b2:	230c      	movs	r3, #12
 800c2b4:	f8ca 3000 	str.w	r3, [sl]
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c8:	6921      	ldr	r1, [r4, #16]
 800c2ca:	464a      	mov	r2, r9
 800c2cc:	f7fb ff3e 	bl	800814c <memcpy>
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	6126      	str	r6, [r4, #16]
 800c2de:	6165      	str	r5, [r4, #20]
 800c2e0:	444e      	add	r6, r9
 800c2e2:	eba5 0509 	sub.w	r5, r5, r9
 800c2e6:	6026      	str	r6, [r4, #0]
 800c2e8:	60a5      	str	r5, [r4, #8]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	42be      	cmp	r6, r7
 800c2ee:	d900      	bls.n	800c2f2 <__ssputs_r+0x86>
 800c2f0:	463e      	mov	r6, r7
 800c2f2:	6820      	ldr	r0, [r4, #0]
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	f000 fb70 	bl	800c9dc <memmove>
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	1b9b      	subs	r3, r3, r6
 800c300:	60a3      	str	r3, [r4, #8]
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	4433      	add	r3, r6
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	2000      	movs	r0, #0
 800c30a:	e7db      	b.n	800c2c4 <__ssputs_r+0x58>
 800c30c:	462a      	mov	r2, r5
 800c30e:	f000 fb8b 	bl	800ca28 <_realloc_r>
 800c312:	4606      	mov	r6, r0
 800c314:	2800      	cmp	r0, #0
 800c316:	d1e1      	bne.n	800c2dc <__ssputs_r+0x70>
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	4650      	mov	r0, sl
 800c31c:	f7ff fec6 	bl	800c0ac <_free_r>
 800c320:	e7c7      	b.n	800c2b2 <__ssputs_r+0x46>
	...

0800c324 <_svfiprintf_r>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	4698      	mov	r8, r3
 800c32a:	898b      	ldrh	r3, [r1, #12]
 800c32c:	061b      	lsls	r3, r3, #24
 800c32e:	b09d      	sub	sp, #116	; 0x74
 800c330:	4607      	mov	r7, r0
 800c332:	460d      	mov	r5, r1
 800c334:	4614      	mov	r4, r2
 800c336:	d50e      	bpl.n	800c356 <_svfiprintf_r+0x32>
 800c338:	690b      	ldr	r3, [r1, #16]
 800c33a:	b963      	cbnz	r3, 800c356 <_svfiprintf_r+0x32>
 800c33c:	2140      	movs	r1, #64	; 0x40
 800c33e:	f7ff ff21 	bl	800c184 <_malloc_r>
 800c342:	6028      	str	r0, [r5, #0]
 800c344:	6128      	str	r0, [r5, #16]
 800c346:	b920      	cbnz	r0, 800c352 <_svfiprintf_r+0x2e>
 800c348:	230c      	movs	r3, #12
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e0d1      	b.n	800c4f6 <_svfiprintf_r+0x1d2>
 800c352:	2340      	movs	r3, #64	; 0x40
 800c354:	616b      	str	r3, [r5, #20]
 800c356:	2300      	movs	r3, #0
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	2320      	movs	r3, #32
 800c35c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c360:	f8cd 800c 	str.w	r8, [sp, #12]
 800c364:	2330      	movs	r3, #48	; 0x30
 800c366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c510 <_svfiprintf_r+0x1ec>
 800c36a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c36e:	f04f 0901 	mov.w	r9, #1
 800c372:	4623      	mov	r3, r4
 800c374:	469a      	mov	sl, r3
 800c376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c37a:	b10a      	cbz	r2, 800c380 <_svfiprintf_r+0x5c>
 800c37c:	2a25      	cmp	r2, #37	; 0x25
 800c37e:	d1f9      	bne.n	800c374 <_svfiprintf_r+0x50>
 800c380:	ebba 0b04 	subs.w	fp, sl, r4
 800c384:	d00b      	beq.n	800c39e <_svfiprintf_r+0x7a>
 800c386:	465b      	mov	r3, fp
 800c388:	4622      	mov	r2, r4
 800c38a:	4629      	mov	r1, r5
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7ff ff6d 	bl	800c26c <__ssputs_r>
 800c392:	3001      	adds	r0, #1
 800c394:	f000 80aa 	beq.w	800c4ec <_svfiprintf_r+0x1c8>
 800c398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c39a:	445a      	add	r2, fp
 800c39c:	9209      	str	r2, [sp, #36]	; 0x24
 800c39e:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 80a2 	beq.w	800c4ec <_svfiprintf_r+0x1c8>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b2:	f10a 0a01 	add.w	sl, sl, #1
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3be:	931a      	str	r3, [sp, #104]	; 0x68
 800c3c0:	4654      	mov	r4, sl
 800c3c2:	2205      	movs	r2, #5
 800c3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c8:	4851      	ldr	r0, [pc, #324]	; (800c510 <_svfiprintf_r+0x1ec>)
 800c3ca:	f7f3 ff29 	bl	8000220 <memchr>
 800c3ce:	9a04      	ldr	r2, [sp, #16]
 800c3d0:	b9d8      	cbnz	r0, 800c40a <_svfiprintf_r+0xe6>
 800c3d2:	06d0      	lsls	r0, r2, #27
 800c3d4:	bf44      	itt	mi
 800c3d6:	2320      	movmi	r3, #32
 800c3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3dc:	0711      	lsls	r1, r2, #28
 800c3de:	bf44      	itt	mi
 800c3e0:	232b      	movmi	r3, #43	; 0x2b
 800c3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ec:	d015      	beq.n	800c41a <_svfiprintf_r+0xf6>
 800c3ee:	9a07      	ldr	r2, [sp, #28]
 800c3f0:	4654      	mov	r4, sl
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f04f 0c0a 	mov.w	ip, #10
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3fe:	3b30      	subs	r3, #48	; 0x30
 800c400:	2b09      	cmp	r3, #9
 800c402:	d94e      	bls.n	800c4a2 <_svfiprintf_r+0x17e>
 800c404:	b1b0      	cbz	r0, 800c434 <_svfiprintf_r+0x110>
 800c406:	9207      	str	r2, [sp, #28]
 800c408:	e014      	b.n	800c434 <_svfiprintf_r+0x110>
 800c40a:	eba0 0308 	sub.w	r3, r0, r8
 800c40e:	fa09 f303 	lsl.w	r3, r9, r3
 800c412:	4313      	orrs	r3, r2
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	46a2      	mov	sl, r4
 800c418:	e7d2      	b.n	800c3c0 <_svfiprintf_r+0x9c>
 800c41a:	9b03      	ldr	r3, [sp, #12]
 800c41c:	1d19      	adds	r1, r3, #4
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	9103      	str	r1, [sp, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	bfbb      	ittet	lt
 800c426:	425b      	neglt	r3, r3
 800c428:	f042 0202 	orrlt.w	r2, r2, #2
 800c42c:	9307      	strge	r3, [sp, #28]
 800c42e:	9307      	strlt	r3, [sp, #28]
 800c430:	bfb8      	it	lt
 800c432:	9204      	strlt	r2, [sp, #16]
 800c434:	7823      	ldrb	r3, [r4, #0]
 800c436:	2b2e      	cmp	r3, #46	; 0x2e
 800c438:	d10c      	bne.n	800c454 <_svfiprintf_r+0x130>
 800c43a:	7863      	ldrb	r3, [r4, #1]
 800c43c:	2b2a      	cmp	r3, #42	; 0x2a
 800c43e:	d135      	bne.n	800c4ac <_svfiprintf_r+0x188>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	1d1a      	adds	r2, r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	9203      	str	r2, [sp, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	bfb8      	it	lt
 800c44c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c450:	3402      	adds	r4, #2
 800c452:	9305      	str	r3, [sp, #20]
 800c454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c520 <_svfiprintf_r+0x1fc>
 800c458:	7821      	ldrb	r1, [r4, #0]
 800c45a:	2203      	movs	r2, #3
 800c45c:	4650      	mov	r0, sl
 800c45e:	f7f3 fedf 	bl	8000220 <memchr>
 800c462:	b140      	cbz	r0, 800c476 <_svfiprintf_r+0x152>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	eba0 000a 	sub.w	r0, r0, sl
 800c46a:	fa03 f000 	lsl.w	r0, r3, r0
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	4303      	orrs	r3, r0
 800c472:	3401      	adds	r4, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47a:	4826      	ldr	r0, [pc, #152]	; (800c514 <_svfiprintf_r+0x1f0>)
 800c47c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c480:	2206      	movs	r2, #6
 800c482:	f7f3 fecd 	bl	8000220 <memchr>
 800c486:	2800      	cmp	r0, #0
 800c488:	d038      	beq.n	800c4fc <_svfiprintf_r+0x1d8>
 800c48a:	4b23      	ldr	r3, [pc, #140]	; (800c518 <_svfiprintf_r+0x1f4>)
 800c48c:	bb1b      	cbnz	r3, 800c4d6 <_svfiprintf_r+0x1b2>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	3308      	adds	r3, #8
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49c:	4433      	add	r3, r6
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	e767      	b.n	800c372 <_svfiprintf_r+0x4e>
 800c4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	e7a5      	b.n	800c3f8 <_svfiprintf_r+0xd4>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	f04f 0c0a 	mov.w	ip, #10
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4be:	3a30      	subs	r2, #48	; 0x30
 800c4c0:	2a09      	cmp	r2, #9
 800c4c2:	d903      	bls.n	800c4cc <_svfiprintf_r+0x1a8>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0c5      	beq.n	800c454 <_svfiprintf_r+0x130>
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	e7c3      	b.n	800c454 <_svfiprintf_r+0x130>
 800c4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e7f0      	b.n	800c4b8 <_svfiprintf_r+0x194>
 800c4d6:	ab03      	add	r3, sp, #12
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <_svfiprintf_r+0x1f8>)
 800c4de:	a904      	add	r1, sp, #16
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7fb fee9 	bl	80082b8 <_printf_float>
 800c4e6:	1c42      	adds	r2, r0, #1
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	d1d6      	bne.n	800c49a <_svfiprintf_r+0x176>
 800c4ec:	89ab      	ldrh	r3, [r5, #12]
 800c4ee:	065b      	lsls	r3, r3, #25
 800c4f0:	f53f af2c 	bmi.w	800c34c <_svfiprintf_r+0x28>
 800c4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4f6:	b01d      	add	sp, #116	; 0x74
 800c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fc:	ab03      	add	r3, sp, #12
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	462a      	mov	r2, r5
 800c502:	4b06      	ldr	r3, [pc, #24]	; (800c51c <_svfiprintf_r+0x1f8>)
 800c504:	a904      	add	r1, sp, #16
 800c506:	4638      	mov	r0, r7
 800c508:	f7fc f97a 	bl	8008800 <_printf_i>
 800c50c:	e7eb      	b.n	800c4e6 <_svfiprintf_r+0x1c2>
 800c50e:	bf00      	nop
 800c510:	0800df4c 	.word	0x0800df4c
 800c514:	0800df56 	.word	0x0800df56
 800c518:	080082b9 	.word	0x080082b9
 800c51c:	0800c26d 	.word	0x0800c26d
 800c520:	0800df52 	.word	0x0800df52

0800c524 <__sfputc_r>:
 800c524:	6893      	ldr	r3, [r2, #8]
 800c526:	3b01      	subs	r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	b410      	push	{r4}
 800c52c:	6093      	str	r3, [r2, #8]
 800c52e:	da08      	bge.n	800c542 <__sfputc_r+0x1e>
 800c530:	6994      	ldr	r4, [r2, #24]
 800c532:	42a3      	cmp	r3, r4
 800c534:	db01      	blt.n	800c53a <__sfputc_r+0x16>
 800c536:	290a      	cmp	r1, #10
 800c538:	d103      	bne.n	800c542 <__sfputc_r+0x1e>
 800c53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c53e:	f7fd bbf7 	b.w	8009d30 <__swbuf_r>
 800c542:	6813      	ldr	r3, [r2, #0]
 800c544:	1c58      	adds	r0, r3, #1
 800c546:	6010      	str	r0, [r2, #0]
 800c548:	7019      	strb	r1, [r3, #0]
 800c54a:	4608      	mov	r0, r1
 800c54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <__sfputs_r>:
 800c552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c554:	4606      	mov	r6, r0
 800c556:	460f      	mov	r7, r1
 800c558:	4614      	mov	r4, r2
 800c55a:	18d5      	adds	r5, r2, r3
 800c55c:	42ac      	cmp	r4, r5
 800c55e:	d101      	bne.n	800c564 <__sfputs_r+0x12>
 800c560:	2000      	movs	r0, #0
 800c562:	e007      	b.n	800c574 <__sfputs_r+0x22>
 800c564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c568:	463a      	mov	r2, r7
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7ff ffda 	bl	800c524 <__sfputc_r>
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	d1f3      	bne.n	800c55c <__sfputs_r+0xa>
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c578 <_vfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	460d      	mov	r5, r1
 800c57e:	b09d      	sub	sp, #116	; 0x74
 800c580:	4614      	mov	r4, r2
 800c582:	4698      	mov	r8, r3
 800c584:	4606      	mov	r6, r0
 800c586:	b118      	cbz	r0, 800c590 <_vfiprintf_r+0x18>
 800c588:	6983      	ldr	r3, [r0, #24]
 800c58a:	b90b      	cbnz	r3, 800c590 <_vfiprintf_r+0x18>
 800c58c:	f7fe fc24 	bl	800add8 <__sinit>
 800c590:	4b89      	ldr	r3, [pc, #548]	; (800c7b8 <_vfiprintf_r+0x240>)
 800c592:	429d      	cmp	r5, r3
 800c594:	d11b      	bne.n	800c5ce <_vfiprintf_r+0x56>
 800c596:	6875      	ldr	r5, [r6, #4]
 800c598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c59a:	07d9      	lsls	r1, r3, #31
 800c59c:	d405      	bmi.n	800c5aa <_vfiprintf_r+0x32>
 800c59e:	89ab      	ldrh	r3, [r5, #12]
 800c5a0:	059a      	lsls	r2, r3, #22
 800c5a2:	d402      	bmi.n	800c5aa <_vfiprintf_r+0x32>
 800c5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5a6:	f7ff f828 	bl	800b5fa <__retarget_lock_acquire_recursive>
 800c5aa:	89ab      	ldrh	r3, [r5, #12]
 800c5ac:	071b      	lsls	r3, r3, #28
 800c5ae:	d501      	bpl.n	800c5b4 <_vfiprintf_r+0x3c>
 800c5b0:	692b      	ldr	r3, [r5, #16]
 800c5b2:	b9eb      	cbnz	r3, 800c5f0 <_vfiprintf_r+0x78>
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7fd fc0c 	bl	8009dd4 <__swsetup_r>
 800c5bc:	b1c0      	cbz	r0, 800c5f0 <_vfiprintf_r+0x78>
 800c5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c0:	07dc      	lsls	r4, r3, #31
 800c5c2:	d50e      	bpl.n	800c5e2 <_vfiprintf_r+0x6a>
 800c5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c8:	b01d      	add	sp, #116	; 0x74
 800c5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ce:	4b7b      	ldr	r3, [pc, #492]	; (800c7bc <_vfiprintf_r+0x244>)
 800c5d0:	429d      	cmp	r5, r3
 800c5d2:	d101      	bne.n	800c5d8 <_vfiprintf_r+0x60>
 800c5d4:	68b5      	ldr	r5, [r6, #8]
 800c5d6:	e7df      	b.n	800c598 <_vfiprintf_r+0x20>
 800c5d8:	4b79      	ldr	r3, [pc, #484]	; (800c7c0 <_vfiprintf_r+0x248>)
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	bf08      	it	eq
 800c5de:	68f5      	ldreq	r5, [r6, #12]
 800c5e0:	e7da      	b.n	800c598 <_vfiprintf_r+0x20>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	0598      	lsls	r0, r3, #22
 800c5e6:	d4ed      	bmi.n	800c5c4 <_vfiprintf_r+0x4c>
 800c5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ea:	f7ff f807 	bl	800b5fc <__retarget_lock_release_recursive>
 800c5ee:	e7e9      	b.n	800c5c4 <_vfiprintf_r+0x4c>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fe:	2330      	movs	r3, #48	; 0x30
 800c600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7c4 <_vfiprintf_r+0x24c>
 800c604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c608:	f04f 0901 	mov.w	r9, #1
 800c60c:	4623      	mov	r3, r4
 800c60e:	469a      	mov	sl, r3
 800c610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c614:	b10a      	cbz	r2, 800c61a <_vfiprintf_r+0xa2>
 800c616:	2a25      	cmp	r2, #37	; 0x25
 800c618:	d1f9      	bne.n	800c60e <_vfiprintf_r+0x96>
 800c61a:	ebba 0b04 	subs.w	fp, sl, r4
 800c61e:	d00b      	beq.n	800c638 <_vfiprintf_r+0xc0>
 800c620:	465b      	mov	r3, fp
 800c622:	4622      	mov	r2, r4
 800c624:	4629      	mov	r1, r5
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff ff93 	bl	800c552 <__sfputs_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	f000 80aa 	beq.w	800c786 <_vfiprintf_r+0x20e>
 800c632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c634:	445a      	add	r2, fp
 800c636:	9209      	str	r2, [sp, #36]	; 0x24
 800c638:	f89a 3000 	ldrb.w	r3, [sl]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80a2 	beq.w	800c786 <_vfiprintf_r+0x20e>
 800c642:	2300      	movs	r3, #0
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64c:	f10a 0a01 	add.w	sl, sl, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	9307      	str	r3, [sp, #28]
 800c654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c658:	931a      	str	r3, [sp, #104]	; 0x68
 800c65a:	4654      	mov	r4, sl
 800c65c:	2205      	movs	r2, #5
 800c65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c662:	4858      	ldr	r0, [pc, #352]	; (800c7c4 <_vfiprintf_r+0x24c>)
 800c664:	f7f3 fddc 	bl	8000220 <memchr>
 800c668:	9a04      	ldr	r2, [sp, #16]
 800c66a:	b9d8      	cbnz	r0, 800c6a4 <_vfiprintf_r+0x12c>
 800c66c:	06d1      	lsls	r1, r2, #27
 800c66e:	bf44      	itt	mi
 800c670:	2320      	movmi	r3, #32
 800c672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c676:	0713      	lsls	r3, r2, #28
 800c678:	bf44      	itt	mi
 800c67a:	232b      	movmi	r3, #43	; 0x2b
 800c67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c680:	f89a 3000 	ldrb.w	r3, [sl]
 800c684:	2b2a      	cmp	r3, #42	; 0x2a
 800c686:	d015      	beq.n	800c6b4 <_vfiprintf_r+0x13c>
 800c688:	9a07      	ldr	r2, [sp, #28]
 800c68a:	4654      	mov	r4, sl
 800c68c:	2000      	movs	r0, #0
 800c68e:	f04f 0c0a 	mov.w	ip, #10
 800c692:	4621      	mov	r1, r4
 800c694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c698:	3b30      	subs	r3, #48	; 0x30
 800c69a:	2b09      	cmp	r3, #9
 800c69c:	d94e      	bls.n	800c73c <_vfiprintf_r+0x1c4>
 800c69e:	b1b0      	cbz	r0, 800c6ce <_vfiprintf_r+0x156>
 800c6a0:	9207      	str	r2, [sp, #28]
 800c6a2:	e014      	b.n	800c6ce <_vfiprintf_r+0x156>
 800c6a4:	eba0 0308 	sub.w	r3, r0, r8
 800c6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	46a2      	mov	sl, r4
 800c6b2:	e7d2      	b.n	800c65a <_vfiprintf_r+0xe2>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	1d19      	adds	r1, r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	9103      	str	r1, [sp, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfbb      	ittet	lt
 800c6c0:	425b      	neglt	r3, r3
 800c6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c6:	9307      	strge	r3, [sp, #28]
 800c6c8:	9307      	strlt	r3, [sp, #28]
 800c6ca:	bfb8      	it	lt
 800c6cc:	9204      	strlt	r2, [sp, #16]
 800c6ce:	7823      	ldrb	r3, [r4, #0]
 800c6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d2:	d10c      	bne.n	800c6ee <_vfiprintf_r+0x176>
 800c6d4:	7863      	ldrb	r3, [r4, #1]
 800c6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d8:	d135      	bne.n	800c746 <_vfiprintf_r+0x1ce>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	9203      	str	r2, [sp, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ea:	3402      	adds	r4, #2
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7d4 <_vfiprintf_r+0x25c>
 800c6f2:	7821      	ldrb	r1, [r4, #0]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7f3 fd92 	bl	8000220 <memchr>
 800c6fc:	b140      	cbz	r0, 800c710 <_vfiprintf_r+0x198>
 800c6fe:	2340      	movs	r3, #64	; 0x40
 800c700:	eba0 000a 	sub.w	r0, r0, sl
 800c704:	fa03 f000 	lsl.w	r0, r3, r0
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	4303      	orrs	r3, r0
 800c70c:	3401      	adds	r4, #1
 800c70e:	9304      	str	r3, [sp, #16]
 800c710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c714:	482c      	ldr	r0, [pc, #176]	; (800c7c8 <_vfiprintf_r+0x250>)
 800c716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c71a:	2206      	movs	r2, #6
 800c71c:	f7f3 fd80 	bl	8000220 <memchr>
 800c720:	2800      	cmp	r0, #0
 800c722:	d03f      	beq.n	800c7a4 <_vfiprintf_r+0x22c>
 800c724:	4b29      	ldr	r3, [pc, #164]	; (800c7cc <_vfiprintf_r+0x254>)
 800c726:	bb1b      	cbnz	r3, 800c770 <_vfiprintf_r+0x1f8>
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	3307      	adds	r3, #7
 800c72c:	f023 0307 	bic.w	r3, r3, #7
 800c730:	3308      	adds	r3, #8
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c736:	443b      	add	r3, r7
 800c738:	9309      	str	r3, [sp, #36]	; 0x24
 800c73a:	e767      	b.n	800c60c <_vfiprintf_r+0x94>
 800c73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c740:	460c      	mov	r4, r1
 800c742:	2001      	movs	r0, #1
 800c744:	e7a5      	b.n	800c692 <_vfiprintf_r+0x11a>
 800c746:	2300      	movs	r3, #0
 800c748:	3401      	adds	r4, #1
 800c74a:	9305      	str	r3, [sp, #20]
 800c74c:	4619      	mov	r1, r3
 800c74e:	f04f 0c0a 	mov.w	ip, #10
 800c752:	4620      	mov	r0, r4
 800c754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c758:	3a30      	subs	r2, #48	; 0x30
 800c75a:	2a09      	cmp	r2, #9
 800c75c:	d903      	bls.n	800c766 <_vfiprintf_r+0x1ee>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0c5      	beq.n	800c6ee <_vfiprintf_r+0x176>
 800c762:	9105      	str	r1, [sp, #20]
 800c764:	e7c3      	b.n	800c6ee <_vfiprintf_r+0x176>
 800c766:	fb0c 2101 	mla	r1, ip, r1, r2
 800c76a:	4604      	mov	r4, r0
 800c76c:	2301      	movs	r3, #1
 800c76e:	e7f0      	b.n	800c752 <_vfiprintf_r+0x1da>
 800c770:	ab03      	add	r3, sp, #12
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	462a      	mov	r2, r5
 800c776:	4b16      	ldr	r3, [pc, #88]	; (800c7d0 <_vfiprintf_r+0x258>)
 800c778:	a904      	add	r1, sp, #16
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7fb fd9c 	bl	80082b8 <_printf_float>
 800c780:	4607      	mov	r7, r0
 800c782:	1c78      	adds	r0, r7, #1
 800c784:	d1d6      	bne.n	800c734 <_vfiprintf_r+0x1bc>
 800c786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c788:	07d9      	lsls	r1, r3, #31
 800c78a:	d405      	bmi.n	800c798 <_vfiprintf_r+0x220>
 800c78c:	89ab      	ldrh	r3, [r5, #12]
 800c78e:	059a      	lsls	r2, r3, #22
 800c790:	d402      	bmi.n	800c798 <_vfiprintf_r+0x220>
 800c792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c794:	f7fe ff32 	bl	800b5fc <__retarget_lock_release_recursive>
 800c798:	89ab      	ldrh	r3, [r5, #12]
 800c79a:	065b      	lsls	r3, r3, #25
 800c79c:	f53f af12 	bmi.w	800c5c4 <_vfiprintf_r+0x4c>
 800c7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7a2:	e711      	b.n	800c5c8 <_vfiprintf_r+0x50>
 800c7a4:	ab03      	add	r3, sp, #12
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <_vfiprintf_r+0x258>)
 800c7ac:	a904      	add	r1, sp, #16
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7fc f826 	bl	8008800 <_printf_i>
 800c7b4:	e7e4      	b.n	800c780 <_vfiprintf_r+0x208>
 800c7b6:	bf00      	nop
 800c7b8:	0800dd34 	.word	0x0800dd34
 800c7bc:	0800dd54 	.word	0x0800dd54
 800c7c0:	0800dd14 	.word	0x0800dd14
 800c7c4:	0800df4c 	.word	0x0800df4c
 800c7c8:	0800df56 	.word	0x0800df56
 800c7cc:	080082b9 	.word	0x080082b9
 800c7d0:	0800c553 	.word	0x0800c553
 800c7d4:	0800df52 	.word	0x0800df52

0800c7d8 <nan>:
 800c7d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7e0 <nan+0x8>
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	7ff80000 	.word	0x7ff80000

0800c7e8 <_sbrk_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d06      	ldr	r5, [pc, #24]	; (800c804 <_sbrk_r+0x1c>)
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4608      	mov	r0, r1
 800c7f2:	602b      	str	r3, [r5, #0]
 800c7f4:	f7f8 fa1a 	bl	8004c2c <_sbrk>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d102      	bne.n	800c802 <_sbrk_r+0x1a>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	b103      	cbz	r3, 800c802 <_sbrk_r+0x1a>
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	200027c4 	.word	0x200027c4

0800c808 <__sread>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	460c      	mov	r4, r1
 800c80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c810:	f000 f93a 	bl	800ca88 <_read_r>
 800c814:	2800      	cmp	r0, #0
 800c816:	bfab      	itete	ge
 800c818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c81a:	89a3      	ldrhlt	r3, [r4, #12]
 800c81c:	181b      	addge	r3, r3, r0
 800c81e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c822:	bfac      	ite	ge
 800c824:	6563      	strge	r3, [r4, #84]	; 0x54
 800c826:	81a3      	strhlt	r3, [r4, #12]
 800c828:	bd10      	pop	{r4, pc}

0800c82a <__swrite>:
 800c82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82e:	461f      	mov	r7, r3
 800c830:	898b      	ldrh	r3, [r1, #12]
 800c832:	05db      	lsls	r3, r3, #23
 800c834:	4605      	mov	r5, r0
 800c836:	460c      	mov	r4, r1
 800c838:	4616      	mov	r6, r2
 800c83a:	d505      	bpl.n	800c848 <__swrite+0x1e>
 800c83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c840:	2302      	movs	r3, #2
 800c842:	2200      	movs	r2, #0
 800c844:	f000 f8b8 	bl	800c9b8 <_lseek_r>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c84e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	4632      	mov	r2, r6
 800c856:	463b      	mov	r3, r7
 800c858:	4628      	mov	r0, r5
 800c85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c85e:	f000 b837 	b.w	800c8d0 <_write_r>

0800c862 <__sseek>:
 800c862:	b510      	push	{r4, lr}
 800c864:	460c      	mov	r4, r1
 800c866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86a:	f000 f8a5 	bl	800c9b8 <_lseek_r>
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	bf15      	itete	ne
 800c874:	6560      	strne	r0, [r4, #84]	; 0x54
 800c876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c87a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c87e:	81a3      	strheq	r3, [r4, #12]
 800c880:	bf18      	it	ne
 800c882:	81a3      	strhne	r3, [r4, #12]
 800c884:	bd10      	pop	{r4, pc}

0800c886 <__sclose>:
 800c886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c88a:	f000 b851 	b.w	800c930 <_close_r>

0800c88e <strncmp>:
 800c88e:	b510      	push	{r4, lr}
 800c890:	b17a      	cbz	r2, 800c8b2 <strncmp+0x24>
 800c892:	4603      	mov	r3, r0
 800c894:	3901      	subs	r1, #1
 800c896:	1884      	adds	r4, r0, r2
 800c898:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8a0:	4290      	cmp	r0, r2
 800c8a2:	d101      	bne.n	800c8a8 <strncmp+0x1a>
 800c8a4:	42a3      	cmp	r3, r4
 800c8a6:	d101      	bne.n	800c8ac <strncmp+0x1e>
 800c8a8:	1a80      	subs	r0, r0, r2
 800c8aa:	bd10      	pop	{r4, pc}
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d1f3      	bne.n	800c898 <strncmp+0xa>
 800c8b0:	e7fa      	b.n	800c8a8 <strncmp+0x1a>
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	e7f9      	b.n	800c8aa <strncmp+0x1c>

0800c8b6 <__ascii_wctomb>:
 800c8b6:	b149      	cbz	r1, 800c8cc <__ascii_wctomb+0x16>
 800c8b8:	2aff      	cmp	r2, #255	; 0xff
 800c8ba:	bf85      	ittet	hi
 800c8bc:	238a      	movhi	r3, #138	; 0x8a
 800c8be:	6003      	strhi	r3, [r0, #0]
 800c8c0:	700a      	strbls	r2, [r1, #0]
 800c8c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8c6:	bf98      	it	ls
 800c8c8:	2001      	movls	r0, #1
 800c8ca:	4770      	bx	lr
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	4770      	bx	lr

0800c8d0 <_write_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	; (800c8f0 <_write_r+0x20>)
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	2200      	movs	r2, #0
 800c8dc:	602a      	str	r2, [r5, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f7f8 f953 	bl	8004b8a <_write>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_write_r+0x1e>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_write_r+0x1e>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	200027c4 	.word	0x200027c4

0800c8f4 <__assert_func>:
 800c8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8f6:	4614      	mov	r4, r2
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b09      	ldr	r3, [pc, #36]	; (800c920 <__assert_func+0x2c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4605      	mov	r5, r0
 800c900:	68d8      	ldr	r0, [r3, #12]
 800c902:	b14c      	cbz	r4, 800c918 <__assert_func+0x24>
 800c904:	4b07      	ldr	r3, [pc, #28]	; (800c924 <__assert_func+0x30>)
 800c906:	9100      	str	r1, [sp, #0]
 800c908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c90c:	4906      	ldr	r1, [pc, #24]	; (800c928 <__assert_func+0x34>)
 800c90e:	462b      	mov	r3, r5
 800c910:	f000 f81e 	bl	800c950 <fiprintf>
 800c914:	f000 f8ca 	bl	800caac <abort>
 800c918:	4b04      	ldr	r3, [pc, #16]	; (800c92c <__assert_func+0x38>)
 800c91a:	461c      	mov	r4, r3
 800c91c:	e7f3      	b.n	800c906 <__assert_func+0x12>
 800c91e:	bf00      	nop
 800c920:	20000010 	.word	0x20000010
 800c924:	0800df5d 	.word	0x0800df5d
 800c928:	0800df6a 	.word	0x0800df6a
 800c92c:	0800df98 	.word	0x0800df98

0800c930 <_close_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d06      	ldr	r5, [pc, #24]	; (800c94c <_close_r+0x1c>)
 800c934:	2300      	movs	r3, #0
 800c936:	4604      	mov	r4, r0
 800c938:	4608      	mov	r0, r1
 800c93a:	602b      	str	r3, [r5, #0]
 800c93c:	f7f8 f941 	bl	8004bc2 <_close>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d102      	bne.n	800c94a <_close_r+0x1a>
 800c944:	682b      	ldr	r3, [r5, #0]
 800c946:	b103      	cbz	r3, 800c94a <_close_r+0x1a>
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	200027c4 	.word	0x200027c4

0800c950 <fiprintf>:
 800c950:	b40e      	push	{r1, r2, r3}
 800c952:	b503      	push	{r0, r1, lr}
 800c954:	4601      	mov	r1, r0
 800c956:	ab03      	add	r3, sp, #12
 800c958:	4805      	ldr	r0, [pc, #20]	; (800c970 <fiprintf+0x20>)
 800c95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c95e:	6800      	ldr	r0, [r0, #0]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	f7ff fe09 	bl	800c578 <_vfiprintf_r>
 800c966:	b002      	add	sp, #8
 800c968:	f85d eb04 	ldr.w	lr, [sp], #4
 800c96c:	b003      	add	sp, #12
 800c96e:	4770      	bx	lr
 800c970:	20000010 	.word	0x20000010

0800c974 <_fstat_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4d07      	ldr	r5, [pc, #28]	; (800c994 <_fstat_r+0x20>)
 800c978:	2300      	movs	r3, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	4608      	mov	r0, r1
 800c97e:	4611      	mov	r1, r2
 800c980:	602b      	str	r3, [r5, #0]
 800c982:	f7f8 f92a 	bl	8004bda <_fstat>
 800c986:	1c43      	adds	r3, r0, #1
 800c988:	d102      	bne.n	800c990 <_fstat_r+0x1c>
 800c98a:	682b      	ldr	r3, [r5, #0]
 800c98c:	b103      	cbz	r3, 800c990 <_fstat_r+0x1c>
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	bd38      	pop	{r3, r4, r5, pc}
 800c992:	bf00      	nop
 800c994:	200027c4 	.word	0x200027c4

0800c998 <_isatty_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d06      	ldr	r5, [pc, #24]	; (800c9b4 <_isatty_r+0x1c>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	f7f8 f929 	bl	8004bfa <_isatty>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_isatty_r+0x1a>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_isatty_r+0x1a>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	200027c4 	.word	0x200027c4

0800c9b8 <_lseek_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d07      	ldr	r5, [pc, #28]	; (800c9d8 <_lseek_r+0x20>)
 800c9bc:	4604      	mov	r4, r0
 800c9be:	4608      	mov	r0, r1
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	602a      	str	r2, [r5, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	f7f8 f922 	bl	8004c10 <_lseek>
 800c9cc:	1c43      	adds	r3, r0, #1
 800c9ce:	d102      	bne.n	800c9d6 <_lseek_r+0x1e>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	b103      	cbz	r3, 800c9d6 <_lseek_r+0x1e>
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	bd38      	pop	{r3, r4, r5, pc}
 800c9d8:	200027c4 	.word	0x200027c4

0800c9dc <memmove>:
 800c9dc:	4288      	cmp	r0, r1
 800c9de:	b510      	push	{r4, lr}
 800c9e0:	eb01 0402 	add.w	r4, r1, r2
 800c9e4:	d902      	bls.n	800c9ec <memmove+0x10>
 800c9e6:	4284      	cmp	r4, r0
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	d807      	bhi.n	800c9fc <memmove+0x20>
 800c9ec:	1e43      	subs	r3, r0, #1
 800c9ee:	42a1      	cmp	r1, r4
 800c9f0:	d008      	beq.n	800ca04 <memmove+0x28>
 800c9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9fa:	e7f8      	b.n	800c9ee <memmove+0x12>
 800c9fc:	4402      	add	r2, r0
 800c9fe:	4601      	mov	r1, r0
 800ca00:	428a      	cmp	r2, r1
 800ca02:	d100      	bne.n	800ca06 <memmove+0x2a>
 800ca04:	bd10      	pop	{r4, pc}
 800ca06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca0e:	e7f7      	b.n	800ca00 <memmove+0x24>

0800ca10 <__malloc_lock>:
 800ca10:	4801      	ldr	r0, [pc, #4]	; (800ca18 <__malloc_lock+0x8>)
 800ca12:	f7fe bdf2 	b.w	800b5fa <__retarget_lock_acquire_recursive>
 800ca16:	bf00      	nop
 800ca18:	200027b8 	.word	0x200027b8

0800ca1c <__malloc_unlock>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	; (800ca24 <__malloc_unlock+0x8>)
 800ca1e:	f7fe bded 	b.w	800b5fc <__retarget_lock_release_recursive>
 800ca22:	bf00      	nop
 800ca24:	200027b8 	.word	0x200027b8

0800ca28 <_realloc_r>:
 800ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	4614      	mov	r4, r2
 800ca30:	460e      	mov	r6, r1
 800ca32:	b921      	cbnz	r1, 800ca3e <_realloc_r+0x16>
 800ca34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca38:	4611      	mov	r1, r2
 800ca3a:	f7ff bba3 	b.w	800c184 <_malloc_r>
 800ca3e:	b92a      	cbnz	r2, 800ca4c <_realloc_r+0x24>
 800ca40:	f7ff fb34 	bl	800c0ac <_free_r>
 800ca44:	4625      	mov	r5, r4
 800ca46:	4628      	mov	r0, r5
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	f000 f835 	bl	800caba <_malloc_usable_size_r>
 800ca50:	4284      	cmp	r4, r0
 800ca52:	4607      	mov	r7, r0
 800ca54:	d802      	bhi.n	800ca5c <_realloc_r+0x34>
 800ca56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca5a:	d812      	bhi.n	800ca82 <_realloc_r+0x5a>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7ff fb90 	bl	800c184 <_malloc_r>
 800ca64:	4605      	mov	r5, r0
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d0ed      	beq.n	800ca46 <_realloc_r+0x1e>
 800ca6a:	42bc      	cmp	r4, r7
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4631      	mov	r1, r6
 800ca70:	bf28      	it	cs
 800ca72:	463a      	movcs	r2, r7
 800ca74:	f7fb fb6a 	bl	800814c <memcpy>
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	f7ff fb16 	bl	800c0ac <_free_r>
 800ca80:	e7e1      	b.n	800ca46 <_realloc_r+0x1e>
 800ca82:	4635      	mov	r5, r6
 800ca84:	e7df      	b.n	800ca46 <_realloc_r+0x1e>
	...

0800ca88 <_read_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4d07      	ldr	r5, [pc, #28]	; (800caa8 <_read_r+0x20>)
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	4608      	mov	r0, r1
 800ca90:	4611      	mov	r1, r2
 800ca92:	2200      	movs	r2, #0
 800ca94:	602a      	str	r2, [r5, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	f7f8 f85a 	bl	8004b50 <_read>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_read_r+0x1e>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_read_r+0x1e>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	200027c4 	.word	0x200027c4

0800caac <abort>:
 800caac:	b508      	push	{r3, lr}
 800caae:	2006      	movs	r0, #6
 800cab0:	f000 f834 	bl	800cb1c <raise>
 800cab4:	2001      	movs	r0, #1
 800cab6:	f7f8 f841 	bl	8004b3c <_exit>

0800caba <_malloc_usable_size_r>:
 800caba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cabe:	1f18      	subs	r0, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfbc      	itt	lt
 800cac4:	580b      	ldrlt	r3, [r1, r0]
 800cac6:	18c0      	addlt	r0, r0, r3
 800cac8:	4770      	bx	lr

0800caca <_raise_r>:
 800caca:	291f      	cmp	r1, #31
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4604      	mov	r4, r0
 800cad0:	460d      	mov	r5, r1
 800cad2:	d904      	bls.n	800cade <_raise_r+0x14>
 800cad4:	2316      	movs	r3, #22
 800cad6:	6003      	str	r3, [r0, #0]
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cae0:	b112      	cbz	r2, 800cae8 <_raise_r+0x1e>
 800cae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae6:	b94b      	cbnz	r3, 800cafc <_raise_r+0x32>
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 f831 	bl	800cb50 <_getpid_r>
 800caee:	462a      	mov	r2, r5
 800caf0:	4601      	mov	r1, r0
 800caf2:	4620      	mov	r0, r4
 800caf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf8:	f000 b818 	b.w	800cb2c <_kill_r>
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d00a      	beq.n	800cb16 <_raise_r+0x4c>
 800cb00:	1c59      	adds	r1, r3, #1
 800cb02:	d103      	bne.n	800cb0c <_raise_r+0x42>
 800cb04:	2316      	movs	r3, #22
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	2001      	movs	r0, #1
 800cb0a:	e7e7      	b.n	800cadc <_raise_r+0x12>
 800cb0c:	2400      	movs	r4, #0
 800cb0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb12:	4628      	mov	r0, r5
 800cb14:	4798      	blx	r3
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7e0      	b.n	800cadc <_raise_r+0x12>
	...

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	; (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd2 	b.w	800caca <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000010 	.word	0x20000010

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	; (800cb4c <_kill_r+0x20>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f7 ffef 	bl	8004b1c <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200027c4 	.word	0x200027c4

0800cb50 <_getpid_r>:
 800cb50:	f7f7 bfdc 	b.w	8004b0c <_getpid>

0800cb54 <pow>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	ed2d 8b02 	vpush	{d8}
 800cb5a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb5e:	eef0 8a60 	vmov.f32	s17, s1
 800cb62:	ec55 4b11 	vmov	r4, r5, d1
 800cb66:	f000 f867 	bl	800cc38 <__ieee754_pow>
 800cb6a:	4622      	mov	r2, r4
 800cb6c:	462b      	mov	r3, r5
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	ec57 6b10 	vmov	r6, r7, d0
 800cb76:	f7f3 fff9 	bl	8000b6c <__aeabi_dcmpun>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d13b      	bne.n	800cbf6 <pow+0xa2>
 800cb7e:	ec51 0b18 	vmov	r0, r1, d8
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	f7f3 ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 800cb8a:	b1b8      	cbz	r0, 800cbbc <pow+0x68>
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2300      	movs	r3, #0
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d146      	bne.n	800cc2a <pow+0xd6>
 800cb9c:	ec45 4b10 	vmov	d0, r4, r5
 800cba0:	f000 fe63 	bl	800d86a <finite>
 800cba4:	b338      	cbz	r0, 800cbf6 <pow+0xa2>
 800cba6:	2200      	movs	r2, #0
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 ffb5 	bl	8000b1c <__aeabi_dcmplt>
 800cbb2:	b300      	cbz	r0, 800cbf6 <pow+0xa2>
 800cbb4:	f7fb faa0 	bl	80080f8 <__errno>
 800cbb8:	2322      	movs	r3, #34	; 0x22
 800cbba:	e01b      	b.n	800cbf4 <pow+0xa0>
 800cbbc:	ec47 6b10 	vmov	d0, r6, r7
 800cbc0:	f000 fe53 	bl	800d86a <finite>
 800cbc4:	b9e0      	cbnz	r0, 800cc00 <pow+0xac>
 800cbc6:	eeb0 0a48 	vmov.f32	s0, s16
 800cbca:	eef0 0a68 	vmov.f32	s1, s17
 800cbce:	f000 fe4c 	bl	800d86a <finite>
 800cbd2:	b1a8      	cbz	r0, 800cc00 <pow+0xac>
 800cbd4:	ec45 4b10 	vmov	d0, r4, r5
 800cbd8:	f000 fe47 	bl	800d86a <finite>
 800cbdc:	b180      	cbz	r0, 800cc00 <pow+0xac>
 800cbde:	4632      	mov	r2, r6
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 ffc1 	bl	8000b6c <__aeabi_dcmpun>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d0e2      	beq.n	800cbb4 <pow+0x60>
 800cbee:	f7fb fa83 	bl	80080f8 <__errno>
 800cbf2:	2321      	movs	r3, #33	; 0x21
 800cbf4:	6003      	str	r3, [r0, #0]
 800cbf6:	ecbd 8b02 	vpop	{d8}
 800cbfa:	ec47 6b10 	vmov	d0, r6, r7
 800cbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc00:	2200      	movs	r2, #0
 800cc02:	2300      	movs	r3, #0
 800cc04:	4630      	mov	r0, r6
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 ff7e 	bl	8000b08 <__aeabi_dcmpeq>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d0f2      	beq.n	800cbf6 <pow+0xa2>
 800cc10:	eeb0 0a48 	vmov.f32	s0, s16
 800cc14:	eef0 0a68 	vmov.f32	s1, s17
 800cc18:	f000 fe27 	bl	800d86a <finite>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d0ea      	beq.n	800cbf6 <pow+0xa2>
 800cc20:	ec45 4b10 	vmov	d0, r4, r5
 800cc24:	f000 fe21 	bl	800d86a <finite>
 800cc28:	e7c3      	b.n	800cbb2 <pow+0x5e>
 800cc2a:	4f01      	ldr	r7, [pc, #4]	; (800cc30 <pow+0xdc>)
 800cc2c:	2600      	movs	r6, #0
 800cc2e:	e7e2      	b.n	800cbf6 <pow+0xa2>
 800cc30:	3ff00000 	.word	0x3ff00000
 800cc34:	00000000 	.word	0x00000000

0800cc38 <__ieee754_pow>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	ed2d 8b06 	vpush	{d8-d10}
 800cc40:	b089      	sub	sp, #36	; 0x24
 800cc42:	ed8d 1b00 	vstr	d1, [sp]
 800cc46:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cc4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cc4e:	ea58 0102 	orrs.w	r1, r8, r2
 800cc52:	ec57 6b10 	vmov	r6, r7, d0
 800cc56:	d115      	bne.n	800cc84 <__ieee754_pow+0x4c>
 800cc58:	19b3      	adds	r3, r6, r6
 800cc5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800cc5e:	4152      	adcs	r2, r2
 800cc60:	4299      	cmp	r1, r3
 800cc62:	4b89      	ldr	r3, [pc, #548]	; (800ce88 <__ieee754_pow+0x250>)
 800cc64:	4193      	sbcs	r3, r2
 800cc66:	f080 84d2 	bcs.w	800d60e <__ieee754_pow+0x9d6>
 800cc6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 fb2b 	bl	80002cc <__adddf3>
 800cc76:	ec41 0b10 	vmov	d0, r0, r1
 800cc7a:	b009      	add	sp, #36	; 0x24
 800cc7c:	ecbd 8b06 	vpop	{d8-d10}
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	4b81      	ldr	r3, [pc, #516]	; (800ce8c <__ieee754_pow+0x254>)
 800cc86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	ee10 aa10 	vmov	sl, s0
 800cc90:	463d      	mov	r5, r7
 800cc92:	dc06      	bgt.n	800cca2 <__ieee754_pow+0x6a>
 800cc94:	d101      	bne.n	800cc9a <__ieee754_pow+0x62>
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	d1e7      	bne.n	800cc6a <__ieee754_pow+0x32>
 800cc9a:	4598      	cmp	r8, r3
 800cc9c:	dc01      	bgt.n	800cca2 <__ieee754_pow+0x6a>
 800cc9e:	d10f      	bne.n	800ccc0 <__ieee754_pow+0x88>
 800cca0:	b172      	cbz	r2, 800ccc0 <__ieee754_pow+0x88>
 800cca2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cca6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ccaa:	ea55 050a 	orrs.w	r5, r5, sl
 800ccae:	d1dc      	bne.n	800cc6a <__ieee754_pow+0x32>
 800ccb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccb4:	18db      	adds	r3, r3, r3
 800ccb6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ccba:	4152      	adcs	r2, r2
 800ccbc:	429d      	cmp	r5, r3
 800ccbe:	e7d0      	b.n	800cc62 <__ieee754_pow+0x2a>
 800ccc0:	2d00      	cmp	r5, #0
 800ccc2:	da3b      	bge.n	800cd3c <__ieee754_pow+0x104>
 800ccc4:	4b72      	ldr	r3, [pc, #456]	; (800ce90 <__ieee754_pow+0x258>)
 800ccc6:	4598      	cmp	r8, r3
 800ccc8:	dc51      	bgt.n	800cd6e <__ieee754_pow+0x136>
 800ccca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ccce:	4598      	cmp	r8, r3
 800ccd0:	f340 84ac 	ble.w	800d62c <__ieee754_pow+0x9f4>
 800ccd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ccd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ccdc:	2b14      	cmp	r3, #20
 800ccde:	dd0f      	ble.n	800cd00 <__ieee754_pow+0xc8>
 800cce0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cce4:	fa22 f103 	lsr.w	r1, r2, r3
 800cce8:	fa01 f303 	lsl.w	r3, r1, r3
 800ccec:	4293      	cmp	r3, r2
 800ccee:	f040 849d 	bne.w	800d62c <__ieee754_pow+0x9f4>
 800ccf2:	f001 0101 	and.w	r1, r1, #1
 800ccf6:	f1c1 0302 	rsb	r3, r1, #2
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	b182      	cbz	r2, 800cd20 <__ieee754_pow+0xe8>
 800ccfe:	e05f      	b.n	800cdc0 <__ieee754_pow+0x188>
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d15b      	bne.n	800cdbc <__ieee754_pow+0x184>
 800cd04:	f1c3 0314 	rsb	r3, r3, #20
 800cd08:	fa48 f103 	asr.w	r1, r8, r3
 800cd0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd10:	4543      	cmp	r3, r8
 800cd12:	f040 8488 	bne.w	800d626 <__ieee754_pow+0x9ee>
 800cd16:	f001 0101 	and.w	r1, r1, #1
 800cd1a:	f1c1 0302 	rsb	r3, r1, #2
 800cd1e:	9304      	str	r3, [sp, #16]
 800cd20:	4b5c      	ldr	r3, [pc, #368]	; (800ce94 <__ieee754_pow+0x25c>)
 800cd22:	4598      	cmp	r8, r3
 800cd24:	d132      	bne.n	800cd8c <__ieee754_pow+0x154>
 800cd26:	f1b9 0f00 	cmp.w	r9, #0
 800cd2a:	f280 8478 	bge.w	800d61e <__ieee754_pow+0x9e6>
 800cd2e:	4959      	ldr	r1, [pc, #356]	; (800ce94 <__ieee754_pow+0x25c>)
 800cd30:	4632      	mov	r2, r6
 800cd32:	463b      	mov	r3, r7
 800cd34:	2000      	movs	r0, #0
 800cd36:	f7f3 fda9 	bl	800088c <__aeabi_ddiv>
 800cd3a:	e79c      	b.n	800cc76 <__ieee754_pow+0x3e>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	2a00      	cmp	r2, #0
 800cd42:	d13d      	bne.n	800cdc0 <__ieee754_pow+0x188>
 800cd44:	4b51      	ldr	r3, [pc, #324]	; (800ce8c <__ieee754_pow+0x254>)
 800cd46:	4598      	cmp	r8, r3
 800cd48:	d1ea      	bne.n	800cd20 <__ieee754_pow+0xe8>
 800cd4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cd4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cd52:	ea53 030a 	orrs.w	r3, r3, sl
 800cd56:	f000 845a 	beq.w	800d60e <__ieee754_pow+0x9d6>
 800cd5a:	4b4f      	ldr	r3, [pc, #316]	; (800ce98 <__ieee754_pow+0x260>)
 800cd5c:	429c      	cmp	r4, r3
 800cd5e:	dd08      	ble.n	800cd72 <__ieee754_pow+0x13a>
 800cd60:	f1b9 0f00 	cmp.w	r9, #0
 800cd64:	f2c0 8457 	blt.w	800d616 <__ieee754_pow+0x9de>
 800cd68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd6c:	e783      	b.n	800cc76 <__ieee754_pow+0x3e>
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e7e5      	b.n	800cd3e <__ieee754_pow+0x106>
 800cd72:	f1b9 0f00 	cmp.w	r9, #0
 800cd76:	f04f 0000 	mov.w	r0, #0
 800cd7a:	f04f 0100 	mov.w	r1, #0
 800cd7e:	f6bf af7a 	bge.w	800cc76 <__ieee754_pow+0x3e>
 800cd82:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cd86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd8a:	e774      	b.n	800cc76 <__ieee754_pow+0x3e>
 800cd8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cd90:	d106      	bne.n	800cda0 <__ieee754_pow+0x168>
 800cd92:	4632      	mov	r2, r6
 800cd94:	463b      	mov	r3, r7
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fc4d 	bl	8000638 <__aeabi_dmul>
 800cd9e:	e76a      	b.n	800cc76 <__ieee754_pow+0x3e>
 800cda0:	4b3e      	ldr	r3, [pc, #248]	; (800ce9c <__ieee754_pow+0x264>)
 800cda2:	4599      	cmp	r9, r3
 800cda4:	d10c      	bne.n	800cdc0 <__ieee754_pow+0x188>
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	db0a      	blt.n	800cdc0 <__ieee754_pow+0x188>
 800cdaa:	ec47 6b10 	vmov	d0, r6, r7
 800cdae:	b009      	add	sp, #36	; 0x24
 800cdb0:	ecbd 8b06 	vpop	{d8-d10}
 800cdb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	f000 bc6c 	b.w	800d694 <__ieee754_sqrt>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	ec47 6b10 	vmov	d0, r6, r7
 800cdc4:	f000 fd48 	bl	800d858 <fabs>
 800cdc8:	ec51 0b10 	vmov	r0, r1, d0
 800cdcc:	f1ba 0f00 	cmp.w	sl, #0
 800cdd0:	d129      	bne.n	800ce26 <__ieee754_pow+0x1ee>
 800cdd2:	b124      	cbz	r4, 800cdde <__ieee754_pow+0x1a6>
 800cdd4:	4b2f      	ldr	r3, [pc, #188]	; (800ce94 <__ieee754_pow+0x25c>)
 800cdd6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d123      	bne.n	800ce26 <__ieee754_pow+0x1ee>
 800cdde:	f1b9 0f00 	cmp.w	r9, #0
 800cde2:	da05      	bge.n	800cdf0 <__ieee754_pow+0x1b8>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	2000      	movs	r0, #0
 800cdea:	492a      	ldr	r1, [pc, #168]	; (800ce94 <__ieee754_pow+0x25c>)
 800cdec:	f7f3 fd4e 	bl	800088c <__aeabi_ddiv>
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	f6bf af40 	bge.w	800cc76 <__ieee754_pow+0x3e>
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cdfc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce00:	4323      	orrs	r3, r4
 800ce02:	d108      	bne.n	800ce16 <__ieee754_pow+0x1de>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	4610      	mov	r0, r2
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	f7f3 fa5c 	bl	80002c8 <__aeabi_dsub>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	e78f      	b.n	800cd36 <__ieee754_pow+0xfe>
 800ce16:	9b04      	ldr	r3, [sp, #16]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	f47f af2c 	bne.w	800cc76 <__ieee754_pow+0x3e>
 800ce1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce22:	4619      	mov	r1, r3
 800ce24:	e727      	b.n	800cc76 <__ieee754_pow+0x3e>
 800ce26:	0feb      	lsrs	r3, r5, #31
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	9306      	str	r3, [sp, #24]
 800ce2c:	9a06      	ldr	r2, [sp, #24]
 800ce2e:	9b04      	ldr	r3, [sp, #16]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	d102      	bne.n	800ce3a <__ieee754_pow+0x202>
 800ce34:	4632      	mov	r2, r6
 800ce36:	463b      	mov	r3, r7
 800ce38:	e7e6      	b.n	800ce08 <__ieee754_pow+0x1d0>
 800ce3a:	4b19      	ldr	r3, [pc, #100]	; (800cea0 <__ieee754_pow+0x268>)
 800ce3c:	4598      	cmp	r8, r3
 800ce3e:	f340 80fb 	ble.w	800d038 <__ieee754_pow+0x400>
 800ce42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ce46:	4598      	cmp	r8, r3
 800ce48:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <__ieee754_pow+0x260>)
 800ce4a:	dd0c      	ble.n	800ce66 <__ieee754_pow+0x22e>
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	dc0f      	bgt.n	800ce70 <__ieee754_pow+0x238>
 800ce50:	f1b9 0f00 	cmp.w	r9, #0
 800ce54:	da0f      	bge.n	800ce76 <__ieee754_pow+0x23e>
 800ce56:	2000      	movs	r0, #0
 800ce58:	b009      	add	sp, #36	; 0x24
 800ce5a:	ecbd 8b06 	vpop	{d8-d10}
 800ce5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce62:	f000 bcf0 	b.w	800d846 <__math_oflow>
 800ce66:	429c      	cmp	r4, r3
 800ce68:	dbf2      	blt.n	800ce50 <__ieee754_pow+0x218>
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <__ieee754_pow+0x25c>)
 800ce6c:	429c      	cmp	r4, r3
 800ce6e:	dd19      	ble.n	800cea4 <__ieee754_pow+0x26c>
 800ce70:	f1b9 0f00 	cmp.w	r9, #0
 800ce74:	dcef      	bgt.n	800ce56 <__ieee754_pow+0x21e>
 800ce76:	2000      	movs	r0, #0
 800ce78:	b009      	add	sp, #36	; 0x24
 800ce7a:	ecbd 8b06 	vpop	{d8-d10}
 800ce7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce82:	f000 bcd7 	b.w	800d834 <__math_uflow>
 800ce86:	bf00      	nop
 800ce88:	fff00000 	.word	0xfff00000
 800ce8c:	7ff00000 	.word	0x7ff00000
 800ce90:	433fffff 	.word	0x433fffff
 800ce94:	3ff00000 	.word	0x3ff00000
 800ce98:	3fefffff 	.word	0x3fefffff
 800ce9c:	3fe00000 	.word	0x3fe00000
 800cea0:	41e00000 	.word	0x41e00000
 800cea4:	4b60      	ldr	r3, [pc, #384]	; (800d028 <__ieee754_pow+0x3f0>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	f7f3 fa0e 	bl	80002c8 <__aeabi_dsub>
 800ceac:	a354      	add	r3, pc, #336	; (adr r3, 800d000 <__ieee754_pow+0x3c8>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	f7f3 fbbf 	bl	8000638 <__aeabi_dmul>
 800ceba:	a353      	add	r3, pc, #332	; (adr r3, 800d008 <__ieee754_pow+0x3d0>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	4606      	mov	r6, r0
 800cec2:	460f      	mov	r7, r1
 800cec4:	4620      	mov	r0, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	f7f3 fbb6 	bl	8000638 <__aeabi_dmul>
 800cecc:	4b57      	ldr	r3, [pc, #348]	; (800d02c <__ieee754_pow+0x3f4>)
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	2200      	movs	r2, #0
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	f7f3 fbae 	bl	8000638 <__aeabi_dmul>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	a14b      	add	r1, pc, #300	; (adr r1, 800d010 <__ieee754_pow+0x3d8>)
 800cee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee6:	f7f3 f9ef 	bl	80002c8 <__aeabi_dsub>
 800ceea:	4622      	mov	r2, r4
 800ceec:	462b      	mov	r3, r5
 800ceee:	f7f3 fba3 	bl	8000638 <__aeabi_dmul>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	2000      	movs	r0, #0
 800cef8:	494d      	ldr	r1, [pc, #308]	; (800d030 <__ieee754_pow+0x3f8>)
 800cefa:	f7f3 f9e5 	bl	80002c8 <__aeabi_dsub>
 800cefe:	4622      	mov	r2, r4
 800cf00:	4680      	mov	r8, r0
 800cf02:	4689      	mov	r9, r1
 800cf04:	462b      	mov	r3, r5
 800cf06:	4620      	mov	r0, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fb95 	bl	8000638 <__aeabi_dmul>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 fb8f 	bl	8000638 <__aeabi_dmul>
 800cf1a:	a33f      	add	r3, pc, #252	; (adr r3, 800d018 <__ieee754_pow+0x3e0>)
 800cf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf20:	f7f3 fb8a 	bl	8000638 <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	f7f3 f9cc 	bl	80002c8 <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4680      	mov	r8, r0
 800cf36:	4689      	mov	r9, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	f7f3 f9c6 	bl	80002cc <__adddf3>
 800cf40:	2000      	movs	r0, #0
 800cf42:	4632      	mov	r2, r6
 800cf44:	463b      	mov	r3, r7
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	f7f3 f9bd 	bl	80002c8 <__aeabi_dsub>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4640      	mov	r0, r8
 800cf54:	4649      	mov	r1, r9
 800cf56:	f7f3 f9b7 	bl	80002c8 <__aeabi_dsub>
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	9a06      	ldr	r2, [sp, #24]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	4313      	orrs	r3, r2
 800cf62:	4682      	mov	sl, r0
 800cf64:	468b      	mov	fp, r1
 800cf66:	f040 81e7 	bne.w	800d338 <__ieee754_pow+0x700>
 800cf6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d020 <__ieee754_pow+0x3e8>
 800cf6e:	eeb0 8a47 	vmov.f32	s16, s14
 800cf72:	eef0 8a67 	vmov.f32	s17, s15
 800cf76:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	463b      	mov	r3, r7
 800cf80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf84:	f7f3 f9a0 	bl	80002c8 <__aeabi_dsub>
 800cf88:	4622      	mov	r2, r4
 800cf8a:	462b      	mov	r3, r5
 800cf8c:	f7f3 fb54 	bl	8000638 <__aeabi_dmul>
 800cf90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf94:	4680      	mov	r8, r0
 800cf96:	4689      	mov	r9, r1
 800cf98:	4650      	mov	r0, sl
 800cf9a:	4659      	mov	r1, fp
 800cf9c:	f7f3 fb4c 	bl	8000638 <__aeabi_dmul>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	f7f3 f990 	bl	80002cc <__adddf3>
 800cfac:	4632      	mov	r2, r6
 800cfae:	463b      	mov	r3, r7
 800cfb0:	4680      	mov	r8, r0
 800cfb2:	4689      	mov	r9, r1
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 fb3e 	bl	8000638 <__aeabi_dmul>
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	460d      	mov	r5, r1
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	f7f3 f980 	bl	80002cc <__adddf3>
 800cfcc:	4b19      	ldr	r3, [pc, #100]	; (800d034 <__ieee754_pow+0x3fc>)
 800cfce:	4299      	cmp	r1, r3
 800cfd0:	ec45 4b19 	vmov	d9, r4, r5
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	468b      	mov	fp, r1
 800cfda:	f340 82f1 	ble.w	800d5c0 <__ieee754_pow+0x988>
 800cfde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cfe2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cfe6:	4303      	orrs	r3, r0
 800cfe8:	f000 81e4 	beq.w	800d3b4 <__ieee754_pow+0x77c>
 800cfec:	ec51 0b18 	vmov	r0, r1, d8
 800cff0:	2200      	movs	r2, #0
 800cff2:	2300      	movs	r3, #0
 800cff4:	f7f3 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800cff8:	3800      	subs	r0, #0
 800cffa:	bf18      	it	ne
 800cffc:	2001      	movne	r0, #1
 800cffe:	e72b      	b.n	800ce58 <__ieee754_pow+0x220>
 800d000:	60000000 	.word	0x60000000
 800d004:	3ff71547 	.word	0x3ff71547
 800d008:	f85ddf44 	.word	0xf85ddf44
 800d00c:	3e54ae0b 	.word	0x3e54ae0b
 800d010:	55555555 	.word	0x55555555
 800d014:	3fd55555 	.word	0x3fd55555
 800d018:	652b82fe 	.word	0x652b82fe
 800d01c:	3ff71547 	.word	0x3ff71547
 800d020:	00000000 	.word	0x00000000
 800d024:	bff00000 	.word	0xbff00000
 800d028:	3ff00000 	.word	0x3ff00000
 800d02c:	3fd00000 	.word	0x3fd00000
 800d030:	3fe00000 	.word	0x3fe00000
 800d034:	408fffff 	.word	0x408fffff
 800d038:	4bd5      	ldr	r3, [pc, #852]	; (800d390 <__ieee754_pow+0x758>)
 800d03a:	402b      	ands	r3, r5
 800d03c:	2200      	movs	r2, #0
 800d03e:	b92b      	cbnz	r3, 800d04c <__ieee754_pow+0x414>
 800d040:	4bd4      	ldr	r3, [pc, #848]	; (800d394 <__ieee754_pow+0x75c>)
 800d042:	f7f3 faf9 	bl	8000638 <__aeabi_dmul>
 800d046:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d04a:	460c      	mov	r4, r1
 800d04c:	1523      	asrs	r3, r4, #20
 800d04e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d052:	4413      	add	r3, r2
 800d054:	9305      	str	r3, [sp, #20]
 800d056:	4bd0      	ldr	r3, [pc, #832]	; (800d398 <__ieee754_pow+0x760>)
 800d058:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d05c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d060:	429c      	cmp	r4, r3
 800d062:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d066:	dd08      	ble.n	800d07a <__ieee754_pow+0x442>
 800d068:	4bcc      	ldr	r3, [pc, #816]	; (800d39c <__ieee754_pow+0x764>)
 800d06a:	429c      	cmp	r4, r3
 800d06c:	f340 8162 	ble.w	800d334 <__ieee754_pow+0x6fc>
 800d070:	9b05      	ldr	r3, [sp, #20]
 800d072:	3301      	adds	r3, #1
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d07a:	2400      	movs	r4, #0
 800d07c:	00e3      	lsls	r3, r4, #3
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	4bc7      	ldr	r3, [pc, #796]	; (800d3a0 <__ieee754_pow+0x768>)
 800d082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d086:	ed93 7b00 	vldr	d7, [r3]
 800d08a:	4629      	mov	r1, r5
 800d08c:	ec53 2b17 	vmov	r2, r3, d7
 800d090:	eeb0 9a47 	vmov.f32	s18, s14
 800d094:	eef0 9a67 	vmov.f32	s19, s15
 800d098:	4682      	mov	sl, r0
 800d09a:	f7f3 f915 	bl	80002c8 <__aeabi_dsub>
 800d09e:	4652      	mov	r2, sl
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	460f      	mov	r7, r1
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	ec51 0b19 	vmov	r0, r1, d9
 800d0aa:	f7f3 f90f 	bl	80002cc <__adddf3>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	49bb      	ldr	r1, [pc, #748]	; (800d3a4 <__ieee754_pow+0x76c>)
 800d0b6:	f7f3 fbe9 	bl	800088c <__aeabi_ddiv>
 800d0ba:	ec41 0b1a 	vmov	d10, r0, r1
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	f7f3 fab7 	bl	8000638 <__aeabi_dmul>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0d0:	9302      	str	r3, [sp, #8]
 800d0d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d0d6:	46ab      	mov	fp, r5
 800d0d8:	106d      	asrs	r5, r5, #1
 800d0da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d0de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d0e2:	ec41 0b18 	vmov	d8, r0, r1
 800d0e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	461d      	mov	r5, r3
 800d0f4:	f7f3 faa0 	bl	8000638 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	4639      	mov	r1, r7
 800d100:	f7f3 f8e2 	bl	80002c8 <__aeabi_dsub>
 800d104:	ec53 2b19 	vmov	r2, r3, d9
 800d108:	4606      	mov	r6, r0
 800d10a:	460f      	mov	r7, r1
 800d10c:	4620      	mov	r0, r4
 800d10e:	4629      	mov	r1, r5
 800d110:	f7f3 f8da 	bl	80002c8 <__aeabi_dsub>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4650      	mov	r0, sl
 800d11a:	4659      	mov	r1, fp
 800d11c:	f7f3 f8d4 	bl	80002c8 <__aeabi_dsub>
 800d120:	4642      	mov	r2, r8
 800d122:	464b      	mov	r3, r9
 800d124:	f7f3 fa88 	bl	8000638 <__aeabi_dmul>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	f7f3 f8ca 	bl	80002c8 <__aeabi_dsub>
 800d134:	ec53 2b1a 	vmov	r2, r3, d10
 800d138:	f7f3 fa7e 	bl	8000638 <__aeabi_dmul>
 800d13c:	ec53 2b18 	vmov	r2, r3, d8
 800d140:	ec41 0b19 	vmov	d9, r0, r1
 800d144:	ec51 0b18 	vmov	r0, r1, d8
 800d148:	f7f3 fa76 	bl	8000638 <__aeabi_dmul>
 800d14c:	a37c      	add	r3, pc, #496	; (adr r3, 800d340 <__ieee754_pow+0x708>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	4604      	mov	r4, r0
 800d154:	460d      	mov	r5, r1
 800d156:	f7f3 fa6f 	bl	8000638 <__aeabi_dmul>
 800d15a:	a37b      	add	r3, pc, #492	; (adr r3, 800d348 <__ieee754_pow+0x710>)
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	f7f3 f8b4 	bl	80002cc <__adddf3>
 800d164:	4622      	mov	r2, r4
 800d166:	462b      	mov	r3, r5
 800d168:	f7f3 fa66 	bl	8000638 <__aeabi_dmul>
 800d16c:	a378      	add	r3, pc, #480	; (adr r3, 800d350 <__ieee754_pow+0x718>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 f8ab 	bl	80002cc <__adddf3>
 800d176:	4622      	mov	r2, r4
 800d178:	462b      	mov	r3, r5
 800d17a:	f7f3 fa5d 	bl	8000638 <__aeabi_dmul>
 800d17e:	a376      	add	r3, pc, #472	; (adr r3, 800d358 <__ieee754_pow+0x720>)
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	f7f3 f8a2 	bl	80002cc <__adddf3>
 800d188:	4622      	mov	r2, r4
 800d18a:	462b      	mov	r3, r5
 800d18c:	f7f3 fa54 	bl	8000638 <__aeabi_dmul>
 800d190:	a373      	add	r3, pc, #460	; (adr r3, 800d360 <__ieee754_pow+0x728>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 f899 	bl	80002cc <__adddf3>
 800d19a:	4622      	mov	r2, r4
 800d19c:	462b      	mov	r3, r5
 800d19e:	f7f3 fa4b 	bl	8000638 <__aeabi_dmul>
 800d1a2:	a371      	add	r3, pc, #452	; (adr r3, 800d368 <__ieee754_pow+0x730>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f7f3 f890 	bl	80002cc <__adddf3>
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 fa3e 	bl	8000638 <__aeabi_dmul>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 fa38 	bl	8000638 <__aeabi_dmul>
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	460d      	mov	r5, r1
 800d1ce:	464b      	mov	r3, r9
 800d1d0:	ec51 0b18 	vmov	r0, r1, d8
 800d1d4:	f7f3 f87a 	bl	80002cc <__adddf3>
 800d1d8:	ec53 2b19 	vmov	r2, r3, d9
 800d1dc:	f7f3 fa2c 	bl	8000638 <__aeabi_dmul>
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	f7f3 f872 	bl	80002cc <__adddf3>
 800d1e8:	4642      	mov	r2, r8
 800d1ea:	4682      	mov	sl, r0
 800d1ec:	468b      	mov	fp, r1
 800d1ee:	464b      	mov	r3, r9
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	f7f3 fa20 	bl	8000638 <__aeabi_dmul>
 800d1f8:	4b6b      	ldr	r3, [pc, #428]	; (800d3a8 <__ieee754_pow+0x770>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	460f      	mov	r7, r1
 800d200:	f7f3 f864 	bl	80002cc <__adddf3>
 800d204:	4652      	mov	r2, sl
 800d206:	465b      	mov	r3, fp
 800d208:	f7f3 f860 	bl	80002cc <__adddf3>
 800d20c:	2000      	movs	r0, #0
 800d20e:	4604      	mov	r4, r0
 800d210:	460d      	mov	r5, r1
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4640      	mov	r0, r8
 800d218:	4649      	mov	r1, r9
 800d21a:	f7f3 fa0d 	bl	8000638 <__aeabi_dmul>
 800d21e:	4b62      	ldr	r3, [pc, #392]	; (800d3a8 <__ieee754_pow+0x770>)
 800d220:	4680      	mov	r8, r0
 800d222:	4689      	mov	r9, r1
 800d224:	2200      	movs	r2, #0
 800d226:	4620      	mov	r0, r4
 800d228:	4629      	mov	r1, r5
 800d22a:	f7f3 f84d 	bl	80002c8 <__aeabi_dsub>
 800d22e:	4632      	mov	r2, r6
 800d230:	463b      	mov	r3, r7
 800d232:	f7f3 f849 	bl	80002c8 <__aeabi_dsub>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4650      	mov	r0, sl
 800d23c:	4659      	mov	r1, fp
 800d23e:	f7f3 f843 	bl	80002c8 <__aeabi_dsub>
 800d242:	ec53 2b18 	vmov	r2, r3, d8
 800d246:	f7f3 f9f7 	bl	8000638 <__aeabi_dmul>
 800d24a:	4622      	mov	r2, r4
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	462b      	mov	r3, r5
 800d252:	ec51 0b19 	vmov	r0, r1, d9
 800d256:	f7f3 f9ef 	bl	8000638 <__aeabi_dmul>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 f833 	bl	80002cc <__adddf3>
 800d266:	4606      	mov	r6, r0
 800d268:	460f      	mov	r7, r1
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 f82b 	bl	80002cc <__adddf3>
 800d276:	a33e      	add	r3, pc, #248	; (adr r3, 800d370 <__ieee754_pow+0x738>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	2000      	movs	r0, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	f7f3 f9d9 	bl	8000638 <__aeabi_dmul>
 800d286:	4642      	mov	r2, r8
 800d288:	ec41 0b18 	vmov	d8, r0, r1
 800d28c:	464b      	mov	r3, r9
 800d28e:	4620      	mov	r0, r4
 800d290:	4629      	mov	r1, r5
 800d292:	f7f3 f819 	bl	80002c8 <__aeabi_dsub>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4630      	mov	r0, r6
 800d29c:	4639      	mov	r1, r7
 800d29e:	f7f3 f813 	bl	80002c8 <__aeabi_dsub>
 800d2a2:	a335      	add	r3, pc, #212	; (adr r3, 800d378 <__ieee754_pow+0x740>)
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	f7f3 f9c6 	bl	8000638 <__aeabi_dmul>
 800d2ac:	a334      	add	r3, pc, #208	; (adr r3, 800d380 <__ieee754_pow+0x748>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	f7f3 f9bd 	bl	8000638 <__aeabi_dmul>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	f7f3 f801 	bl	80002cc <__adddf3>
 800d2ca:	9a07      	ldr	r2, [sp, #28]
 800d2cc:	4b37      	ldr	r3, [pc, #220]	; (800d3ac <__ieee754_pow+0x774>)
 800d2ce:	4413      	add	r3, r2
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f7f2 fffa 	bl	80002cc <__adddf3>
 800d2d8:	4682      	mov	sl, r0
 800d2da:	9805      	ldr	r0, [sp, #20]
 800d2dc:	468b      	mov	fp, r1
 800d2de:	f7f3 f941 	bl	8000564 <__aeabi_i2d>
 800d2e2:	9a07      	ldr	r2, [sp, #28]
 800d2e4:	4b32      	ldr	r3, [pc, #200]	; (800d3b0 <__ieee754_pow+0x778>)
 800d2e6:	4413      	add	r3, r2
 800d2e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	460f      	mov	r7, r1
 800d2f0:	4652      	mov	r2, sl
 800d2f2:	465b      	mov	r3, fp
 800d2f4:	ec51 0b18 	vmov	r0, r1, d8
 800d2f8:	f7f2 ffe8 	bl	80002cc <__adddf3>
 800d2fc:	4642      	mov	r2, r8
 800d2fe:	464b      	mov	r3, r9
 800d300:	f7f2 ffe4 	bl	80002cc <__adddf3>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f2 ffe0 	bl	80002cc <__adddf3>
 800d30c:	2000      	movs	r0, #0
 800d30e:	4632      	mov	r2, r6
 800d310:	463b      	mov	r3, r7
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
 800d316:	f7f2 ffd7 	bl	80002c8 <__aeabi_dsub>
 800d31a:	4642      	mov	r2, r8
 800d31c:	464b      	mov	r3, r9
 800d31e:	f7f2 ffd3 	bl	80002c8 <__aeabi_dsub>
 800d322:	ec53 2b18 	vmov	r2, r3, d8
 800d326:	f7f2 ffcf 	bl	80002c8 <__aeabi_dsub>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4650      	mov	r0, sl
 800d330:	4659      	mov	r1, fp
 800d332:	e610      	b.n	800cf56 <__ieee754_pow+0x31e>
 800d334:	2401      	movs	r4, #1
 800d336:	e6a1      	b.n	800d07c <__ieee754_pow+0x444>
 800d338:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d388 <__ieee754_pow+0x750>
 800d33c:	e617      	b.n	800cf6e <__ieee754_pow+0x336>
 800d33e:	bf00      	nop
 800d340:	4a454eef 	.word	0x4a454eef
 800d344:	3fca7e28 	.word	0x3fca7e28
 800d348:	93c9db65 	.word	0x93c9db65
 800d34c:	3fcd864a 	.word	0x3fcd864a
 800d350:	a91d4101 	.word	0xa91d4101
 800d354:	3fd17460 	.word	0x3fd17460
 800d358:	518f264d 	.word	0x518f264d
 800d35c:	3fd55555 	.word	0x3fd55555
 800d360:	db6fabff 	.word	0xdb6fabff
 800d364:	3fdb6db6 	.word	0x3fdb6db6
 800d368:	33333303 	.word	0x33333303
 800d36c:	3fe33333 	.word	0x3fe33333
 800d370:	e0000000 	.word	0xe0000000
 800d374:	3feec709 	.word	0x3feec709
 800d378:	dc3a03fd 	.word	0xdc3a03fd
 800d37c:	3feec709 	.word	0x3feec709
 800d380:	145b01f5 	.word	0x145b01f5
 800d384:	be3e2fe0 	.word	0xbe3e2fe0
 800d388:	00000000 	.word	0x00000000
 800d38c:	3ff00000 	.word	0x3ff00000
 800d390:	7ff00000 	.word	0x7ff00000
 800d394:	43400000 	.word	0x43400000
 800d398:	0003988e 	.word	0x0003988e
 800d39c:	000bb679 	.word	0x000bb679
 800d3a0:	0800dfa0 	.word	0x0800dfa0
 800d3a4:	3ff00000 	.word	0x3ff00000
 800d3a8:	40080000 	.word	0x40080000
 800d3ac:	0800dfc0 	.word	0x0800dfc0
 800d3b0:	0800dfb0 	.word	0x0800dfb0
 800d3b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d68c <__ieee754_pow+0xa54>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f2 ff85 	bl	80002cc <__adddf3>
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	ec41 0b1a 	vmov	d10, r0, r1
 800d3c8:	462b      	mov	r3, r5
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	f7f2 ff7b 	bl	80002c8 <__aeabi_dsub>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	ec51 0b1a 	vmov	r0, r1, d10
 800d3da:	f7f3 fbbd 	bl	8000b58 <__aeabi_dcmpgt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f47f ae04 	bne.w	800cfec <__ieee754_pow+0x3b4>
 800d3e4:	4aa4      	ldr	r2, [pc, #656]	; (800d678 <__ieee754_pow+0xa40>)
 800d3e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	f340 8108 	ble.w	800d600 <__ieee754_pow+0x9c8>
 800d3f0:	151b      	asrs	r3, r3, #20
 800d3f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d3f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d3fa:	fa4a f303 	asr.w	r3, sl, r3
 800d3fe:	445b      	add	r3, fp
 800d400:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d404:	4e9d      	ldr	r6, [pc, #628]	; (800d67c <__ieee754_pow+0xa44>)
 800d406:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d40a:	4116      	asrs	r6, r2
 800d40c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d410:	2000      	movs	r0, #0
 800d412:	ea23 0106 	bic.w	r1, r3, r6
 800d416:	f1c2 0214 	rsb	r2, r2, #20
 800d41a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d41e:	fa4a fa02 	asr.w	sl, sl, r2
 800d422:	f1bb 0f00 	cmp.w	fp, #0
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	4620      	mov	r0, r4
 800d42c:	4629      	mov	r1, r5
 800d42e:	bfb8      	it	lt
 800d430:	f1ca 0a00 	rsblt	sl, sl, #0
 800d434:	f7f2 ff48 	bl	80002c8 <__aeabi_dsub>
 800d438:	ec41 0b19 	vmov	d9, r0, r1
 800d43c:	4642      	mov	r2, r8
 800d43e:	464b      	mov	r3, r9
 800d440:	ec51 0b19 	vmov	r0, r1, d9
 800d444:	f7f2 ff42 	bl	80002cc <__adddf3>
 800d448:	a37b      	add	r3, pc, #492	; (adr r3, 800d638 <__ieee754_pow+0xa00>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	2000      	movs	r0, #0
 800d450:	4604      	mov	r4, r0
 800d452:	460d      	mov	r5, r1
 800d454:	f7f3 f8f0 	bl	8000638 <__aeabi_dmul>
 800d458:	ec53 2b19 	vmov	r2, r3, d9
 800d45c:	4606      	mov	r6, r0
 800d45e:	460f      	mov	r7, r1
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	f7f2 ff30 	bl	80002c8 <__aeabi_dsub>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4640      	mov	r0, r8
 800d46e:	4649      	mov	r1, r9
 800d470:	f7f2 ff2a 	bl	80002c8 <__aeabi_dsub>
 800d474:	a372      	add	r3, pc, #456	; (adr r3, 800d640 <__ieee754_pow+0xa08>)
 800d476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47a:	f7f3 f8dd 	bl	8000638 <__aeabi_dmul>
 800d47e:	a372      	add	r3, pc, #456	; (adr r3, 800d648 <__ieee754_pow+0xa10>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	4680      	mov	r8, r0
 800d486:	4689      	mov	r9, r1
 800d488:	4620      	mov	r0, r4
 800d48a:	4629      	mov	r1, r5
 800d48c:	f7f3 f8d4 	bl	8000638 <__aeabi_dmul>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4640      	mov	r0, r8
 800d496:	4649      	mov	r1, r9
 800d498:	f7f2 ff18 	bl	80002cc <__adddf3>
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	f7f2 ff10 	bl	80002cc <__adddf3>
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	463b      	mov	r3, r7
 800d4b0:	4680      	mov	r8, r0
 800d4b2:	4689      	mov	r9, r1
 800d4b4:	f7f2 ff08 	bl	80002c8 <__aeabi_dsub>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4620      	mov	r0, r4
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f7f2 ff02 	bl	80002c8 <__aeabi_dsub>
 800d4c4:	4642      	mov	r2, r8
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	460f      	mov	r7, r1
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	f7f3 f8b2 	bl	8000638 <__aeabi_dmul>
 800d4d4:	a35e      	add	r3, pc, #376	; (adr r3, 800d650 <__ieee754_pow+0xa18>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	4604      	mov	r4, r0
 800d4dc:	460d      	mov	r5, r1
 800d4de:	f7f3 f8ab 	bl	8000638 <__aeabi_dmul>
 800d4e2:	a35d      	add	r3, pc, #372	; (adr r3, 800d658 <__ieee754_pow+0xa20>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f2 feee 	bl	80002c8 <__aeabi_dsub>
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	f7f3 f8a2 	bl	8000638 <__aeabi_dmul>
 800d4f4:	a35a      	add	r3, pc, #360	; (adr r3, 800d660 <__ieee754_pow+0xa28>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f2 fee7 	bl	80002cc <__adddf3>
 800d4fe:	4622      	mov	r2, r4
 800d500:	462b      	mov	r3, r5
 800d502:	f7f3 f899 	bl	8000638 <__aeabi_dmul>
 800d506:	a358      	add	r3, pc, #352	; (adr r3, 800d668 <__ieee754_pow+0xa30>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f2 fedc 	bl	80002c8 <__aeabi_dsub>
 800d510:	4622      	mov	r2, r4
 800d512:	462b      	mov	r3, r5
 800d514:	f7f3 f890 	bl	8000638 <__aeabi_dmul>
 800d518:	a355      	add	r3, pc, #340	; (adr r3, 800d670 <__ieee754_pow+0xa38>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f2 fed5 	bl	80002cc <__adddf3>
 800d522:	4622      	mov	r2, r4
 800d524:	462b      	mov	r3, r5
 800d526:	f7f3 f887 	bl	8000638 <__aeabi_dmul>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	4640      	mov	r0, r8
 800d530:	4649      	mov	r1, r9
 800d532:	f7f2 fec9 	bl	80002c8 <__aeabi_dsub>
 800d536:	4604      	mov	r4, r0
 800d538:	460d      	mov	r5, r1
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	4640      	mov	r0, r8
 800d540:	4649      	mov	r1, r9
 800d542:	f7f3 f879 	bl	8000638 <__aeabi_dmul>
 800d546:	2200      	movs	r2, #0
 800d548:	ec41 0b19 	vmov	d9, r0, r1
 800d54c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d550:	4620      	mov	r0, r4
 800d552:	4629      	mov	r1, r5
 800d554:	f7f2 feb8 	bl	80002c8 <__aeabi_dsub>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	ec51 0b19 	vmov	r0, r1, d9
 800d560:	f7f3 f994 	bl	800088c <__aeabi_ddiv>
 800d564:	4632      	mov	r2, r6
 800d566:	4604      	mov	r4, r0
 800d568:	460d      	mov	r5, r1
 800d56a:	463b      	mov	r3, r7
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f3 f862 	bl	8000638 <__aeabi_dmul>
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	f7f2 fea8 	bl	80002cc <__adddf3>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4620      	mov	r0, r4
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fea0 	bl	80002c8 <__aeabi_dsub>
 800d588:	4642      	mov	r2, r8
 800d58a:	464b      	mov	r3, r9
 800d58c:	f7f2 fe9c 	bl	80002c8 <__aeabi_dsub>
 800d590:	460b      	mov	r3, r1
 800d592:	4602      	mov	r2, r0
 800d594:	493a      	ldr	r1, [pc, #232]	; (800d680 <__ieee754_pow+0xa48>)
 800d596:	2000      	movs	r0, #0
 800d598:	f7f2 fe96 	bl	80002c8 <__aeabi_dsub>
 800d59c:	ec41 0b10 	vmov	d0, r0, r1
 800d5a0:	ee10 3a90 	vmov	r3, s1
 800d5a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d5a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5ac:	da2b      	bge.n	800d606 <__ieee754_pow+0x9ce>
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	f000 f966 	bl	800d880 <scalbn>
 800d5b4:	ec51 0b10 	vmov	r0, r1, d0
 800d5b8:	ec53 2b18 	vmov	r2, r3, d8
 800d5bc:	f7ff bbed 	b.w	800cd9a <__ieee754_pow+0x162>
 800d5c0:	4b30      	ldr	r3, [pc, #192]	; (800d684 <__ieee754_pow+0xa4c>)
 800d5c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d5c6:	429e      	cmp	r6, r3
 800d5c8:	f77f af0c 	ble.w	800d3e4 <__ieee754_pow+0x7ac>
 800d5cc:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <__ieee754_pow+0xa50>)
 800d5ce:	440b      	add	r3, r1
 800d5d0:	4303      	orrs	r3, r0
 800d5d2:	d009      	beq.n	800d5e8 <__ieee754_pow+0x9b0>
 800d5d4:	ec51 0b18 	vmov	r0, r1, d8
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f7f3 fa9e 	bl	8000b1c <__aeabi_dcmplt>
 800d5e0:	3800      	subs	r0, #0
 800d5e2:	bf18      	it	ne
 800d5e4:	2001      	movne	r0, #1
 800d5e6:	e447      	b.n	800ce78 <__ieee754_pow+0x240>
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	f7f2 fe6c 	bl	80002c8 <__aeabi_dsub>
 800d5f0:	4642      	mov	r2, r8
 800d5f2:	464b      	mov	r3, r9
 800d5f4:	f7f3 faa6 	bl	8000b44 <__aeabi_dcmpge>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	f43f aef3 	beq.w	800d3e4 <__ieee754_pow+0x7ac>
 800d5fe:	e7e9      	b.n	800d5d4 <__ieee754_pow+0x99c>
 800d600:	f04f 0a00 	mov.w	sl, #0
 800d604:	e71a      	b.n	800d43c <__ieee754_pow+0x804>
 800d606:	ec51 0b10 	vmov	r0, r1, d0
 800d60a:	4619      	mov	r1, r3
 800d60c:	e7d4      	b.n	800d5b8 <__ieee754_pow+0x980>
 800d60e:	491c      	ldr	r1, [pc, #112]	; (800d680 <__ieee754_pow+0xa48>)
 800d610:	2000      	movs	r0, #0
 800d612:	f7ff bb30 	b.w	800cc76 <__ieee754_pow+0x3e>
 800d616:	2000      	movs	r0, #0
 800d618:	2100      	movs	r1, #0
 800d61a:	f7ff bb2c 	b.w	800cc76 <__ieee754_pow+0x3e>
 800d61e:	4630      	mov	r0, r6
 800d620:	4639      	mov	r1, r7
 800d622:	f7ff bb28 	b.w	800cc76 <__ieee754_pow+0x3e>
 800d626:	9204      	str	r2, [sp, #16]
 800d628:	f7ff bb7a 	b.w	800cd20 <__ieee754_pow+0xe8>
 800d62c:	2300      	movs	r3, #0
 800d62e:	f7ff bb64 	b.w	800ccfa <__ieee754_pow+0xc2>
 800d632:	bf00      	nop
 800d634:	f3af 8000 	nop.w
 800d638:	00000000 	.word	0x00000000
 800d63c:	3fe62e43 	.word	0x3fe62e43
 800d640:	fefa39ef 	.word	0xfefa39ef
 800d644:	3fe62e42 	.word	0x3fe62e42
 800d648:	0ca86c39 	.word	0x0ca86c39
 800d64c:	be205c61 	.word	0xbe205c61
 800d650:	72bea4d0 	.word	0x72bea4d0
 800d654:	3e663769 	.word	0x3e663769
 800d658:	c5d26bf1 	.word	0xc5d26bf1
 800d65c:	3ebbbd41 	.word	0x3ebbbd41
 800d660:	af25de2c 	.word	0xaf25de2c
 800d664:	3f11566a 	.word	0x3f11566a
 800d668:	16bebd93 	.word	0x16bebd93
 800d66c:	3f66c16c 	.word	0x3f66c16c
 800d670:	5555553e 	.word	0x5555553e
 800d674:	3fc55555 	.word	0x3fc55555
 800d678:	3fe00000 	.word	0x3fe00000
 800d67c:	000fffff 	.word	0x000fffff
 800d680:	3ff00000 	.word	0x3ff00000
 800d684:	4090cbff 	.word	0x4090cbff
 800d688:	3f6f3400 	.word	0x3f6f3400
 800d68c:	652b82fe 	.word	0x652b82fe
 800d690:	3c971547 	.word	0x3c971547

0800d694 <__ieee754_sqrt>:
 800d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d698:	ec55 4b10 	vmov	r4, r5, d0
 800d69c:	4e55      	ldr	r6, [pc, #340]	; (800d7f4 <__ieee754_sqrt+0x160>)
 800d69e:	43ae      	bics	r6, r5
 800d6a0:	ee10 0a10 	vmov	r0, s0
 800d6a4:	ee10 3a10 	vmov	r3, s0
 800d6a8:	462a      	mov	r2, r5
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	d110      	bne.n	800d6d0 <__ieee754_sqrt+0x3c>
 800d6ae:	ee10 2a10 	vmov	r2, s0
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	f7f2 ffc0 	bl	8000638 <__aeabi_dmul>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	4620      	mov	r0, r4
 800d6be:	4629      	mov	r1, r5
 800d6c0:	f7f2 fe04 	bl	80002cc <__adddf3>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	460d      	mov	r5, r1
 800d6c8:	ec45 4b10 	vmov	d0, r4, r5
 800d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d0:	2d00      	cmp	r5, #0
 800d6d2:	dc10      	bgt.n	800d6f6 <__ieee754_sqrt+0x62>
 800d6d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d6d8:	4330      	orrs	r0, r6
 800d6da:	d0f5      	beq.n	800d6c8 <__ieee754_sqrt+0x34>
 800d6dc:	b15d      	cbz	r5, 800d6f6 <__ieee754_sqrt+0x62>
 800d6de:	ee10 2a10 	vmov	r2, s0
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	ee10 0a10 	vmov	r0, s0
 800d6e8:	f7f2 fdee 	bl	80002c8 <__aeabi_dsub>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	f7f3 f8cc 	bl	800088c <__aeabi_ddiv>
 800d6f4:	e7e6      	b.n	800d6c4 <__ieee754_sqrt+0x30>
 800d6f6:	1512      	asrs	r2, r2, #20
 800d6f8:	d074      	beq.n	800d7e4 <__ieee754_sqrt+0x150>
 800d6fa:	07d4      	lsls	r4, r2, #31
 800d6fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d700:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d708:	bf5e      	ittt	pl
 800d70a:	0fda      	lsrpl	r2, r3, #31
 800d70c:	005b      	lslpl	r3, r3, #1
 800d70e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d712:	2400      	movs	r4, #0
 800d714:	0fda      	lsrs	r2, r3, #31
 800d716:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d71a:	107f      	asrs	r7, r7, #1
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	2516      	movs	r5, #22
 800d720:	4620      	mov	r0, r4
 800d722:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d726:	1886      	adds	r6, r0, r2
 800d728:	428e      	cmp	r6, r1
 800d72a:	bfde      	ittt	le
 800d72c:	1b89      	suble	r1, r1, r6
 800d72e:	18b0      	addle	r0, r6, r2
 800d730:	18a4      	addle	r4, r4, r2
 800d732:	0049      	lsls	r1, r1, #1
 800d734:	3d01      	subs	r5, #1
 800d736:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d73a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d73e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d742:	d1f0      	bne.n	800d726 <__ieee754_sqrt+0x92>
 800d744:	462a      	mov	r2, r5
 800d746:	f04f 0e20 	mov.w	lr, #32
 800d74a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d74e:	4281      	cmp	r1, r0
 800d750:	eb06 0c05 	add.w	ip, r6, r5
 800d754:	dc02      	bgt.n	800d75c <__ieee754_sqrt+0xc8>
 800d756:	d113      	bne.n	800d780 <__ieee754_sqrt+0xec>
 800d758:	459c      	cmp	ip, r3
 800d75a:	d811      	bhi.n	800d780 <__ieee754_sqrt+0xec>
 800d75c:	f1bc 0f00 	cmp.w	ip, #0
 800d760:	eb0c 0506 	add.w	r5, ip, r6
 800d764:	da43      	bge.n	800d7ee <__ieee754_sqrt+0x15a>
 800d766:	2d00      	cmp	r5, #0
 800d768:	db41      	blt.n	800d7ee <__ieee754_sqrt+0x15a>
 800d76a:	f100 0801 	add.w	r8, r0, #1
 800d76e:	1a09      	subs	r1, r1, r0
 800d770:	459c      	cmp	ip, r3
 800d772:	bf88      	it	hi
 800d774:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d778:	eba3 030c 	sub.w	r3, r3, ip
 800d77c:	4432      	add	r2, r6
 800d77e:	4640      	mov	r0, r8
 800d780:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d784:	f1be 0e01 	subs.w	lr, lr, #1
 800d788:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d790:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d794:	d1db      	bne.n	800d74e <__ieee754_sqrt+0xba>
 800d796:	430b      	orrs	r3, r1
 800d798:	d006      	beq.n	800d7a8 <__ieee754_sqrt+0x114>
 800d79a:	1c50      	adds	r0, r2, #1
 800d79c:	bf13      	iteet	ne
 800d79e:	3201      	addne	r2, #1
 800d7a0:	3401      	addeq	r4, #1
 800d7a2:	4672      	moveq	r2, lr
 800d7a4:	f022 0201 	bicne.w	r2, r2, #1
 800d7a8:	1063      	asrs	r3, r4, #1
 800d7aa:	0852      	lsrs	r2, r2, #1
 800d7ac:	07e1      	lsls	r1, r4, #31
 800d7ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d7b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d7b6:	bf48      	it	mi
 800d7b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d7bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	e781      	b.n	800d6c8 <__ieee754_sqrt+0x34>
 800d7c4:	0ad9      	lsrs	r1, r3, #11
 800d7c6:	3815      	subs	r0, #21
 800d7c8:	055b      	lsls	r3, r3, #21
 800d7ca:	2900      	cmp	r1, #0
 800d7cc:	d0fa      	beq.n	800d7c4 <__ieee754_sqrt+0x130>
 800d7ce:	02cd      	lsls	r5, r1, #11
 800d7d0:	d50a      	bpl.n	800d7e8 <__ieee754_sqrt+0x154>
 800d7d2:	f1c2 0420 	rsb	r4, r2, #32
 800d7d6:	fa23 f404 	lsr.w	r4, r3, r4
 800d7da:	1e55      	subs	r5, r2, #1
 800d7dc:	4093      	lsls	r3, r2
 800d7de:	4321      	orrs	r1, r4
 800d7e0:	1b42      	subs	r2, r0, r5
 800d7e2:	e78a      	b.n	800d6fa <__ieee754_sqrt+0x66>
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	e7f0      	b.n	800d7ca <__ieee754_sqrt+0x136>
 800d7e8:	0049      	lsls	r1, r1, #1
 800d7ea:	3201      	adds	r2, #1
 800d7ec:	e7ef      	b.n	800d7ce <__ieee754_sqrt+0x13a>
 800d7ee:	4680      	mov	r8, r0
 800d7f0:	e7bd      	b.n	800d76e <__ieee754_sqrt+0xda>
 800d7f2:	bf00      	nop
 800d7f4:	7ff00000 	.word	0x7ff00000

0800d7f8 <with_errno>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	4616      	mov	r6, r2
 800d800:	f7fa fc7a 	bl	80080f8 <__errno>
 800d804:	4629      	mov	r1, r5
 800d806:	6006      	str	r6, [r0, #0]
 800d808:	4620      	mov	r0, r4
 800d80a:	bd70      	pop	{r4, r5, r6, pc}

0800d80c <xflow>:
 800d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d80e:	4614      	mov	r4, r2
 800d810:	461d      	mov	r5, r3
 800d812:	b108      	cbz	r0, 800d818 <xflow+0xc>
 800d814:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d818:	e9cd 2300 	strd	r2, r3, [sp]
 800d81c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d820:	4620      	mov	r0, r4
 800d822:	4629      	mov	r1, r5
 800d824:	f7f2 ff08 	bl	8000638 <__aeabi_dmul>
 800d828:	2222      	movs	r2, #34	; 0x22
 800d82a:	b003      	add	sp, #12
 800d82c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d830:	f7ff bfe2 	b.w	800d7f8 <with_errno>

0800d834 <__math_uflow>:
 800d834:	b508      	push	{r3, lr}
 800d836:	2200      	movs	r2, #0
 800d838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d83c:	f7ff ffe6 	bl	800d80c <xflow>
 800d840:	ec41 0b10 	vmov	d0, r0, r1
 800d844:	bd08      	pop	{r3, pc}

0800d846 <__math_oflow>:
 800d846:	b508      	push	{r3, lr}
 800d848:	2200      	movs	r2, #0
 800d84a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d84e:	f7ff ffdd 	bl	800d80c <xflow>
 800d852:	ec41 0b10 	vmov	d0, r0, r1
 800d856:	bd08      	pop	{r3, pc}

0800d858 <fabs>:
 800d858:	ec51 0b10 	vmov	r0, r1, d0
 800d85c:	ee10 2a10 	vmov	r2, s0
 800d860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d864:	ec43 2b10 	vmov	d0, r2, r3
 800d868:	4770      	bx	lr

0800d86a <finite>:
 800d86a:	b082      	sub	sp, #8
 800d86c:	ed8d 0b00 	vstr	d0, [sp]
 800d870:	9801      	ldr	r0, [sp, #4]
 800d872:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d876:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d87a:	0fc0      	lsrs	r0, r0, #31
 800d87c:	b002      	add	sp, #8
 800d87e:	4770      	bx	lr

0800d880 <scalbn>:
 800d880:	b570      	push	{r4, r5, r6, lr}
 800d882:	ec55 4b10 	vmov	r4, r5, d0
 800d886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d88a:	4606      	mov	r6, r0
 800d88c:	462b      	mov	r3, r5
 800d88e:	b99a      	cbnz	r2, 800d8b8 <scalbn+0x38>
 800d890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d894:	4323      	orrs	r3, r4
 800d896:	d036      	beq.n	800d906 <scalbn+0x86>
 800d898:	4b39      	ldr	r3, [pc, #228]	; (800d980 <scalbn+0x100>)
 800d89a:	4629      	mov	r1, r5
 800d89c:	ee10 0a10 	vmov	r0, s0
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f7f2 fec9 	bl	8000638 <__aeabi_dmul>
 800d8a6:	4b37      	ldr	r3, [pc, #220]	; (800d984 <scalbn+0x104>)
 800d8a8:	429e      	cmp	r6, r3
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	460d      	mov	r5, r1
 800d8ae:	da10      	bge.n	800d8d2 <scalbn+0x52>
 800d8b0:	a32b      	add	r3, pc, #172	; (adr r3, 800d960 <scalbn+0xe0>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	e03a      	b.n	800d92e <scalbn+0xae>
 800d8b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d8bc:	428a      	cmp	r2, r1
 800d8be:	d10c      	bne.n	800d8da <scalbn+0x5a>
 800d8c0:	ee10 2a10 	vmov	r2, s0
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 fd00 	bl	80002cc <__adddf3>
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	e019      	b.n	800d906 <scalbn+0x86>
 800d8d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	3a36      	subs	r2, #54	; 0x36
 800d8da:	4432      	add	r2, r6
 800d8dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d8e0:	428a      	cmp	r2, r1
 800d8e2:	dd08      	ble.n	800d8f6 <scalbn+0x76>
 800d8e4:	2d00      	cmp	r5, #0
 800d8e6:	a120      	add	r1, pc, #128	; (adr r1, 800d968 <scalbn+0xe8>)
 800d8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ec:	da1c      	bge.n	800d928 <scalbn+0xa8>
 800d8ee:	a120      	add	r1, pc, #128	; (adr r1, 800d970 <scalbn+0xf0>)
 800d8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f4:	e018      	b.n	800d928 <scalbn+0xa8>
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	dd08      	ble.n	800d90c <scalbn+0x8c>
 800d8fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d906:	ec45 4b10 	vmov	d0, r4, r5
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d910:	da19      	bge.n	800d946 <scalbn+0xc6>
 800d912:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d916:	429e      	cmp	r6, r3
 800d918:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d91c:	dd0a      	ble.n	800d934 <scalbn+0xb4>
 800d91e:	a112      	add	r1, pc, #72	; (adr r1, 800d968 <scalbn+0xe8>)
 800d920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e2      	bne.n	800d8ee <scalbn+0x6e>
 800d928:	a30f      	add	r3, pc, #60	; (adr r3, 800d968 <scalbn+0xe8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fe83 	bl	8000638 <__aeabi_dmul>
 800d932:	e7cb      	b.n	800d8cc <scalbn+0x4c>
 800d934:	a10a      	add	r1, pc, #40	; (adr r1, 800d960 <scalbn+0xe0>)
 800d936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0b8      	beq.n	800d8b0 <scalbn+0x30>
 800d93e:	a10e      	add	r1, pc, #56	; (adr r1, 800d978 <scalbn+0xf8>)
 800d940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d944:	e7b4      	b.n	800d8b0 <scalbn+0x30>
 800d946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d94a:	3236      	adds	r2, #54	; 0x36
 800d94c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d950:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d954:	4620      	mov	r0, r4
 800d956:	4b0c      	ldr	r3, [pc, #48]	; (800d988 <scalbn+0x108>)
 800d958:	2200      	movs	r2, #0
 800d95a:	e7e8      	b.n	800d92e <scalbn+0xae>
 800d95c:	f3af 8000 	nop.w
 800d960:	c2f8f359 	.word	0xc2f8f359
 800d964:	01a56e1f 	.word	0x01a56e1f
 800d968:	8800759c 	.word	0x8800759c
 800d96c:	7e37e43c 	.word	0x7e37e43c
 800d970:	8800759c 	.word	0x8800759c
 800d974:	fe37e43c 	.word	0xfe37e43c
 800d978:	c2f8f359 	.word	0xc2f8f359
 800d97c:	81a56e1f 	.word	0x81a56e1f
 800d980:	43500000 	.word	0x43500000
 800d984:	ffff3cb0 	.word	0xffff3cb0
 800d988:	3c900000 	.word	0x3c900000

0800d98c <_init>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	bf00      	nop
 800d990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d992:	bc08      	pop	{r3}
 800d994:	469e      	mov	lr, r3
 800d996:	4770      	bx	lr

0800d998 <_fini>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	bf00      	nop
 800d99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99e:	bc08      	pop	{r3}
 800d9a0:	469e      	mov	lr, r3
 800d9a2:	4770      	bx	lr
